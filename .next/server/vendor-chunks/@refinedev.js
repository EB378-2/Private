"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@refinedev";
exports.ids = ["vendor-chunks/@refinedev"];
exports.modules = {

/***/ "(ssr)/./node_modules/@refinedev/core/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@refinedev/core/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccessControlContext: () => (/* binding */ ct),\n/* harmony export */   ActionTypes: () => (/* binding */ Os),\n/* harmony export */   AuthPage: () => (/* binding */ ac),\n/* harmony export */   Authenticated: () => (/* binding */ Ec),\n/* harmony export */   AutoSaveIndicator: () => (/* binding */ Vc),\n/* harmony export */   CanAccess: () => (/* binding */ Sc),\n/* harmony export */   ErrorComponent: () => (/* binding */ sc),\n/* harmony export */   GitHubBanner: () => (/* binding */ Fc),\n/* harmony export */   I18nContext: () => (/* binding */ Xe),\n/* harmony export */   KeyBuilder: () => (/* binding */ wt),\n/* harmony export */   LayoutWrapper: () => (/* binding */ Dc),\n/* harmony export */   Link: () => (/* binding */ Io),\n/* harmony export */   LoginPage: () => (/* binding */ Yr),\n/* harmony export */   MetaContextProvider: () => (/* binding */ Zu),\n/* harmony export */   ReadyPage: () => (/* binding */ Qo),\n/* harmony export */   Refine: () => (/* binding */ Rc),\n/* harmony export */   ResourceContext: () => (/* binding */ Rt),\n/* harmony export */   RouteChangeHandler: () => (/* binding */ Vo),\n/* harmony export */   TranslationContext: () => (/* binding */ Xe),\n/* harmony export */   UndoableQueue: () => (/* binding */ un),\n/* harmony export */   WelcomePage: () => (/* binding */ mc),\n/* harmony export */   createTreeView: () => (/* binding */ is),\n/* harmony export */   file2Base64: () => (/* binding */ Da),\n/* harmony export */   flattenObjectKeys: () => (/* binding */ Cr),\n/* harmony export */   generateDefaultDocumentTitle: () => (/* binding */ ls),\n/* harmony export */   getDefaultFilter: () => (/* binding */ va),\n/* harmony export */   getDefaultSortOrder: () => (/* binding */ ba),\n/* harmony export */   getNextPageParam: () => (/* binding */ Tr),\n/* harmony export */   getPreviousPageParam: () => (/* binding */ xr),\n/* harmony export */   handleUseParams: () => (/* binding */ es),\n/* harmony export */   importCSVMapper: () => (/* binding */ sr),\n/* harmony export */   keys: () => (/* binding */ nt),\n/* harmony export */   legacyResourceTransform: () => (/* binding */ hr),\n/* harmony export */   matchResourceFromRoute: () => (/* binding */ as),\n/* harmony export */   parseTableParams: () => (/* binding */ vr),\n/* harmony export */   parseTableParamsFromQuery: () => (/* binding */ Ca),\n/* harmony export */   pickDataProvider: () => (/* binding */ ee),\n/* harmony export */   pickNotDeprecated: () => (/* binding */ I),\n/* harmony export */   propertyPathToArray: () => (/* binding */ Ts),\n/* harmony export */   queryKeys: () => (/* binding */ ts),\n/* harmony export */   routeGenerator: () => (/* binding */ yr),\n/* harmony export */   setInitialFilters: () => (/* binding */ Er),\n/* harmony export */   setInitialSorters: () => (/* binding */ Lr),\n/* harmony export */   stringifyTableParams: () => (/* binding */ Dr),\n/* harmony export */   unionFilters: () => (/* binding */ St),\n/* harmony export */   unionSorters: () => (/* binding */ Ur),\n/* harmony export */   useActiveAuthProvider: () => (/* binding */ ie),\n/* harmony export */   useApiUrl: () => (/* binding */ li),\n/* harmony export */   useAuthenticated: () => (/* binding */ Va),\n/* harmony export */   useBack: () => (/* binding */ Mo),\n/* harmony export */   useBreadcrumb: () => (/* binding */ fb),\n/* harmony export */   useCan: () => (/* binding */ kr),\n/* harmony export */   useCanWithoutCache: () => (/* binding */ cC),\n/* harmony export */   useCancelNotification: () => (/* binding */ ut),\n/* harmony export */   useCheckError: () => (/* binding */ Na),\n/* harmony export */   useCloneButton: () => (/* binding */ Jv),\n/* harmony export */   useCreate: () => (/* binding */ Xt),\n/* harmony export */   useCreateButton: () => (/* binding */ qv),\n/* harmony export */   useCreateMany: () => (/* binding */ bo),\n/* harmony export */   useCustom: () => (/* binding */ yi),\n/* harmony export */   useCustomMutation: () => (/* binding */ xi),\n/* harmony export */   useDataProvider: () => (/* binding */ le),\n/* harmony export */   useDelete: () => (/* binding */ Po),\n/* harmony export */   useDeleteButton: () => (/* binding */ qu),\n/* harmony export */   useDeleteMany: () => (/* binding */ di),\n/* harmony export */   useEditButton: () => (/* binding */ Yv),\n/* harmony export */   useExport: () => (/* binding */ fP),\n/* harmony export */   useExportButton: () => (/* binding */ rD),\n/* harmony export */   useForgotPassword: () => (/* binding */ lo),\n/* harmony export */   useForm: () => (/* binding */ RP),\n/* harmony export */   useGetIdentity: () => (/* binding */ no),\n/* harmony export */   useGetLocale: () => (/* binding */ Lo),\n/* harmony export */   useGetToPath: () => (/* binding */ Ut),\n/* harmony export */   useGo: () => (/* binding */ Pe),\n/* harmony export */   useHandleNotification: () => (/* binding */ Ce),\n/* harmony export */   useImport: () => (/* binding */ mR),\n/* harmony export */   useImportButton: () => (/* binding */ oD),\n/* harmony export */   useInfiniteList: () => (/* binding */ bi),\n/* harmony export */   useInvalidate: () => (/* binding */ Ae),\n/* harmony export */   useInvalidateAuthStore: () => (/* binding */ Dt),\n/* harmony export */   useIsAuthenticated: () => (/* binding */ wr),\n/* harmony export */   useIsExistAuthentication: () => (/* binding */ yo),\n/* harmony export */   useKeys: () => (/* binding */ Z),\n/* harmony export */   useLink: () => (/* binding */ yt),\n/* harmony export */   useList: () => (/* binding */ $t),\n/* harmony export */   useListButton: () => (/* binding */ eD),\n/* harmony export */   useLiveMode: () => (/* binding */ sn),\n/* harmony export */   useLoadingOvertime: () => (/* binding */ fe),\n/* harmony export */   useLog: () => (/* binding */ Je),\n/* harmony export */   useLogList: () => (/* binding */ eb),\n/* harmony export */   useLogin: () => (/* binding */ Ht),\n/* harmony export */   useLogout: () => (/* binding */ Mr),\n/* harmony export */   useMany: () => (/* binding */ go),\n/* harmony export */   useMenu: () => (/* binding */ zu),\n/* harmony export */   useMeta: () => (/* binding */ ue),\n/* harmony export */   useMetaContext: () => (/* binding */ Br),\n/* harmony export */   useModal: () => (/* binding */ TR),\n/* harmony export */   useMutationMode: () => (/* binding */ _e),\n/* harmony export */   useNavigation: () => (/* binding */ he),\n/* harmony export */   useNotification: () => (/* binding */ He),\n/* harmony export */   useOnError: () => (/* binding */ Re),\n/* harmony export */   useOne: () => (/* binding */ zt),\n/* harmony export */   useParse: () => (/* binding */ vo),\n/* harmony export */   useParsed: () => (/* binding */ Te),\n/* harmony export */   usePermissions: () => (/* binding */ Ua),\n/* harmony export */   usePublish: () => (/* binding */ Ye),\n/* harmony export */   useRedirectionAfterSubmission: () => (/* binding */ fn),\n/* harmony export */   useRefineContext: () => (/* binding */ ge),\n/* harmony export */   useRefineOptions: () => (/* binding */ At),\n/* harmony export */   useRefreshButton: () => (/* binding */ tc),\n/* harmony export */   useRegister: () => (/* binding */ co),\n/* harmony export */   useResource: () => (/* binding */ q),\n/* harmony export */   useResourceParams: () => (/* binding */ qe),\n/* harmony export */   useResourceSubscription: () => (/* binding */ Pt),\n/* harmony export */   useResourceWithRoute: () => (/* binding */ rn),\n/* harmony export */   useRouterContext: () => (/* binding */ pe),\n/* harmony export */   useRouterType: () => (/* binding */ oe),\n/* harmony export */   useSaveButton: () => (/* binding */ tD),\n/* harmony export */   useSelect: () => (/* binding */ PC),\n/* harmony export */   useSetLocale: () => (/* binding */ Eo),\n/* harmony export */   useShow: () => (/* binding */ nR),\n/* harmony export */   useShowButton: () => (/* binding */ Zv),\n/* harmony export */   useSubscription: () => (/* binding */ ph),\n/* harmony export */   useSyncWithLocation: () => (/* binding */ to),\n/* harmony export */   useTable: () => (/* binding */ IC),\n/* harmony export */   useTitle: () => (/* binding */ Ta),\n/* harmony export */   useToPath: () => (/* binding */ Du),\n/* harmony export */   useTranslate: () => (/* binding */ z),\n/* harmony export */   useTranslation: () => (/* binding */ tP),\n/* harmony export */   useUpdate: () => (/* binding */ To),\n/* harmony export */   useUpdateMany: () => (/* binding */ ii),\n/* harmony export */   useUpdatePassword: () => (/* binding */ fo),\n/* harmony export */   useUserFriendlyName: () => (/* binding */ ht),\n/* harmony export */   useWarnAboutChange: () => (/* binding */ vt),\n/* harmony export */   userFriendlyResourceName: () => (/* binding */ nr)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @refinedev/devtools-internal */ \"(ssr)/./node_modules/@refinedev/devtools-internal/dist/index.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/useQuery.mjs\");\n/* harmony import */ var lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash-es/differenceWith.js */ \"(ssr)/./node_modules/lodash-es/differenceWith.js\");\n/* harmony import */ var lodash_es_unionWith_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash-es/unionWith.js */ \"(ssr)/./node_modules/lodash-es/unionWith.js\");\n/* harmony import */ var qs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! qs */ \"(ssr)/./node_modules/qs/lib/index.js\");\n/* harmony import */ var warn_once__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! warn-once */ \"(ssr)/./node_modules/warn-once/index.js\");\n/* harmony import */ var lodash_es_fromPairs_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash-es/fromPairs.js */ \"(ssr)/./node_modules/lodash-es/fromPairs.js\");\n/* harmony import */ var lodash_es_zip_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es/zip.js */ \"(ssr)/./node_modules/lodash-es/zip.js\");\n/* harmony import */ var pluralize__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! pluralize */ \"(ssr)/./node_modules/pluralize/pluralize.js\");\n/* harmony import */ var lodash_es_debounce_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash-es/debounce.js */ \"(ssr)/./node_modules/lodash-es/debounce.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/useMutation.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/useInfiniteQuery.mjs\");\n/* harmony import */ var lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! lodash-es/isEqual.js */ \"(ssr)/./node_modules/lodash-es/isEqual.js\");\n/* harmony import */ var papaparse__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! papaparse */ \"(ssr)/./node_modules/papaparse/papaparse.js\");\n/* harmony import */ var lodash_es_chunk_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! lodash-es/chunk.js */ \"(ssr)/./node_modules/lodash-es/chunk.js\");\n/* harmony import */ var lodash_es_get_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! lodash-es/get.js */ \"(ssr)/./node_modules/lodash-es/get.js\");\n/* harmony import */ var lodash_es_uniqBy_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! lodash-es/uniqBy.js */ \"(ssr)/./node_modules/lodash-es/uniqBy.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/queryClient.mjs\");\n/* __next_internal_client_entry_do_not_use__ AccessControlContext,ActionTypes,AuthPage,Authenticated,AutoSaveIndicator,CanAccess,ErrorComponent,GitHubBanner,I18nContext,KeyBuilder,LayoutWrapper,Link,LoginPage,MetaContextProvider,ReadyPage,Refine,ResourceContext,RouteChangeHandler,TranslationContext,UndoableQueue,WelcomePage,createTreeView,file2Base64,flattenObjectKeys,generateDefaultDocumentTitle,getDefaultFilter,getDefaultSortOrder,getNextPageParam,getPreviousPageParam,handleUseParams,importCSVMapper,keys,legacyResourceTransform,matchResourceFromRoute,parseTableParams,parseTableParamsFromQuery,pickDataProvider,pickNotDeprecated,propertyPathToArray,queryKeys,routeGenerator,setInitialFilters,setInitialSorters,stringifyTableParams,unionFilters,unionSorters,useActiveAuthProvider,useApiUrl,useAuthenticated,useBack,useBreadcrumb,useCan,useCanWithoutCache,useCancelNotification,useCheckError,useCloneButton,useCreate,useCreateButton,useCreateMany,useCustom,useCustomMutation,useDataProvider,useDelete,useDeleteButton,useDeleteMany,useEditButton,useExport,useExportButton,useForgotPassword,useForm,useGetIdentity,useGetLocale,useGetToPath,useGo,useHandleNotification,useImport,useImportButton,useInfiniteList,useInvalidate,useInvalidateAuthStore,useIsAuthenticated,useIsExistAuthentication,useKeys,useLink,useList,useListButton,useLiveMode,useLoadingOvertime,useLog,useLogList,useLogin,useLogout,useMany,useMenu,useMeta,useMetaContext,useModal,useMutationMode,useNavigation,useNotification,useOnError,useOne,useParse,useParsed,usePermissions,usePublish,useRedirectionAfterSubmission,useRefineContext,useRefineOptions,useRefreshButton,useRegister,useResource,useResourceParams,useResourceSubscription,useResourceWithRoute,useRouterContext,useRouterType,useSaveButton,useSelect,useSetLocale,useShow,useShowButton,useSubscription,useSyncWithLocation,useTable,useTitle,useToPath,useTranslate,useTranslation,useUpdate,useUpdateMany,useUpdatePassword,useUserFriendlyName,useWarnAboutChange,userFriendlyResourceName auto */ var na = Object.defineProperty;\nvar o = (e, t)=>na(e, \"name\", {\n        value: t,\n        configurable: !0\n    });\n\n\n\n\nvar Xo = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({}), Zo = o(({ children: e, isProvided: t, ...r })=>{\n    let { replace: s } = he(), n = o(async (c)=>{\n        var p;\n        try {\n            return await ((p = r.login) == null ? void 0 : p.call(r, c));\n        } catch (l) {\n            return Promise.reject(l);\n        }\n    }, \"loginFunc\"), i = o(async (c)=>{\n        var p;\n        try {\n            return await ((p = r.register) == null ? void 0 : p.call(r, c));\n        } catch (l) {\n            return Promise.reject(l);\n        }\n    }, \"registerFunc\"), a = o(async (c)=>{\n        var p;\n        try {\n            return await ((p = r.logout) == null ? void 0 : p.call(r, c));\n        } catch (l) {\n            return Promise.reject(l);\n        }\n    }, \"logoutFunc\"), u = o(async (c)=>{\n        var p;\n        try {\n            return await ((p = r.checkAuth) == null ? void 0 : p.call(r, c)), Promise.resolve();\n        } catch (l) {\n            return l != null && l.redirectPath && s(l.redirectPath), Promise.reject(l);\n        }\n    }, \"checkAuthFunc\");\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Xo.Provider, {\n        value: {\n            ...r,\n            login: n,\n            logout: a,\n            checkAuth: u,\n            register: i,\n            isProvided: t\n        }\n    }, e);\n}, \"LegacyAuthContextProvider\"), Yo = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({}), Jo = o(({ children: e, isProvided: t, ...r })=>{\n    let s = o(async (p)=>{\n        var l;\n        try {\n            return await ((l = r.login) == null ? void 0 : l.call(r, p));\n        } catch (m) {\n            return console.warn(\"Unhandled Error in login: refine always expects a resolved promise.\", m), Promise.reject(m);\n        }\n    }, \"handleLogin\"), n = o(async (p)=>{\n        var l;\n        try {\n            return await ((l = r.register) == null ? void 0 : l.call(r, p));\n        } catch (m) {\n            return console.warn(\"Unhandled Error in register: refine always expects a resolved promise.\", m), Promise.reject(m);\n        }\n    }, \"handleRegister\"), i = o(async (p)=>{\n        var l;\n        try {\n            return await ((l = r.logout) == null ? void 0 : l.call(r, p));\n        } catch (m) {\n            return console.warn(\"Unhandled Error in logout: refine always expects a resolved promise.\", m), Promise.reject(m);\n        }\n    }, \"handleLogout\"), a = o(async (p)=>{\n        var l;\n        try {\n            let m = await ((l = r.check) == null ? void 0 : l.call(r, p));\n            return Promise.resolve(m);\n        } catch (m) {\n            return console.warn(\"Unhandled Error in check: refine always expects a resolved promise.\", m), Promise.reject(m);\n        }\n    }, \"handleCheck\"), u = o(async (p)=>{\n        var l;\n        try {\n            let m = await ((l = r.forgotPassword) == null ? void 0 : l.call(r, p));\n            return Promise.resolve(m);\n        } catch (m) {\n            return console.warn(\"Unhandled Error in forgotPassword: refine always expects a resolved promise.\", m), Promise.reject(m);\n        }\n    }, \"handleForgotPassword\"), c = o(async (p)=>{\n        var l;\n        try {\n            let m = await ((l = r.updatePassword) == null ? void 0 : l.call(r, p));\n            return Promise.resolve(m);\n        } catch (m) {\n            return console.warn(\"Unhandled Error in updatePassword: refine always expects a resolved promise.\", m), Promise.reject(m);\n        }\n    }, \"handleUpdatePassword\");\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Yo.Provider, {\n        value: {\n            ...r,\n            login: s,\n            logout: i,\n            check: a,\n            register: n,\n            forgotPassword: u,\n            updatePassword: c,\n            isProvided: t\n        }\n    }, e);\n}, \"AuthBindingsContextProvider\"), xe = o(()=>react__WEBPACK_IMPORTED_MODULE_0__.useContext(Xo), \"useLegacyAuthContext\"), Ue = o(()=>react__WEBPACK_IMPORTED_MODULE_0__.useContext(Yo), \"useAuthBindingsContext\");\n\n\n\n\nvar Bt = o((e)=>e / 1e3, \"userFriendlySecond\");\n\n\nvar sr = o((e, t = (r)=>r)=>{\n    let [r, ...s] = e;\n    return s.map((n)=>(0,lodash_es_fromPairs_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])((0,lodash_es_zip_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(r, n))).map((n, i, a)=>t.call(void 0, n, i, a));\n}, \"importCSVMapper\");\n\nvar nr = o((e = \"\", t)=>{\n    let r = Kt(e);\n    return t === \"singular\" ? pluralize__WEBPACK_IMPORTED_MODULE_4__.singular(r) : pluralize__WEBPACK_IMPORTED_MODULE_4__.plural(r);\n}, \"userFriendlyResourceName\");\nvar es = o((e = {})=>e != null && e.id ? {\n        ...e,\n        id: decodeURIComponent(e.id)\n    } : e, \"handleUseParams\");\nfunction pt(e, t) {\n    return e.findIndex((r, s)=>s <= e.length - t.length && t.every((n, i)=>e[s + i] === n));\n}\no(pt, \"arrayFindIndex\");\nfunction ua(e) {\n    if (e[0] === \"data\") {\n        let t = e.slice(1);\n        if (t[2] === \"many\") t[2] = \"getMany\";\n        else if (t[2] === \"infinite\") t[2] = \"list\";\n        else if (t[2] === \"one\") t[2] = \"detail\";\n        else if (t[1] === \"custom\") {\n            let r = {\n                ...t[2]\n            };\n            return delete r.method, delete r.url, [\n                t[0],\n                t[1],\n                t[2].method,\n                t[2].url,\n                r\n            ];\n        }\n        return t;\n    }\n    if (e[0] === \"audit\" && e[2] === \"list\") return [\n        \"logList\",\n        e[1],\n        e[3]\n    ];\n    if (e[0] === \"access\" && e.length === 4) return [\n        \"useCan\",\n        {\n            resource: e[1],\n            action: e[2],\n            ...e[3]\n        }\n    ];\n    if (e[0] === \"auth\") {\n        if (pt(e, [\n            \"auth\",\n            \"login\"\n        ]) !== -1) return [\n            \"useLogin\"\n        ];\n        if (pt(e, [\n            \"auth\",\n            \"logout\"\n        ]) !== -1) return [\n            \"useLogout\"\n        ];\n        if (pt(e, [\n            \"auth\",\n            \"identity\"\n        ]) !== -1) return [\n            \"getUserIdentity\"\n        ];\n        if (pt(e, [\n            \"auth\",\n            \"register\"\n        ]) !== -1) return [\n            \"useRegister\"\n        ];\n        if (pt(e, [\n            \"auth\",\n            \"forgotPassword\"\n        ]) !== -1) return [\n            \"useForgotPassword\"\n        ];\n        if (pt(e, [\n            \"auth\",\n            \"check\"\n        ]) !== -1) return [\n            \"useAuthenticated\",\n            e[2]\n        ];\n        if (pt(e, [\n            \"auth\",\n            \"onError\"\n        ]) !== -1) return [\n            \"useCheckError\"\n        ];\n        if (pt(e, [\n            \"auth\",\n            \"permissions\"\n        ]) !== -1) return [\n            \"usePermissions\"\n        ];\n        if (pt(e, [\n            \"auth\",\n            \"updatePassword\"\n        ]) !== -1) return [\n            \"useUpdatePassword\"\n        ];\n    }\n    return e;\n}\no(ua, \"convertToLegacy\");\nvar Oe = class {\n    constructor(t = []){\n        this.segments = [];\n        this.segments = t;\n    }\n    key() {\n        return this.segments;\n    }\n    legacy() {\n        return ua(this.segments);\n    }\n    get(t) {\n        return t ? this.legacy() : this.segments;\n    }\n};\no(Oe, \"BaseKeyBuilder\");\nvar st = class extends Oe {\n    params(t) {\n        return new Oe([\n            ...this.segments,\n            t\n        ]);\n    }\n};\no(st, \"ParamsKeyBuilder\");\nvar ar = class extends Oe {\n    id(t) {\n        return new st([\n            ...this.segments,\n            t ? String(t) : void 0\n        ]);\n    }\n};\no(ar, \"DataIdRequiringKeyBuilder\");\nvar ir = class extends Oe {\n    ids(...t) {\n        return new st([\n            ...this.segments,\n            ...t.length ? [\n                t.map((r)=>String(r))\n            ] : []\n        ]);\n    }\n};\no(ir, \"DataIdsRequiringKeyBuilder\");\nvar ur = class extends Oe {\n    action(t) {\n        if (t === \"one\") return new ar([\n            ...this.segments,\n            t\n        ]);\n        if (t === \"many\") return new ir([\n            ...this.segments,\n            t\n        ]);\n        if ([\n            \"list\",\n            \"infinite\"\n        ].includes(t)) return new st([\n            ...this.segments,\n            t\n        ]);\n        throw new Error(\"Invalid action type\");\n    }\n};\no(ur, \"DataResourceKeyBuilder\");\nvar cr = class extends Oe {\n    resource(t) {\n        return new ur([\n            ...this.segments,\n            t\n        ]);\n    }\n    mutation(t) {\n        return new st([\n            ...t === \"custom\" ? this.segments : [\n                this.segments[0]\n            ],\n            t\n        ]);\n    }\n};\no(cr, \"DataKeyBuilder\");\nvar pr = class extends Oe {\n    action(t) {\n        return new st([\n            ...this.segments,\n            t\n        ]);\n    }\n};\no(pr, \"AuthKeyBuilder\");\nvar dr = class extends Oe {\n    action(t) {\n        return new st([\n            ...this.segments,\n            t\n        ]);\n    }\n};\no(dr, \"AccessResourceKeyBuilder\");\nvar lr = class extends Oe {\n    resource(t) {\n        return new dr([\n            ...this.segments,\n            t\n        ]);\n    }\n};\no(lr, \"AccessKeyBuilder\");\nvar mr = class extends Oe {\n    action(t) {\n        return new st([\n            ...this.segments,\n            t\n        ]);\n    }\n};\no(mr, \"AuditActionKeyBuilder\");\nvar fr = class extends Oe {\n    resource(t) {\n        return new mr([\n            ...this.segments,\n            t\n        ]);\n    }\n    action(t) {\n        return new st([\n            ...this.segments,\n            t\n        ]);\n    }\n};\no(fr, \"AuditKeyBuilder\");\nvar wt = class extends Oe {\n    data(t) {\n        return new cr([\n            \"data\",\n            t || \"default\"\n        ]);\n    }\n    auth() {\n        return new pr([\n            \"auth\"\n        ]);\n    }\n    access() {\n        return new lr([\n            \"access\"\n        ]);\n    }\n    audit() {\n        return new fr([\n            \"audit\"\n        ]);\n    }\n};\no(wt, \"KeyBuilder\");\nvar nt = o(()=>new wt([]), \"keys\");\nvar I = o((...e)=>e.find((t)=>typeof t < \"u\"), \"pickNotDeprecated\");\nvar ts = o((e, t, r, s)=>{\n    let n = t || \"default\", i = {\n        all: [\n            n\n        ],\n        resourceAll: [\n            n,\n            e || \"\"\n        ],\n        list: (a)=>[\n                ...i.resourceAll,\n                \"list\",\n                {\n                    ...a,\n                    ...I(r, s) || {}\n                }\n            ],\n        many: (a)=>[\n                ...i.resourceAll,\n                \"getMany\",\n                a == null ? void 0 : a.map(String),\n                {\n                    ...I(r, s) || {}\n                }\n            ].filter((u)=>u !== void 0),\n        detail: (a)=>[\n                ...i.resourceAll,\n                \"detail\",\n                a == null ? void 0 : a.toString(),\n                {\n                    ...I(r, s) || {}\n                }\n            ],\n        logList: (a)=>[\n                \"logList\",\n                e,\n                a,\n                s\n            ].filter((u)=>u !== void 0)\n    };\n    return i;\n}, \"queryKeys\"), dt = o((e)=>(t, r, s, n)=>{\n        let i = r || \"default\";\n        return {\n            all: nt().data(i).get(e),\n            resourceAll: nt().data(r).resource(t ?? \"\").get(e),\n            list: (u)=>nt().data(r).resource(t ?? \"\").action(\"list\").params({\n                    ...u,\n                    ...I(s, n) || {}\n                }).get(e),\n            many: (u)=>nt().data(r).resource(t ?? \"\").action(\"many\").ids(...u ?? []).params({\n                    ...I(s, n) || {}\n                }).get(e),\n            detail: (u)=>nt().data(r).resource(t ?? \"\").action(\"one\").id(u ?? \"\").params({\n                    ...I(s, n) || {}\n                }).get(e),\n            logList: (u)=>[\n                    ...nt().audit().resource(t).action(\"list\").params(u).get(e),\n                    n\n                ].filter((c)=>c !== void 0)\n        };\n    }, \"queryKeysReplacement\");\nvar Xr = o((e, t)=>!e || !t ? !1 : !!e.find((r)=>r === t), \"hasPermission\");\nvar It = o((e)=>e.startsWith(\":\"), \"isParameter\");\nvar it = o((e)=>e.split(\"/\").filter((r)=>r !== \"\"), \"splitToSegments\");\nvar rs = o((e, t)=>{\n    let r = it(e), s = it(t);\n    return r.length === s.length;\n}, \"isSegmentCountsSame\");\nvar ke = o((e)=>e.replace(/^\\/|\\/$/g, \"\"), \"removeLeadingTrailingSlashes\");\nvar os = o((e, t)=>{\n    let r = ke(e), s = ke(t);\n    if (!rs(r, s)) return !1;\n    let n = it(r);\n    return it(s).every((a, u)=>It(a) || a === n[u]);\n}, \"checkBySegments\");\nvar ss = o((e, t, r)=>{\n    let s = ke(r || \"\"), n = `${s}${s ? \"/\" : \"\"}${e}`;\n    return t === \"list\" ? n = `${n}` : t === \"create\" ? n = `${n}/create` : t === \"edit\" ? n = `${n}/edit/:id` : t === \"show\" ? n = `${n}/show/:id` : t === \"clone\" && (n = `${n}/clone/:id`), `/${n.replace(/^\\//, \"\")}`;\n}, \"getDefaultActionPath\");\nvar ze = o((e, t)=>{\n    var n, i;\n    let r = I((n = e.meta) == null ? void 0 : n.parent, (i = e.options) == null ? void 0 : i.parent, e.parentName);\n    return r ? t.find((a)=>(a.identifier ?? a.name) === r) ?? {\n        name: r\n    } : void 0;\n}, \"getParentResource\");\nvar Gt = o((e, t, r)=>{\n    let s = [], n = ze(e, t);\n    for(; n;)s.push(n), n = ze(n, t);\n    if (s.length !== 0) return `/${s.reverse().map((i)=>{\n        var u;\n        let a = r ? ((u = i.options) == null ? void 0 : u.route) ?? i.name : i.name;\n        return ke(a);\n    }).join(\"/\")}`;\n}, \"getParentPrefixForResource\");\nvar Se = o((e, t, r)=>{\n    let s = [], n = [\n        \"list\",\n        \"show\",\n        \"edit\",\n        \"create\",\n        \"clone\"\n    ], i = Gt(e, t, r);\n    return n.forEach((a)=>{\n        var p, l;\n        let u = r && a === \"clone\" ? e.create : e[a], c;\n        typeof u == \"function\" || r ? c = ss(r ? ((p = e.meta) == null ? void 0 : p.route) ?? ((l = e.options) == null ? void 0 : l.route) ?? e.name : e.name, a, r ? i : void 0) : typeof u == \"string\" ? c = u : typeof u == \"object\" && (c = u.path), c && s.push({\n            action: a,\n            resource: e,\n            route: `/${c.replace(/^\\//, \"\")}`\n        });\n    }), s;\n}, \"getActionRoutesFromResource\");\nvar ns = o((e)=>{\n    var n;\n    if (e.length === 0) return;\n    if (e.length === 1) return e[0];\n    let t = e.map((i)=>({\n            ...i,\n            splitted: it(ke(i.route))\n        })), r = ((n = t[0]) == null ? void 0 : n.splitted.length) ?? 0, s = [\n        ...t\n    ];\n    for(let i = 0; i < r; i++){\n        let a = s.filter((u)=>!It(u.splitted[i]));\n        if (a.length !== 0) {\n            if (a.length === 1) {\n                s = a;\n                break;\n            }\n            s = a;\n        }\n    }\n    return s[0];\n}, \"pickMatchedRoute\");\nvar as = o((e, t)=>{\n    let s = t.flatMap((i)=>Se(i, t)).filter((i)=>os(e, i.route)), n = ns(s);\n    return {\n        found: !!n,\n        resource: n == null ? void 0 : n.resource,\n        action: n == null ? void 0 : n.action,\n        matchedRoute: n == null ? void 0 : n.route\n    };\n}, \"matchResourceFromRoute\");\nvar yr = o((e, t)=>{\n    var n;\n    let r, s = Gt(e, t, !0);\n    if (s) {\n        let i = I(e.meta, e.options);\n        r = `${s}/${(i == null ? void 0 : i.route) ?? e.name}`;\n    } else r = ((n = e.options) == null ? void 0 : n.route) ?? e.name;\n    return `/${r.replace(/^\\//, \"\")}`;\n}, \"routeGenerator\");\nvar is = o((e)=>{\n    var a;\n    let t = [], r = {}, s = {}, n, i;\n    for(let u = 0; u < e.length; u++){\n        n = e[u];\n        let c = n.route ?? ((a = I(n == null ? void 0 : n.meta, n.options)) == null ? void 0 : a.route) ?? \"\";\n        r[c] = n, r[c].children = [], s[n.name] = n, s[n.name].children = [];\n    }\n    for(let u in r)Object.hasOwn(r, u) && (i = r[u], i.parentName && s[i.parentName] ? s[i.parentName].children.push(i) : t.push(i));\n    return t;\n}, \"createTreeView\");\nvar Kt = o((e)=>(e = e.replace(/([a-z]{1})([A-Z]{1})/g, \"$1-$2\"), e = e.replace(/([A-Z]{1})([A-Z]{1})([a-z]{1})/g, \"$1-$2$3\"), e = e.toLowerCase().replace(/[_-]+/g, \" \").replace(/\\s{2,}/g, \" \").trim(), e = e.charAt(0).toUpperCase() + e.slice(1), e), \"humanizeString\");\n\n\n\nvar Zr = o(({ children: e })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, e), \"DefaultLayout\");\nvar pa = {\n    icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        width: 24,\n        height: 24,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        \"data-testid\": \"refine-logo\",\n        id: \"refine-default-logo\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fillRule: \"evenodd\",\n        clipRule: \"evenodd\",\n        d: \"M13.7889 0.422291C12.6627 -0.140764 11.3373 -0.140764 10.2111 0.422291L2.21115 4.42229C0.85601 5.09986 0 6.48491 0 8V16C0 17.5151 0.85601 18.9001 2.21115 19.5777L10.2111 23.5777C11.3373 24.1408 12.6627 24.1408 13.7889 23.5777L21.7889 19.5777C23.144 18.9001 24 17.5151 24 16V8C24 6.48491 23.144 5.09986 21.7889 4.42229L13.7889 0.422291ZM8 8C8 5.79086 9.79086 4 12 4C14.2091 4 16 5.79086 16 8V16C16 18.2091 14.2091 20 12 20C9.79086 20 8 18.2091 8 16V8Z\",\n        fill: \"currentColor\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M14 8C14 9.10457 13.1046 10 12 10C10.8954 10 10 9.10457 10 8C10 6.89543 10.8954 6 12 6C13.1046 6 14 6.89543 14 8Z\",\n        fill: \"currentColor\"\n    })),\n    text: \"Refine Project\"\n}, Fe = {\n    mutationMode: \"pessimistic\",\n    syncWithLocation: !1,\n    undoableTimeout: 5e3,\n    warnWhenUnsavedChanges: !1,\n    liveMode: \"off\",\n    redirect: {\n        afterCreate: \"list\",\n        afterClone: \"list\",\n        afterEdit: \"list\"\n    },\n    overtime: {\n        enabled: !0,\n        interval: 1e3\n    },\n    textTransformers: {\n        humanize: Kt,\n        plural: pluralize__WEBPACK_IMPORTED_MODULE_4__.plural,\n        singular: pluralize__WEBPACK_IMPORTED_MODULE_4__.singular\n    },\n    disableServerSideValidation: !1,\n    title: pa\n}, Qe = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    hasDashboard: !1,\n    mutationMode: \"pessimistic\",\n    warnWhenUnsavedChanges: !1,\n    syncWithLocation: !1,\n    undoableTimeout: 5e3,\n    Title: void 0,\n    Sider: void 0,\n    Header: void 0,\n    Footer: void 0,\n    Layout: Zr,\n    OffLayoutArea: void 0,\n    liveMode: \"off\",\n    onLiveEvent: void 0,\n    options: Fe\n}), cs = o(({ hasDashboard: e, mutationMode: t, warnWhenUnsavedChanges: r, syncWithLocation: s, undoableTimeout: n, children: i, DashboardPage: a, Title: u, Layout: c = Zr, Header: p, Sider: l, Footer: m, OffLayoutArea: y, LoginPage: d = Yr, catchAll: T, liveMode: x = \"off\", onLiveEvent: v, options: f })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Qe.Provider, {\n        value: {\n            __initialized: !0,\n            hasDashboard: e,\n            mutationMode: t,\n            warnWhenUnsavedChanges: r,\n            syncWithLocation: s,\n            Title: u,\n            undoableTimeout: n,\n            Layout: c,\n            Header: p,\n            Sider: l,\n            Footer: m,\n            OffLayoutArea: y,\n            DashboardPage: a,\n            LoginPage: d,\n            catchAll: T,\n            liveMode: x,\n            onLiveEvent: v,\n            options: f\n        }\n    }, i), \"RefineContextProvider\");\nvar Jr = o(({ options: e, disableTelemetry: t, liveMode: r, mutationMode: s, reactQueryClientConfig: n, reactQueryDevtoolConfig: i, syncWithLocation: a, undoableTimeout: u, warnWhenUnsavedChanges: c } = {})=>{\n    var y, d, T, x, v, f, P, M, Q, g, C, h;\n    let p = {\n        breadcrumb: e == null ? void 0 : e.breadcrumb,\n        mutationMode: (e == null ? void 0 : e.mutationMode) ?? s ?? Fe.mutationMode,\n        undoableTimeout: (e == null ? void 0 : e.undoableTimeout) ?? u ?? Fe.undoableTimeout,\n        syncWithLocation: (e == null ? void 0 : e.syncWithLocation) ?? a ?? Fe.syncWithLocation,\n        warnWhenUnsavedChanges: (e == null ? void 0 : e.warnWhenUnsavedChanges) ?? c ?? Fe.warnWhenUnsavedChanges,\n        liveMode: (e == null ? void 0 : e.liveMode) ?? r ?? Fe.liveMode,\n        redirect: {\n            afterCreate: ((y = e == null ? void 0 : e.redirect) == null ? void 0 : y.afterCreate) ?? Fe.redirect.afterCreate,\n            afterClone: ((d = e == null ? void 0 : e.redirect) == null ? void 0 : d.afterClone) ?? Fe.redirect.afterClone,\n            afterEdit: ((T = e == null ? void 0 : e.redirect) == null ? void 0 : T.afterEdit) ?? Fe.redirect.afterEdit\n        },\n        overtime: (e == null ? void 0 : e.overtime) ?? Fe.overtime,\n        textTransformers: {\n            humanize: ((x = e == null ? void 0 : e.textTransformers) == null ? void 0 : x.humanize) ?? Fe.textTransformers.humanize,\n            plural: ((v = e == null ? void 0 : e.textTransformers) == null ? void 0 : v.plural) ?? Fe.textTransformers.plural,\n            singular: ((f = e == null ? void 0 : e.textTransformers) == null ? void 0 : f.singular) ?? Fe.textTransformers.singular\n        },\n        disableServerSideValidation: (e == null ? void 0 : e.disableServerSideValidation) ?? Fe.disableServerSideValidation,\n        projectId: e == null ? void 0 : e.projectId,\n        useNewQueryKeys: e == null ? void 0 : e.useNewQueryKeys,\n        title: {\n            icon: typeof ((P = e == null ? void 0 : e.title) == null ? void 0 : P.icon) > \"u\" ? Fe.title.icon : (M = e == null ? void 0 : e.title) == null ? void 0 : M.icon,\n            text: typeof ((Q = e == null ? void 0 : e.title) == null ? void 0 : Q.text) > \"u\" ? Fe.title.text : (g = e == null ? void 0 : e.title) == null ? void 0 : g.text\n        }\n    }, l = (e == null ? void 0 : e.disableTelemetry) ?? t ?? !1, m = {\n        clientConfig: ((C = e == null ? void 0 : e.reactQuery) == null ? void 0 : C.clientConfig) ?? n ?? {},\n        devtoolConfig: ((h = e == null ? void 0 : e.reactQuery) == null ? void 0 : h.devtoolConfig) ?? i ?? {}\n    };\n    return {\n        optionsWithDefaults: p,\n        disableTelemetryWithDefault: l,\n        reactQueryWithDefaults: m\n    };\n}, \"handleRefineOptions\");\nvar qr = o(({ redirectFromProps: e, action: t, redirectOptions: r })=>{\n    if (e || e === !1) return e;\n    switch(t){\n        case \"clone\":\n            return r.afterClone;\n        case \"create\":\n            return r.afterCreate;\n        case \"edit\":\n            return r.afterEdit;\n        default:\n            return !1;\n    }\n}, \"redirectPage\");\nvar gr = o(async (e, t, r)=>{\n    let s = [];\n    for (let [n, i] of e.entries())try {\n        let a = await i();\n        s.push(t(a, n));\n    } catch (a) {\n        s.push(r(a, n));\n    }\n    return s;\n}, \"sequentialPromises\");\nvar Ee = o((e, t = [], r = !1)=>{\n    if (!e) return;\n    if (r) {\n        let n = t.find((a)=>ke(a.route ?? \"\") === ke(e));\n        return n || t.find((a)=>a.name === e);\n    }\n    let s = t.find((n)=>n.identifier === e);\n    return s || (s = t.find((n)=>n.name === e)), s;\n}, \"pickResource\");\nvar ee = o((e, t, r)=>{\n    if (t) return t;\n    let s = Ee(e, r), n = I(s == null ? void 0 : s.meta, s == null ? void 0 : s.options);\n    return n != null && n.dataProviderName ? n.dataProviderName : \"default\";\n}, \"pickDataProvider\");\nvar lt = o(async (e)=>({\n        data: (await Promise.all(e)).map((t)=>t.data)\n    }), \"handleMultiple\");\nvar Tr = o((e)=>{\n    let { pagination: t, cursor: r } = e;\n    if (r != null && r.next) return r.next;\n    let s = (t == null ? void 0 : t.current) || 1, n = (t == null ? void 0 : t.pageSize) || 10, i = Math.ceil((e.total || 0) / n);\n    return s < i ? Number(s) + 1 : void 0;\n}, \"getNextPageParam\"), xr = o((e)=>{\n    let { pagination: t, cursor: r } = e;\n    if (r != null && r.prev) return r.prev;\n    let s = (t == null ? void 0 : t.current) || 1;\n    return s === 1 ? void 0 : s - 1;\n}, \"getPreviousPageParam\");\nvar hr = o((e)=>{\n    let t = [];\n    return e.forEach((r)=>{\n        var s, n;\n        t.push({\n            ...r,\n            label: ((s = r.meta) == null ? void 0 : s.label) ?? ((n = r.options) == null ? void 0 : n.label),\n            route: yr(r, e),\n            canCreate: !!r.create,\n            canEdit: !!r.edit,\n            canShow: !!r.show,\n            canDelete: r.canDelete\n        });\n    }), t;\n}, \"legacyResourceTransform\");\nvar ps = o((e)=>it(ke(e)).flatMap((r)=>It(r) ? [\n            r.slice(1)\n        ] : []), \"pickRouteParams\");\nvar ds = o((e, t = {})=>e.reduce((r, s)=>{\n        let n = t[s];\n        return typeof n < \"u\" && (r[s] = n), r;\n    }, {}), \"prepareRouteParams\");\nvar We = o((e, t = {}, r = {}, s = {})=>{\n    let n = ps(e), i = ds(n, {\n        ...t,\n        ...typeof (r == null ? void 0 : r.id) < \"u\" ? {\n            id: r.id\n        } : {},\n        ...typeof (r == null ? void 0 : r.action) < \"u\" ? {\n            action: r.action\n        } : {},\n        ...typeof (r == null ? void 0 : r.resource) < \"u\" ? {\n            resource: r.resource\n        } : {},\n        ...r == null ? void 0 : r.params,\n        ...s\n    });\n    return e.replace(/:([^\\/]+)/g, (a, u)=>{\n        let c = i[u];\n        return typeof c < \"u\" ? `${c}` : a;\n    });\n}, \"composeRoute\");\nvar ie = o(()=>{\n    let e = xe(), t = Ue();\n    return t.isProvided ? {\n        isLegacy: !1,\n        ...t\n    } : e.isProvided ? {\n        isLegacy: !0,\n        ...e,\n        check: e.checkAuth,\n        onError: e.checkError,\n        getIdentity: e.getUserIdentity\n    } : null;\n}, \"useActiveAuthProvider\");\nvar Wt = o(({ hasPagination: e, pagination: t, configPagination: r } = {})=>{\n    let s = e === !1 ? \"off\" : \"server\", n = (t == null ? void 0 : t.mode) ?? s, i = I(t == null ? void 0 : t.current, r == null ? void 0 : r.current) ?? 1, a = I(t == null ? void 0 : t.pageSize, r == null ? void 0 : r.pageSize) ?? 10;\n    return {\n        current: i,\n        pageSize: a,\n        mode: n\n    };\n}, \"handlePaginationParams\");\n\nvar Pr = o((e)=>{\n    let [t, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let s = window.matchMedia(e);\n        s.matches !== t && r(s.matches);\n        let n = o(()=>r(s.matches), \"listener\");\n        return window.addEventListener(\"resize\", n), ()=>window.removeEventListener(\"resize\", n);\n    }, [\n        t,\n        e\n    ]), t;\n}, \"useMediaQuery\");\nvar Rr = o((e, t, r, s)=>{\n    let n = s ? e(t, s, r) : e(t, r), i = r ?? t;\n    return n === t || typeof n > \"u\" ? i : n;\n}, \"safeTranslate\");\nfunction ls(e, t, r, s, n) {\n    var y;\n    let i = {\n        create: \"Create new \",\n        clone: `#${s ?? \"\"} Clone `,\n        edit: `#${s ?? \"\"} Edit `,\n        show: `#${s ?? \"\"} Show `,\n        list: \"\"\n    }, a = (t == null ? void 0 : t.identifier) ?? (t == null ? void 0 : t.name), u = (t == null ? void 0 : t.label) ?? ((y = t == null ? void 0 : t.meta) == null ? void 0 : y.label) ?? nr(a, r === \"list\" ? \"plural\" : \"singular\"), c = n ?? u, p = Rr(e, \"documentTitle.default\", \"Refine\"), l = Rr(e, \"documentTitle.suffix\", \" | Refine\"), m = p;\n    return r && a && (m = Rr(e, `documentTitle.${a}.${r}`, `${i[r] ?? \"\"}${c}${l}`, {\n        id: s\n    })), m;\n}\no(ls, \"generateDefaultDocumentTitle\");\n\nvar _e = o((e, t)=>{\n    let { mutationMode: r, undoableTimeout: s } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Qe);\n    return {\n        mutationMode: e ?? r,\n        undoableTimeout: t ?? s\n    };\n}, \"useMutationMode\");\n\n\nvar eo = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({}), fs = o(({ children: e })=>{\n    let [t, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(eo.Provider, {\n        value: {\n            warnWhen: t,\n            setWarnWhen: r\n        }\n    }, e);\n}, \"UnsavedWarnContextProvider\");\nvar vt = o(()=>{\n    let { warnWhenUnsavedChanges: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Qe), { warnWhen: t, setWarnWhen: r } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(eo);\n    return {\n        warnWhenUnsavedChanges: e,\n        warnWhen: !!t,\n        setWarnWhen: r ?? (()=>{})\n    };\n}, \"useWarnAboutChange\");\n\nvar to = o(()=>{\n    let { syncWithLocation: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Qe);\n    return {\n        syncWithLocation: e\n    };\n}, \"useSyncWithLocation\");\n\nvar Ta = o(()=>{\n    let { Title: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Qe);\n    return e;\n}, \"useTitle\");\n\nvar ge = o(()=>{\n    let { Footer: e, Header: t, Layout: r, OffLayoutArea: s, Sider: n, Title: i, hasDashboard: a, mutationMode: u, syncWithLocation: c, undoableTimeout: p, warnWhenUnsavedChanges: l, DashboardPage: m, LoginPage: y, catchAll: d, options: T, __initialized: x } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Qe);\n    return {\n        __initialized: x,\n        Footer: e,\n        Header: t,\n        Layout: r,\n        OffLayoutArea: s,\n        Sider: n,\n        Title: i,\n        hasDashboard: a,\n        mutationMode: u,\n        syncWithLocation: c,\n        undoableTimeout: p,\n        warnWhenUnsavedChanges: l,\n        DashboardPage: m,\n        LoginPage: y,\n        catchAll: d,\n        options: T\n    };\n}, \"useRefineContext\");\nvar ht = o(()=>{\n    let { options: { textTransformers: e } } = ge();\n    return o((r = \"\", s)=>{\n        let n = e.humanize(r);\n        return s === \"singular\" ? e.singular(n) : e.plural(n);\n    }, \"getFriendlyName\");\n}, \"useUserFriendlyName\");\nvar gs = o((e)=>typeof e == \"object\" && e !== null, \"isNested\"), ha = o((e)=>Array.isArray(e), \"isArray\"), Cr = o((e, t = \"\")=>gs(e) ? Object.keys(e).reduce((r, s)=>{\n        let n = t.length ? `${t}.` : \"\";\n        return gs(e[s]) && Object.keys(e[s]).length && (ha(e[s]) && e[s].length ? e[s].forEach((i, a)=>{\n            Object.assign(r, Cr(i, `${n + s}.${a}`));\n        }) : Object.assign(r, Cr(e[s], n + s))), r[n + s] = e[s], r;\n    }, {}) : {\n        [t]: e\n    }, \"flattenObjectKeys\");\nvar Ts = o((e)=>e.split(\".\").map((t)=>Number.isNaN(Number(t)) ? t : Number(t)), \"propertyPathToArray\");\nvar ro = o((e, t, r)=>{\n    if (true) return;\n    let s = new Blob([\n        t\n    ], {\n        type: r\n    }), n = document.createElement(\"a\");\n    n.setAttribute(\"visibility\", \"hidden\"), n.download = e;\n    let i = URL.createObjectURL(s);\n    n.href = i, document.body.appendChild(n), n.click(), document.body.removeChild(n), setTimeout(()=>{\n        URL.revokeObjectURL(i);\n    });\n}, \"downloadInBrowser\");\nvar br = o((e)=>{\n    setTimeout(e, 0);\n}, \"deferExecution\");\n\nvar oo = o((e, t = 1e3, r)=>{\n    let s = [], n = o(()=>{\n        s.forEach((u)=>{\n            var c;\n            return (c = u.reject) == null ? void 0 : c.call(u, r);\n        }), s = [];\n    }, \"cancelPrevious\"), i = (0,lodash_es_debounce_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])((...u)=>{\n        let { resolve: c, reject: p } = s.pop() || {};\n        Promise.resolve(e(...u)).then(c).catch(p);\n    }, t), a = o((...u)=>new Promise((c, p)=>{\n            n(), s.push({\n                resolve: c,\n                reject: p\n            }), i(...u);\n        }), \"runner\");\n    return a.flush = ()=>i.flush(), a.cancel = ()=>{\n        i.cancel(), n();\n    }, a;\n}, \"asyncDebounce\");\nvar je = o((e)=>{\n    let t = {\n        queryKey: e.queryKey,\n        pageParam: e.pageParam\n    };\n    return Object.defineProperty(t, \"signal\", {\n        enumerable: !0,\n        get: ()=>e.signal\n    }), t;\n}, \"prepareQueryContext\");\nvar vr = o((e)=>{\n    let { current: t, pageSize: r, sorter: s, sorters: n, filters: i } = qs__WEBPACK_IMPORTED_MODULE_6__.parse(e.substring(1));\n    return {\n        parsedCurrent: t && Number(t),\n        parsedPageSize: r && Number(r),\n        parsedSorter: I(n, s) ?? [],\n        parsedFilters: i ?? []\n    };\n}, \"parseTableParams\"), Ca = o((e)=>{\n    let t = qs__WEBPACK_IMPORTED_MODULE_6__.stringify(e);\n    return vr(`/${t}`);\n}, \"parseTableParamsFromQuery\"), Dr = o((e)=>{\n    let t = {\n        skipNulls: !0,\n        arrayFormat: \"indices\",\n        encode: !1\n    }, { pagination: r, sorter: s, sorters: n, filters: i, ...a } = e;\n    return qs__WEBPACK_IMPORTED_MODULE_6__.stringify({\n        ...a,\n        ...r || {},\n        sorters: I(n, s),\n        filters: i\n    }, t);\n}, \"stringifyTableParams\"), Ps = o((e, t)=>e.operator !== \"and\" && e.operator !== \"or\" && t.operator !== \"and\" && t.operator !== \"or\" ? (\"field\" in e ? e.field : void 0) === (\"field\" in t ? t.field : void 0) && e.operator === t.operator : (\"key\" in e ? e.key : void 0) === (\"key\" in t ? t.key : void 0) && e.operator === t.operator, \"compareFilters\"), Rs = o((e, t)=>e.field === t.field, \"compareSorters\"), St = o((e, t, r = [])=>(t.filter((n)=>(n.operator === \"or\" || n.operator === \"and\") && !n.key).length > 1 && warn_once__WEBPACK_IMPORTED_MODULE_1__(!0, `[conditionalFilters]: You have created multiple Conditional Filters at the top level, this requires the key parameter. \nFor more information, see https://refine.dev/docs/advanced-tutorials/data-provider/handling-filters/#top-level-multiple-conditional-filters-usage`), (0,lodash_es_unionWith_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(e, t, r, Ps).filter((n)=>n.value !== void 0 && n.value !== null && (n.operator !== \"or\" || n.operator === \"or\" && n.value.length !== 0) && (n.operator !== \"and\" || n.operator === \"and\" && n.value.length !== 0))), \"unionFilters\"), Ur = o((e, t)=>(0,lodash_es_unionWith_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(e, t, Rs).filter((r)=>r.order !== void 0 && r.order !== null), \"unionSorters\"), Er = o((e, t)=>[\n        ...(0,lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(t, e, Ps),\n        ...e\n    ], \"setInitialFilters\"), Lr = o((e, t)=>[\n        ...(0,lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(t, e, Rs),\n        ...e\n    ], \"setInitialSorters\"), ba = o((e, t)=>{\n    if (!t) return;\n    let r = t.find((s)=>s.field === e);\n    if (r) return r.order;\n}, \"getDefaultSortOrder\"), va = o((e, t, r = \"eq\")=>{\n    let s = t == null ? void 0 : t.find((n)=>{\n        if (n.operator !== \"or\" && n.operator !== \"and\" && \"field\" in n) {\n            let { operator: i, field: a } = n;\n            return a === e && i === r;\n        }\n    });\n    if (s) return s.value || [];\n}, \"getDefaultFilter\");\nvar Da = o((e)=>new Promise((t, r)=>{\n        let s = new FileReader, n = o(()=>{\n            s.result && (s.removeEventListener(\"load\", n, !1), t(s.result));\n        }, \"resultHandler\");\n        s.addEventListener(\"load\", n, !1), s.readAsDataURL(e.originFileObj), s.onerror = (i)=>(s.removeEventListener(\"load\", n, !1), r(i));\n    }), \"file2Base64\");\nvar Z = o(()=>{\n    let { options: { useNewQueryKeys: e } } = ge();\n    return {\n        keys: nt,\n        preferLegacyKeys: !e\n    };\n}, \"useKeys\");\nfunction Ua({ v3LegacyAuthProviderCompatible: e = !1, options: t, params: r } = {}) {\n    let { getPermissions: s } = xe(), { getPermissions: n } = Ue(), { keys: i, preferLegacyKeys: a } = Z(), u = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: i().auth().action(\"permissions\").get(a),\n        queryFn: n ? ()=>n(r) : ()=>Promise.resolve(void 0),\n        enabled: !e && !!n,\n        ...e ? {} : t,\n        meta: {\n            ...e ? {} : t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"usePermissions\", a)\n        }\n    }), c = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: [\n            ...i().auth().action(\"permissions\").get(a),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        queryFn: s ? ()=>s(r) : ()=>Promise.resolve(void 0),\n        enabled: e && !!s,\n        ...e ? t : {},\n        meta: {\n            ...e ? t == null ? void 0 : t.meta : {},\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"usePermissions\", a)\n        }\n    });\n    return e ? c : u;\n}\no(Ua, \"usePermissions\");\n\n\nfunction no({ v3LegacyAuthProviderCompatible: e = !1, queryOptions: t } = {}) {\n    let { getUserIdentity: r } = xe(), { getIdentity: s } = Ue(), { keys: n, preferLegacyKeys: i } = Z(), a = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: n().auth().action(\"identity\").get(i),\n        queryFn: s ?? (()=>Promise.resolve({})),\n        enabled: !e && !!s,\n        retry: !1,\n        ...e === !0 ? {} : t,\n        meta: {\n            ...e === !0 ? {} : t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useGetIdentity\", i)\n        }\n    }), u = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: [\n            ...n().auth().action(\"identity\").get(i),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        queryFn: r ?? (()=>Promise.resolve({})),\n        enabled: e && !!r,\n        retry: !1,\n        ...e ? t : {},\n        meta: {\n            ...e ? t == null ? void 0 : t.meta : {},\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useGetIdentity\", i)\n        }\n    });\n    return e ? u : a;\n}\no(no, \"useGetIdentity\");\n\n\n\nvar Dt = o(()=>{\n    let e = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), { keys: t, preferLegacyKeys: r } = Z();\n    return o(async ()=>{\n        await Promise.all([\n            \"check\",\n            \"identity\",\n            \"permissions\"\n        ].map((n)=>e.invalidateQueries(t().auth().action(n).get(r))));\n    }, \"invalidate\");\n}, \"useInvalidateAuthStore\");\nfunction Mr({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {\n    let r = Dt(), s = oe(), n = Pe(), { push: i } = he(), { open: a, close: u } = He(), { logout: c } = xe(), { logout: p } = Ue(), { keys: l, preferLegacyKeys: m } = Z(), y = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: l().auth().action(\"logout\").get(m),\n        mutationFn: p,\n        onSuccess: async (T, x)=>{\n            let { success: v, error: f, redirectTo: P, successNotification: M } = T, { redirectPath: Q } = x ?? {}, g = Q ?? P;\n            v && (u == null || u(\"useLogout-error\"), M && (a == null || a(La(M)))), (f || !v) && (a == null || a(ao(f))), g !== !1 && (s === \"legacy\" ? i(g ?? \"/login\") : g && n({\n                to: g\n            })), await r();\n        },\n        onError: (T)=>{\n            a == null || a(ao(T));\n        },\n        ...e === !0 ? {} : t,\n        meta: {\n            ...e === !0 ? {} : t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useLogout\", m)\n        }\n    }), d = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: [\n            ...l().auth().action(\"logout\").get(m),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        mutationFn: c,\n        onSuccess: async (T, x)=>{\n            let v = (x == null ? void 0 : x.redirectPath) ?? T;\n            if (v !== !1) {\n                if (v) {\n                    s === \"legacy\" ? i(v) : n({\n                        to: v\n                    });\n                    return;\n                }\n                s === \"legacy\" ? i(\"/login\") : n({\n                    to: \"/login\"\n                }), await r();\n            }\n        },\n        onError: (T)=>{\n            a == null || a(ao(T));\n        },\n        ...e ? t : {},\n        meta: {\n            ...e ? t == null ? void 0 : t.meta : {},\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useLogout\", m)\n        }\n    });\n    return e ? d : y;\n}\no(Mr, \"useLogout\");\nvar ao = o((e)=>({\n        key: \"useLogout-error\",\n        type: \"error\",\n        message: (e == null ? void 0 : e.name) || \"Logout Error\",\n        description: (e == null ? void 0 : e.message) || \"Something went wrong during logout\"\n    }), \"buildNotification\"), La = o((e)=>({\n        message: e.message,\n        description: e.description,\n        key: \"logout-success\",\n        type: \"success\"\n    }), \"buildSuccessNotification\");\n\n\n\n\nfunction Ht({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {\n    let r = Dt(), s = oe(), n = Pe(), { replace: i } = he(), a = Te(), { useLocation: u } = pe(), { search: c } = u(), { close: p, open: l } = He(), { login: m } = xe(), { login: y } = Ue(), { keys: d, preferLegacyKeys: T } = Z(), x = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        var P;\n        return s === \"legacy\" ? qs__WEBPACK_IMPORTED_MODULE_6__.parse(c, {\n            ignoreQueryPrefix: !0\n        }).to : (P = a.params) == null ? void 0 : P.to;\n    }, [\n        s,\n        a.params,\n        c\n    ]), v = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: d().auth().action(\"login\").get(T),\n        mutationFn: y,\n        onSuccess: async ({ success: P, redirectTo: M, error: Q, successNotification: g })=>{\n            P && (p == null || p(\"login-error\"), g && (l == null || l(Ia(g)))), (Q || !P) && (l == null || l(io(Q))), x && P ? s === \"legacy\" ? i(x) : n({\n                to: x,\n                type: \"replace\"\n            }) : M ? s === \"legacy\" ? i(M) : n({\n                to: M,\n                type: \"replace\"\n            }) : s === \"legacy\" && i(\"/\"), setTimeout(()=>{\n                r();\n            }, 32);\n        },\n        onError: (P)=>{\n            l == null || l(io(P));\n        },\n        ...e === !0 ? {} : t,\n        meta: {\n            ...e === !0 ? {} : t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useLogin\", T)\n        }\n    }), f = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: [\n            ...d().auth().action(\"login\").get(T),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        mutationFn: m,\n        onSuccess: async (P)=>{\n            x && i(x), P !== !1 && !x && (typeof P == \"string\" ? s === \"legacy\" ? i(P) : n({\n                to: P,\n                type: \"replace\"\n            }) : s === \"legacy\" ? i(\"/\") : n({\n                to: \"/\",\n                type: \"replace\"\n            })), setTimeout(()=>{\n                r();\n            }, 32), p == null || p(\"login-error\");\n        },\n        onError: (P)=>{\n            l == null || l(io(P));\n        },\n        ...e ? t : {},\n        meta: {\n            ...e ? t == null ? void 0 : t.meta : {},\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useLogin\", T)\n        }\n    });\n    return e ? f : v;\n}\no(Ht, \"useLogin\");\nvar io = o((e)=>({\n        message: (e == null ? void 0 : e.name) || \"Login Error\",\n        description: (e == null ? void 0 : e.message) || \"Invalid credentials\",\n        key: \"login-error\",\n        type: \"error\"\n    }), \"buildNotification\"), Ia = o((e)=>({\n        message: e.message,\n        description: e.description,\n        key: \"login-success\",\n        type: \"success\"\n    }), \"buildSuccessNotification\");\n\n\nfunction co({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {\n    let r = Dt(), s = oe(), n = Pe(), { replace: i } = he(), { register: a } = xe(), { register: u } = Ue(), { close: c, open: p } = He(), { keys: l, preferLegacyKeys: m } = Z(), y = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: l().auth().action(\"register\").get(m),\n        mutationFn: u,\n        onSuccess: async ({ success: T, redirectTo: x, error: v, successNotification: f })=>{\n            T && (c == null || c(\"register-error\"), f && (p == null || p(Sa(f)))), (v || !T) && (p == null || p(uo(v))), x ? s === \"legacy\" ? i(x) : n({\n                to: x,\n                type: \"replace\"\n            }) : s === \"legacy\" && i(\"/\"), await r();\n        },\n        onError: (T)=>{\n            p == null || p(uo(T));\n        },\n        ...e === !0 ? {} : t,\n        meta: {\n            ...e === !0 ? {} : t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useRegister\", m)\n        }\n    }), d = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: [\n            ...l().auth().action(\"register\").get(m),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        mutationFn: a,\n        onSuccess: async (T)=>{\n            T !== !1 && (T ? s === \"legacy\" ? i(T) : n({\n                to: T,\n                type: \"replace\"\n            }) : s === \"legacy\" ? i(\"/\") : n({\n                to: \"/\",\n                type: \"replace\"\n            }), await r(), c == null || c(\"register-error\"));\n        },\n        onError: (T)=>{\n            p == null || p(uo(T));\n        },\n        ...e ? t : {},\n        meta: {\n            ...e ? t == null ? void 0 : t.meta : {},\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useRegister\", m)\n        }\n    });\n    return e ? d : y;\n}\no(co, \"useRegister\");\nvar uo = o((e)=>({\n        message: (e == null ? void 0 : e.name) || \"Register Error\",\n        description: (e == null ? void 0 : e.message) || \"Error while registering\",\n        key: \"register-error\",\n        type: \"error\"\n    }), \"buildNotification\"), Sa = o((e)=>({\n        message: e.message,\n        description: e.description,\n        key: \"register-success\",\n        type: \"success\"\n    }), \"buildSuccessNotification\");\n\n\nfunction lo({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {\n    let r = oe(), s = Pe(), { replace: n } = he(), { forgotPassword: i } = xe(), { forgotPassword: a } = Ue(), { close: u, open: c } = He(), { keys: p, preferLegacyKeys: l } = Z(), m = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: p().auth().action(\"forgotPassword\").get(l),\n        mutationFn: a,\n        onSuccess: ({ success: d, redirectTo: T, error: x, successNotification: v })=>{\n            d && (u == null || u(\"forgot-password-error\"), v && (c == null || c(Aa(v)))), (x || !d) && (c == null || c(po(x))), T && (r === \"legacy\" ? n(T) : s({\n                to: T,\n                type: \"replace\"\n            }));\n        },\n        onError: (d)=>{\n            c == null || c(po(d));\n        },\n        ...e === !0 ? {} : t,\n        meta: {\n            ...e === !0 ? {} : t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useForgotPassword\", l)\n        }\n    }), y = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: [\n            ...p().auth().action(\"forgotPassword\").get(l),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        mutationFn: i,\n        onSuccess: (d)=>{\n            d !== !1 && d && (r === \"legacy\" ? n(d) : s({\n                to: d,\n                type: \"replace\"\n            })), u == null || u(\"forgot-password-error\");\n        },\n        onError: (d)=>{\n            c == null || c(po(d));\n        },\n        ...e ? t : {},\n        meta: {\n            ...e ? t == null ? void 0 : t.meta : {},\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useForgotPassword\", l)\n        }\n    });\n    return e ? y : m;\n}\no(lo, \"useForgotPassword\");\nvar po = o((e)=>({\n        message: (e == null ? void 0 : e.name) || \"Forgot Password Error\",\n        description: (e == null ? void 0 : e.message) || \"Error while resetting password\",\n        key: \"forgot-password-error\",\n        type: \"error\"\n    }), \"buildNotification\"), Aa = o((e)=>({\n        message: e.message,\n        description: e.description,\n        key: \"forgot-password-success\",\n        type: \"success\"\n    }), \"buildSuccessNotification\");\n\n\n\n\nfunction fo({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {\n    let r = oe(), s = Pe(), { replace: n } = he(), { updatePassword: i } = xe(), { updatePassword: a } = Ue(), { close: u, open: c } = He(), { keys: p, preferLegacyKeys: l } = Z(), m = Te(), { useLocation: y } = pe(), { search: d } = y(), T = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>r === \"legacy\" ? qs__WEBPACK_IMPORTED_MODULE_6__.parse(d, {\n            ignoreQueryPrefix: !0\n        }) ?? {} : m.params ?? {}, [\n        d,\n        m,\n        r\n    ]), x = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: p().auth().action(\"updatePassword\").get(l),\n        mutationFn: async (f)=>a == null ? void 0 : a({\n                ...T,\n                ...f\n            }),\n        onSuccess: ({ success: f, redirectTo: P, error: M, successNotification: Q })=>{\n            f && (u == null || u(\"update-password-error\"), Q && (c == null || c(Qa(Q)))), (M || !f) && (c == null || c(mo(M))), P && (r === \"legacy\" ? n(P) : s({\n                to: P,\n                type: \"replace\"\n            }));\n        },\n        onError: (f)=>{\n            c == null || c(mo(f));\n        },\n        ...e === !0 ? {} : t,\n        meta: {\n            ...e === !0 ? {} : t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useUpdatePassword\", l)\n        }\n    }), v = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: [\n            ...p().auth().action(\"updatePassword\").get(l),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        mutationFn: async (f)=>i == null ? void 0 : i({\n                ...T,\n                ...f\n            }),\n        onSuccess: (f)=>{\n            f !== !1 && f && (r === \"legacy\" ? n(f) : s({\n                to: f,\n                type: \"replace\"\n            })), u == null || u(\"update-password-error\");\n        },\n        onError: (f)=>{\n            c == null || c(mo(f));\n        },\n        ...e ? t : {},\n        meta: {\n            ...e ? t == null ? void 0 : t.meta : {},\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useUpdatePassword\", l)\n        }\n    });\n    return e ? v : x;\n}\no(fo, \"useUpdatePassword\");\nvar mo = o((e)=>({\n        message: (e == null ? void 0 : e.name) || \"Update Password Error\",\n        description: (e == null ? void 0 : e.message) || \"Error while updating password\",\n        key: \"update-password-error\",\n        type: \"error\"\n    }), \"buildNotification\"), Qa = o((e)=>({\n        message: e.message,\n        description: e.description,\n        key: \"update-password-success\",\n        type: \"success\"\n    }), \"buildSuccessNotification\");\n\n\nfunction wr({ v3LegacyAuthProviderCompatible: e = !1, params: t } = {}) {\n    let { checkAuth: r } = xe(), { check: s } = Ue(), { keys: n, preferLegacyKeys: i } = Z(), a = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: n().auth().action(\"check\").params(t).get(i),\n        queryFn: async ()=>await (s == null ? void 0 : s(t)) ?? {},\n        retry: !1,\n        enabled: !e,\n        meta: {\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useIsAuthenticated\", i)\n        }\n    }), u = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: [\n            ...n().auth().action(\"check\").params(t).get(i),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        queryFn: async ()=>await (r == null ? void 0 : r(t)) ?? {},\n        retry: !1,\n        enabled: e,\n        meta: {\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useIsAuthenticated\", i)\n        }\n    });\n    return e ? u : a;\n}\no(wr, \"useIsAuthenticated\");\nvar Va = wr;\n\n\nfunction Re({ v3LegacyAuthProviderCompatible: e = !1 } = {}) {\n    let t = oe(), r = Pe(), { replace: s } = he(), { checkError: n } = xe(), { onError: i } = Ue(), { keys: a, preferLegacyKeys: u } = Z(), { mutate: c } = Mr({\n        v3LegacyAuthProviderCompatible: !!e\n    }), { mutate: p } = Mr({\n        v3LegacyAuthProviderCompatible: !!e\n    }), l = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: a().auth().action(\"onError\").get(u),\n        ...i ? {\n            mutationFn: i,\n            onSuccess: ({ logout: y, redirectTo: d })=>{\n                if (y) {\n                    p({\n                        redirectPath: d\n                    });\n                    return;\n                }\n                if (d) {\n                    t === \"legacy\" ? s(d) : r({\n                        to: d,\n                        type: \"replace\"\n                    });\n                    return;\n                }\n            }\n        } : {\n            mutationFn: ()=>({})\n        },\n        meta: {\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useOnError\", u)\n        }\n    }), m = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: [\n            ...a().auth().action(\"onError\").get(u),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        mutationFn: n,\n        onError: (y)=>{\n            c({\n                redirectPath: y\n            });\n        },\n        meta: {\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useOnError\", u)\n        }\n    });\n    return e ? m : l;\n}\no(Re, \"useOnError\");\nvar Na = Re;\nvar yo = o(()=>{\n    let { isProvided: e } = xe(), { isProvided: t } = Ue();\n    return !!(t || e);\n}, \"useIsExistAuthentication\");\n\n\n\nvar fe = o(({ enabled: e, isLoading: t, interval: r, onInterval: s })=>{\n    let [n, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0), { options: a } = ge(), { overtime: u } = a, c = r ?? u.interval, p = s ?? (u == null ? void 0 : u.onInterval), l = typeof e < \"u\" ? e : typeof u.enabled < \"u\" ? u.enabled : !0;\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let m;\n        return l && t && (m = setInterval(()=>{\n            i((y)=>y === void 0 ? c : y + c);\n        }, c)), ()=>{\n            typeof m < \"u\" && clearInterval(m), i(void 0);\n        };\n    }, [\n        t,\n        c,\n        l\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        p && n && p(n);\n    }, [\n        n\n    ]), {\n        elapsedTime: n\n    };\n}, \"useLoadingOvertime\");\nvar $t = o(({ resource: e, config: t, filters: r, hasPagination: s, pagination: n, sorters: i, queryOptions: a, successNotification: u, errorNotification: c, meta: p, metaData: l, liveMode: m, onLiveEvent: y, liveParams: d, dataProviderName: T, overtimeOptions: x } = {})=>{\n    let { resources: v, resource: f, identifier: P } = q(e), M = le(), Q = z(), g = ie(), { mutate: C } = Re({\n        v3LegacyAuthProviderCompatible: !!(g != null && g.isLegacy)\n    }), h = Ce(), D = ue(), { keys: k, preferLegacyKeys: E } = Z(), L = ee(P, T, v), U = I(p, l), w = I(r, t == null ? void 0 : t.filters), N = I(i, t == null ? void 0 : t.sort), b = I(s, t == null ? void 0 : t.hasPagination), F = Wt({\n        pagination: n,\n        configPagination: t == null ? void 0 : t.pagination,\n        hasPagination: b\n    }), V = F.mode === \"server\", G = D({\n        resource: f,\n        meta: U\n    }), W = {\n        meta: G,\n        metaData: G,\n        filters: w,\n        hasPagination: V,\n        pagination: F,\n        sorters: N,\n        config: {\n            ...t,\n            sort: N\n        }\n    }, K = (a == null ? void 0 : a.enabled) === void 0 || (a == null ? void 0 : a.enabled) === !0, { getList: j } = M(L);\n    Pt({\n        resource: P,\n        types: [\n            \"*\"\n        ],\n        params: {\n            meta: G,\n            metaData: G,\n            pagination: F,\n            hasPagination: V,\n            sort: N,\n            sorters: N,\n            filters: w,\n            subscriptionType: \"useList\",\n            ...d\n        },\n        channel: `resources/${f == null ? void 0 : f.name}`,\n        enabled: K,\n        liveMode: m,\n        onLiveEvent: y,\n        dataProviderName: L,\n        meta: {\n            ...p,\n            dataProviderName: T\n        }\n    });\n    let re = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: k().data(L).resource(P ?? \"\").action(\"list\").params({\n            ...U || {},\n            filters: w,\n            hasPagination: V,\n            ...V && {\n                pagination: F\n            },\n            ...i && {\n                sorters: i\n            },\n            ...(t == null ? void 0 : t.sort) && {\n                sort: t == null ? void 0 : t.sort\n            }\n        }).get(E),\n        queryFn: (R)=>{\n            let S = {\n                ...G,\n                queryContext: je(R)\n            };\n            return j({\n                resource: (f == null ? void 0 : f.name) ?? \"\",\n                pagination: F,\n                hasPagination: V,\n                filters: w,\n                sort: N,\n                sorters: N,\n                meta: S,\n                metaData: S\n            });\n        },\n        ...a,\n        enabled: typeof (a == null ? void 0 : a.enabled) < \"u\" ? a == null ? void 0 : a.enabled : !!(f != null && f.name),\n        select: (R)=>{\n            var X;\n            let S = R, { current: B, mode: H, pageSize: $ } = F;\n            return H === \"client\" && (S = {\n                ...S,\n                data: S.data.slice((B - 1) * $, B * $),\n                total: S.total\n            }), a != null && a.select ? (X = a == null ? void 0 : a.select) == null ? void 0 : X.call(a, S) : S;\n        },\n        onSuccess: (R)=>{\n            var B;\n            (B = a == null ? void 0 : a.onSuccess) == null || B.call(a, R);\n            let S = typeof u == \"function\" ? u(R, W, P) : u;\n            h(S);\n        },\n        onError: (R)=>{\n            var B;\n            C(R), (B = a == null ? void 0 : a.onError) == null || B.call(a, R);\n            let S = typeof c == \"function\" ? c(R, W, P) : c;\n            h(S, {\n                key: `${P}-useList-notification`,\n                message: Q(\"notifications.error\", {\n                    statusCode: R.statusCode\n                }, `Error (status code: ${R.statusCode})`),\n                description: R.message,\n                type: \"error\"\n            });\n        },\n        meta: {\n            ...a == null ? void 0 : a.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useList\", E, f == null ? void 0 : f.name)\n        }\n    }), { elapsedTime: te } = fe({\n        ...x,\n        isLoading: re.isFetching\n    });\n    return {\n        ...re,\n        overtime: {\n            elapsedTime: te\n        }\n    };\n}, \"useList\");\n\n\nvar zt = o(({ resource: e, id: t, queryOptions: r, successNotification: s, errorNotification: n, meta: i, metaData: a, liveMode: u, onLiveEvent: c, liveParams: p, dataProviderName: l, overtimeOptions: m })=>{\n    let { resources: y, resource: d, identifier: T } = q(e), x = le(), v = z(), f = ie(), { mutate: P } = Re({\n        v3LegacyAuthProviderCompatible: !!(f != null && f.isLegacy)\n    }), M = Ce(), Q = ue(), { keys: g, preferLegacyKeys: C } = Z(), h = I(i, a), D = ee(T, l, y), { getOne: k } = x(D), E = Q({\n        resource: d,\n        meta: h\n    });\n    Pt({\n        resource: T,\n        types: [\n            \"*\"\n        ],\n        channel: `resources/${d == null ? void 0 : d.name}`,\n        params: {\n            ids: t ? [\n                t\n            ] : [],\n            id: t,\n            meta: E,\n            metaData: E,\n            subscriptionType: \"useOne\",\n            ...p\n        },\n        enabled: typeof (r == null ? void 0 : r.enabled) < \"u\" ? r == null ? void 0 : r.enabled : typeof (d == null ? void 0 : d.name) < \"u\" && typeof t < \"u\",\n        liveMode: u,\n        onLiveEvent: c,\n        dataProviderName: D,\n        meta: {\n            ...i,\n            dataProviderName: l\n        }\n    });\n    let L = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: g().data(D).resource(T ?? \"\").action(\"one\").id(t ?? \"\").params({\n            ...h || {}\n        }).get(C),\n        queryFn: (w)=>k({\n                resource: (d == null ? void 0 : d.name) ?? \"\",\n                id: t,\n                meta: {\n                    ...E,\n                    queryContext: je(w)\n                },\n                metaData: {\n                    ...E,\n                    queryContext: je(w)\n                }\n            }),\n        ...r,\n        enabled: typeof (r == null ? void 0 : r.enabled) < \"u\" ? r == null ? void 0 : r.enabled : typeof t < \"u\",\n        onSuccess: (w)=>{\n            var b;\n            (b = r == null ? void 0 : r.onSuccess) == null || b.call(r, w);\n            let N = typeof s == \"function\" ? s(w, {\n                id: t,\n                ...E\n            }, T) : s;\n            M(N);\n        },\n        onError: (w)=>{\n            var b;\n            P(w), (b = r == null ? void 0 : r.onError) == null || b.call(r, w);\n            let N = typeof n == \"function\" ? n(w, {\n                id: t,\n                ...E\n            }, T) : n;\n            M(N, {\n                key: `${t}-${T}-getOne-notification`,\n                message: v(\"notifications.error\", {\n                    statusCode: w.statusCode\n                }, `Error (status code: ${w.statusCode})`),\n                description: w.message,\n                type: \"error\"\n            });\n        },\n        meta: {\n            ...r == null ? void 0 : r.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useOne\", C, d == null ? void 0 : d.name)\n        }\n    }), { elapsedTime: U } = fe({\n        ...m,\n        isLoading: L.isFetching\n    });\n    return {\n        ...L,\n        overtime: {\n            elapsedTime: U\n        }\n    };\n}, \"useOne\");\n\n\n\nvar go = o(({ resource: e, ids: t, queryOptions: r, successNotification: s, errorNotification: n, meta: i, metaData: a, liveMode: u, onLiveEvent: c, liveParams: p, dataProviderName: l, overtimeOptions: m })=>{\n    let { resources: y, resource: d, identifier: T } = q(e), x = le(), v = z(), f = ie(), { mutate: P } = Re({\n        v3LegacyAuthProviderCompatible: !!(f != null && f.isLegacy)\n    }), M = Ce(), Q = ue(), { keys: g, preferLegacyKeys: C } = Z(), h = I(i, a), D = ee(T, l, y), k = (r == null ? void 0 : r.enabled) === void 0 || (r == null ? void 0 : r.enabled) === !0, { getMany: E, getOne: L } = x(D), U = Q({\n        resource: d,\n        meta: h\n    }), w = Array.isArray(t), N = !!(d != null && d.name), b = (r == null ? void 0 : r.enabled) === !0;\n    warn_once__WEBPACK_IMPORTED_MODULE_1__(!w && !b, za(t, d == null ? void 0 : d.name)), warn_once__WEBPACK_IMPORTED_MODULE_1__(!N && !b, _a()), Pt({\n        resource: T,\n        types: [\n            \"*\"\n        ],\n        params: {\n            ids: t ?? [],\n            meta: U,\n            metaData: U,\n            subscriptionType: \"useMany\",\n            ...p\n        },\n        channel: `resources/${(d == null ? void 0 : d.name) ?? \"\"}`,\n        enabled: k,\n        liveMode: u,\n        onLiveEvent: c,\n        dataProviderName: D,\n        meta: {\n            ...i,\n            dataProviderName: l\n        }\n    });\n    let F = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: g().data(D).resource(T).action(\"many\").ids(...t ?? []).params({\n            ...h || {}\n        }).get(C),\n        queryFn: (G)=>{\n            let W = {\n                ...U,\n                queryContext: je(G)\n            };\n            return E ? E({\n                resource: d == null ? void 0 : d.name,\n                ids: t,\n                meta: W,\n                metaData: W\n            }) : lt(t.map((K)=>L({\n                    resource: d == null ? void 0 : d.name,\n                    id: K,\n                    meta: W,\n                    metaData: W\n                })));\n        },\n        enabled: w && N,\n        ...r,\n        onSuccess: (G)=>{\n            var K;\n            (K = r == null ? void 0 : r.onSuccess) == null || K.call(r, G);\n            let W = typeof s == \"function\" ? s(G, t, T) : s;\n            M(W);\n        },\n        onError: (G)=>{\n            var K;\n            P(G), (K = r == null ? void 0 : r.onError) == null || K.call(r, G);\n            let W = typeof n == \"function\" ? n(G, t, T) : n;\n            M(W, {\n                key: `${t[0]}-${T}-getMany-notification`,\n                message: v(\"notifications.error\", {\n                    statusCode: G.statusCode\n                }, `Error (status code: ${G.statusCode})`),\n                description: G.message,\n                type: \"error\"\n            });\n        },\n        meta: {\n            ...r == null ? void 0 : r.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useMany\", C, d == null ? void 0 : d.name)\n        }\n    }), { elapsedTime: V } = fe({\n        ...m,\n        isLoading: F.isFetching\n    });\n    return {\n        ...F,\n        overtime: {\n            elapsedTime: V\n        }\n    };\n}, \"useMany\"), za = o((e, t)=>`[useMany]: Missing \"ids\" prop. Expected an array of ids, but got \"${typeof e}\". Resource: \"${t}\"\n\nSee https://refine.dev/docs/data/hooks/use-many/#ids-`, \"idsWarningMessage\"), _a = o(()=>`[useMany]: Missing \"resource\" prop. Expected a string, but got undefined.\n\nSee https://refine.dev/docs/data/hooks/use-many/#resource-`, \"resourceWarningMessage\");\n\n\nvar Os = ((s)=>(s.ADD = \"ADD\", s.REMOVE = \"REMOVE\", s.DECREASE_NOTIFICATION_SECOND = \"DECREASE_NOTIFICATION_SECOND\", s))(Os || {});\nvar To = o(({ id: e, resource: t, values: r, dataProviderName: s, successNotification: n, errorNotification: i, meta: a, metaData: u, mutationMode: c, undoableTimeout: p, onCancel: l, optimisticUpdateMap: m, invalidates: y, mutationOptions: d, overtimeOptions: T } = {})=>{\n    let { resources: x, select: v } = q(), f = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), P = le(), { mutationMode: M, undoableTimeout: Q } = _e(), g = z(), C = ie(), { mutate: h } = Re({\n        v3LegacyAuthProviderCompatible: !!(C != null && C.isLegacy)\n    }), D = Ye(), { log: k } = Je(), { notificationDispatch: E } = ut(), L = Ce(), U = Ae(), w = ue(), { options: { textTransformers: N } } = ge(), { keys: b, preferLegacyKeys: F } = Z(), V = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationFn: ({ id: R = e, values: S = r, resource: B = t, mutationMode: H = c, undoableTimeout: $ = p, onCancel: X = l, meta: ne = a, metaData: Y = u, dataProviderName: O = s })=>{\n            if (typeof R > \"u\") throw jt;\n            if (!S) throw Ir;\n            if (!B) throw _t;\n            let { resource: _, identifier: ae } = v(B), J = w({\n                resource: _,\n                meta: I(ne, Y)\n            }), we = H ?? M, ye = $ ?? Q;\n            return we !== \"undoable\" ? P(ee(ae, O, x)).update({\n                resource: _.name,\n                id: R,\n                variables: S,\n                meta: J,\n                metaData: J\n            }) : new Promise((Ne, se)=>{\n                let me = o(()=>{\n                    P(ee(ae, O, x)).update({\n                        resource: _.name,\n                        id: R,\n                        variables: S,\n                        meta: J,\n                        metaData: J\n                    }).then((ve)=>Ne(ve)).catch((ve)=>se(ve));\n                }, \"doMutation\"), ce = o(()=>{\n                    se({\n                        message: \"mutationCancelled\"\n                    });\n                }, \"cancelMutation\");\n                X && X(ce), E({\n                    type: \"ADD\",\n                    payload: {\n                        id: R,\n                        resource: ae,\n                        cancelMutation: ce,\n                        doMutation: me,\n                        seconds: ye,\n                        isSilent: !!X\n                    }\n                });\n            });\n        },\n        onMutate: async ({ resource: R = t, id: S = e, mutationMode: B = c, values: H = r, dataProviderName: $ = s, meta: X = a, metaData: ne = u, optimisticUpdateMap: Y = m ?? {\n            list: !0,\n            many: !0,\n            detail: !0\n        } })=>{\n            if (typeof S > \"u\") throw jt;\n            if (!H) throw Ir;\n            if (!R) throw _t;\n            let { identifier: O } = v(R), { gqlMutation: _, gqlQuery: ae, ...J } = I(X, ne) ?? {}, we = dt(F)(O, ee(O, $, x), J), ye = b().data(ee(O, $, x)).resource(O), Ve = f.getQueriesData(ye.get(F)), Ne = B ?? M;\n            return await f.cancelQueries(ye.get(F), void 0, {\n                silent: !0\n            }), Ne !== \"pessimistic\" && (Y.list && f.setQueriesData(ye.action(\"list\").params(J ?? {}).get(F), (se)=>{\n                if (typeof Y.list == \"function\") return Y.list(se, H, S);\n                if (!se) return null;\n                let me = se.data.map((ce)=>{\n                    var ve;\n                    return ((ve = ce.id) == null ? void 0 : ve.toString()) === (S == null ? void 0 : S.toString()) ? {\n                        id: S,\n                        ...ce,\n                        ...H\n                    } : ce;\n                });\n                return {\n                    ...se,\n                    data: me\n                };\n            }), Y.many && f.setQueriesData(ye.action(\"many\").get(F), (se)=>{\n                if (typeof Y.many == \"function\") return Y.many(se, H, S);\n                if (!se) return null;\n                let me = se.data.map((ce)=>{\n                    var ve;\n                    return ((ve = ce.id) == null ? void 0 : ve.toString()) === (S == null ? void 0 : S.toString()) && (ce = {\n                        id: S,\n                        ...ce,\n                        ...H\n                    }), ce;\n                });\n                return {\n                    ...se,\n                    data: me\n                };\n            }), Y.detail && f.setQueriesData(ye.action(\"one\").id(S).params(J ?? {}).get(F), (se)=>typeof Y.detail == \"function\" ? Y.detail(se, H, S) : se ? {\n                    ...se,\n                    data: {\n                        ...se.data,\n                        ...H\n                    }\n                } : null)), {\n                previousQueries: Ve,\n                queryKey: we\n            };\n        },\n        onSettled: (R, S, B, H)=>{\n            var _;\n            let { id: $ = e, resource: X = t, dataProviderName: ne = s, invalidates: Y = y ?? [\n                \"list\",\n                \"many\",\n                \"detail\"\n            ] } = B;\n            if (typeof $ > \"u\") throw jt;\n            if (!X) throw _t;\n            let { identifier: O } = v(X);\n            U({\n                resource: O,\n                dataProviderName: ee(O, ne, x),\n                invalidates: Y,\n                id: $\n            }), E({\n                type: \"REMOVE\",\n                payload: {\n                    id: $,\n                    resource: O\n                }\n            }), (_ = d == null ? void 0 : d.onSettled) == null || _.call(d, R, S, B, H);\n        },\n        onSuccess: (R, S, B)=>{\n            var Ke, Ct;\n            let { id: H = e, resource: $ = t, successNotification: X = n, dataProviderName: ne = s, values: Y = r, meta: O = a, metaData: _ = u } = S;\n            if (typeof H > \"u\") throw jt;\n            if (!Y) throw Ir;\n            if (!$) throw _t;\n            let { resource: ae, identifier: J } = v($), we = N.singular(J), ye = ee(J, ne, x), Ve = w({\n                resource: ae,\n                meta: I(O, _)\n            }), Ne = typeof X == \"function\" ? X(R, {\n                id: H,\n                values: Y\n            }, J) : X;\n            L(Ne, {\n                key: `${H}-${J}-notification`,\n                description: g(\"notifications.success\", \"Successful\"),\n                message: g(\"notifications.editSuccess\", {\n                    resource: g(`${J}.${J}`, we)\n                }, `Successfully updated ${we}`),\n                type: \"success\"\n            }), D == null || D({\n                channel: `resources/${ae.name}`,\n                type: \"updated\",\n                payload: {\n                    ids: (Ke = R.data) != null && Ke.id ? [\n                        R.data.id\n                    ] : void 0\n                },\n                date: new Date,\n                meta: {\n                    ...Ve,\n                    dataProviderName: ye\n                }\n            });\n            let se;\n            if (B) {\n                let Ge = f.getQueryData(B.queryKey.detail(H));\n                se = Object.keys(Y || {}).reduce((Tt, xt)=>{\n                    var bt;\n                    return Tt[xt] = (bt = Ge == null ? void 0 : Ge.data) == null ? void 0 : bt[xt], Tt;\n                }, {});\n            }\n            let { fields: me, operation: ce, variables: ve, ...rt } = Ve || {};\n            k == null || k.mutate({\n                action: \"update\",\n                resource: ae.name,\n                data: Y,\n                previousData: se,\n                meta: {\n                    id: H,\n                    dataProviderName: ye,\n                    ...rt\n                }\n            }), (Ct = d == null ? void 0 : d.onSuccess) == null || Ct.call(d, R, S, B);\n        },\n        onError: (R, S, B)=>{\n            var O;\n            let { id: H = e, resource: $ = t, errorNotification: X = i, values: ne = r } = S;\n            if (typeof H > \"u\") throw jt;\n            if (!ne) throw Ir;\n            if (!$) throw _t;\n            let { identifier: Y } = v($);\n            if (B) for (let _ of B.previousQueries)f.setQueryData(_[0], _[1]);\n            if (R.message !== \"mutationCancelled\") {\n                h == null || h(R);\n                let _ = N.singular(Y), ae = typeof X == \"function\" ? X(R, {\n                    id: H,\n                    values: ne\n                }, Y) : X;\n                L(ae, {\n                    key: `${H}-${Y}-notification`,\n                    message: g(\"notifications.editError\", {\n                        resource: g(`${Y}.${Y}`, _),\n                        statusCode: R.statusCode\n                    }, `Error when updating ${_} (status code: ${R.statusCode})`),\n                    description: R.message,\n                    type: \"error\"\n                });\n            }\n            (O = d == null ? void 0 : d.onError) == null || O.call(d, R, S, B);\n        },\n        mutationKey: b().data().mutation(\"update\").get(F),\n        ...d,\n        meta: {\n            ...d == null ? void 0 : d.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useUpdate\", F)\n        }\n    }), { mutate: G, mutateAsync: W, ...K } = V, { elapsedTime: j } = fe({\n        ...T,\n        isLoading: K.isLoading\n    });\n    return {\n        ...K,\n        mutate: o((R, S)=>G(R || {}, S), \"handleMutation\"),\n        mutateAsync: o((R, S)=>W(R || {}, S), \"handleMutateAsync\"),\n        overtime: {\n            elapsedTime: j\n        }\n    };\n}, \"useUpdate\"), _t = new Error(\"[useUpdate]: `resource` is not defined or not matched but is required\"), jt = new Error(\"[useUpdate]: `id` is not defined but is required in edit and clone actions\"), Ir = new Error(\"[useUpdate]: `values` is not provided but is required\");\n\n\nvar Xt = o(({ resource: e, values: t, dataProviderName: r, successNotification: s, errorNotification: n, invalidates: i, meta: a, metaData: u, mutationOptions: c, overtimeOptions: p } = {})=>{\n    let l = ie(), { mutate: m } = Re({\n        v3LegacyAuthProviderCompatible: !!(l != null && l.isLegacy)\n    }), y = le(), d = Ae(), { resources: T, select: x } = q(), v = z(), f = Ye(), { log: P } = Je(), M = Ce(), Q = ue(), { options: { textTransformers: g } } = ge(), { keys: C, preferLegacyKeys: h } = Z(), D = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationFn: ({ resource: b = e, values: F = t, meta: V = a, metaData: G = u, dataProviderName: W = r })=>{\n            if (!F) throw ho;\n            if (!b) throw xo;\n            let { resource: K, identifier: j } = x(b), re = Q({\n                resource: K,\n                meta: I(V, G)\n            });\n            return y(ee(j, W, T)).create({\n                resource: K.name,\n                variables: F,\n                meta: re,\n                metaData: re\n            });\n        },\n        onSuccess: (b, F, V)=>{\n            var J, we, ye;\n            let { resource: G = e, successNotification: W = s, dataProviderName: K = r, invalidates: j = i ?? [\n                \"list\",\n                \"many\"\n            ], values: re = t, meta: te = a, metaData: R = u } = F;\n            if (!re) throw ho;\n            if (!G) throw xo;\n            let { resource: S, identifier: B } = x(G), H = g.singular(B), $ = ee(B, K, T), X = Q({\n                resource: S,\n                meta: I(te, R)\n            }), ne = typeof W == \"function\" ? W(b, re, B) : W;\n            M(ne, {\n                key: `create-${B}-notification`,\n                message: v(\"notifications.createSuccess\", {\n                    resource: v(`${B}.${B}`, H)\n                }, `Successfully created ${H}`),\n                description: v(\"notifications.success\", \"Success\"),\n                type: \"success\"\n            }), d({\n                resource: B,\n                dataProviderName: $,\n                invalidates: j\n            }), f == null || f({\n                channel: `resources/${S.name}`,\n                type: \"created\",\n                payload: {\n                    ids: (J = b == null ? void 0 : b.data) != null && J.id ? [\n                        b.data.id\n                    ] : void 0\n                },\n                date: new Date,\n                meta: {\n                    ...X,\n                    dataProviderName: $\n                }\n            });\n            let { fields: Y, operation: O, variables: _, ...ae } = X || {};\n            P == null || P.mutate({\n                action: \"create\",\n                resource: S.name,\n                data: re,\n                meta: {\n                    dataProviderName: $,\n                    id: ((we = b == null ? void 0 : b.data) == null ? void 0 : we.id) ?? void 0,\n                    ...ae\n                }\n            }), (ye = c == null ? void 0 : c.onSuccess) == null || ye.call(c, b, F, V);\n        },\n        onError: (b, F, V)=>{\n            var R;\n            let { resource: G = e, errorNotification: W = n, values: K = t } = F;\n            if (!K) throw ho;\n            if (!G) throw xo;\n            m(b);\n            let { identifier: j } = x(G), re = g.singular(j), te = typeof W == \"function\" ? W(b, K, j) : W;\n            M(te, {\n                key: `create-${j}-notification`,\n                description: b.message,\n                message: v(\"notifications.createError\", {\n                    resource: v(`${j}.${j}`, re),\n                    statusCode: b.statusCode\n                }, `There was an error creating ${re} (status code: ${b.statusCode})`),\n                type: \"error\"\n            }), (R = c == null ? void 0 : c.onError) == null || R.call(c, b, F, V);\n        },\n        mutationKey: C().data().mutation(\"create\").get(h),\n        ...c,\n        meta: {\n            ...c == null ? void 0 : c.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useCreate\", h)\n        }\n    }), { mutate: k, mutateAsync: E, ...L } = D, { elapsedTime: U } = fe({\n        ...p,\n        isLoading: L.isLoading\n    });\n    return {\n        ...L,\n        mutate: o((b, F)=>k(b || {}, F), \"handleMutation\"),\n        mutateAsync: o((b, F)=>E(b || {}, F), \"handleMutateAsync\"),\n        overtime: {\n            elapsedTime: U\n        }\n    };\n}, \"useCreate\"), xo = new Error(\"[useCreate]: `resource` is not defined or not matched but is required\"), ho = new Error(\"[useCreate]: `values` is not provided but is required\");\n\n\nvar Po = o(({ mutationOptions: e, overtimeOptions: t } = {})=>{\n    let r = ie(), { mutate: s } = Re({\n        v3LegacyAuthProviderCompatible: !!(r != null && r.isLegacy)\n    }), n = le(), { resources: i, select: a } = q(), u = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), { mutationMode: c, undoableTimeout: p } = _e(), { notificationDispatch: l } = ut(), m = z(), y = Ye(), { log: d } = Je(), T = Ce(), x = Ae(), v = ue(), { options: { textTransformers: f } } = ge(), { keys: P, preferLegacyKeys: M } = Z(), Q = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationFn: ({ id: C, mutationMode: h, undoableTimeout: D, resource: k, onCancel: E, meta: L, metaData: U, dataProviderName: w, values: N })=>{\n            let { resource: b, identifier: F } = a(k), V = v({\n                resource: b,\n                meta: I(L, U)\n            }), G = h ?? c, W = D ?? p;\n            return G !== \"undoable\" ? n(ee(F, w, i)).deleteOne({\n                resource: b.name,\n                id: C,\n                meta: V,\n                metaData: V,\n                variables: N\n            }) : new Promise((j, re)=>{\n                let te = o(()=>{\n                    n(ee(F, w, i)).deleteOne({\n                        resource: b.name,\n                        id: C,\n                        meta: V,\n                        metaData: V,\n                        variables: N\n                    }).then((S)=>j(S)).catch((S)=>re(S));\n                }, \"doMutation\"), R = o(()=>{\n                    re({\n                        message: \"mutationCancelled\"\n                    });\n                }, \"cancelMutation\");\n                E && E(R), l({\n                    type: \"ADD\",\n                    payload: {\n                        id: C,\n                        resource: F,\n                        cancelMutation: R,\n                        doMutation: te,\n                        seconds: W,\n                        isSilent: !!E\n                    }\n                });\n            });\n        },\n        onMutate: async ({ id: C, resource: h, mutationMode: D, dataProviderName: k, meta: E, metaData: L })=>{\n            let { identifier: U } = a(h), { gqlMutation: w, gqlQuery: N, ...b } = I(E, L) ?? {}, F = dt(M)(U, ee(U, k, i), b), V = P().data(ee(U, k, i)).resource(U), G = D ?? c;\n            await u.cancelQueries(V.get(M), void 0, {\n                silent: !0\n            });\n            let W = u.getQueriesData(V.get(M));\n            return G !== \"pessimistic\" && (u.setQueriesData(V.action(\"list\").params(b ?? {}).get(M), (K)=>K ? {\n                    data: K.data.filter((re)=>{\n                        var te;\n                        return ((te = re.id) == null ? void 0 : te.toString()) !== C.toString();\n                    }),\n                    total: K.total - 1\n                } : null), u.setQueriesData(V.action(\"many\").get(M), (K)=>{\n                if (!K) return null;\n                let j = K.data.filter((re)=>{\n                    var te;\n                    return ((te = re.id) == null ? void 0 : te.toString()) !== (C == null ? void 0 : C.toString());\n                });\n                return {\n                    ...K,\n                    data: j\n                };\n            })), {\n                previousQueries: W,\n                queryKey: F\n            };\n        },\n        onSettled: (C, h, { id: D, resource: k, dataProviderName: E, invalidates: L = [\n            \"list\",\n            \"many\"\n        ] })=>{\n            let { identifier: U } = a(k);\n            x({\n                resource: U,\n                dataProviderName: ee(U, E, i),\n                invalidates: L\n            }), l({\n                type: \"REMOVE\",\n                payload: {\n                    id: D,\n                    resource: U\n                }\n            });\n        },\n        onSuccess: (C, { id: h, resource: D, successNotification: k, dataProviderName: E, meta: L, metaData: U }, w)=>{\n            let { resource: N, identifier: b } = a(D), F = f.singular(b), V = ee(b, E, i), G = v({\n                resource: N,\n                meta: I(L, U)\n            });\n            u.removeQueries(w == null ? void 0 : w.queryKey.detail(h));\n            let W = typeof k == \"function\" ? k(C, h, b) : k;\n            T(W, {\n                key: `${h}-${b}-notification`,\n                description: m(\"notifications.success\", \"Success\"),\n                message: m(\"notifications.deleteSuccess\", {\n                    resource: m(`${b}.${b}`, F)\n                }, `Successfully deleted a ${F}`),\n                type: \"success\"\n            }), y == null || y({\n                channel: `resources/${N.name}`,\n                type: \"deleted\",\n                payload: {\n                    ids: [\n                        h\n                    ]\n                },\n                date: new Date,\n                meta: {\n                    ...G,\n                    dataProviderName: V\n                }\n            });\n            let { fields: K, operation: j, variables: re, ...te } = G || {};\n            d == null || d.mutate({\n                action: \"delete\",\n                resource: N.name,\n                meta: {\n                    id: h,\n                    dataProviderName: V,\n                    ...te\n                }\n            }), u.removeQueries(w == null ? void 0 : w.queryKey.detail(h));\n        },\n        onError: (C, { id: h, resource: D, errorNotification: k }, E)=>{\n            let { identifier: L } = a(D);\n            if (E) for (let U of E.previousQueries)u.setQueryData(U[0], U[1]);\n            if (C.message !== \"mutationCancelled\") {\n                s(C);\n                let U = f.singular(L), w = typeof k == \"function\" ? k(C, h, L) : k;\n                T(w, {\n                    key: `${h}-${L}-notification`,\n                    message: m(\"notifications.deleteError\", {\n                        resource: U,\n                        statusCode: C.statusCode\n                    }, `Error (status code: ${C.statusCode})`),\n                    description: C.message,\n                    type: \"error\"\n                });\n            }\n        },\n        mutationKey: P().data().mutation(\"delete\").get(M),\n        ...e,\n        meta: {\n            ...e == null ? void 0 : e.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useDelete\", M)\n        }\n    }), { elapsedTime: g } = fe({\n        ...t,\n        isLoading: Q.isLoading\n    });\n    return {\n        ...Q,\n        overtime: {\n            elapsedTime: g\n        }\n    };\n}, \"useDelete\");\n\n\nvar bo = o(({ resource: e, values: t, dataProviderName: r, successNotification: s, errorNotification: n, meta: i, metaData: a, invalidates: u, mutationOptions: c, overtimeOptions: p } = {})=>{\n    let l = le(), { resources: m, select: y } = q(), d = z(), T = Ye(), x = Ce(), v = Ae(), { log: f } = Je(), P = ue(), { options: { textTransformers: M } } = ge(), { keys: Q, preferLegacyKeys: g } = Z(), C = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationFn: ({ resource: w = e, values: N = t, meta: b = i, metaData: F = a, dataProviderName: V = r })=>{\n            if (!N) throw Co;\n            if (!w) throw Ro;\n            let { resource: G, identifier: W } = y(w), K = P({\n                resource: G,\n                meta: I(b, F)\n            }), j = l(ee(W, V, m));\n            return j.createMany ? j.createMany({\n                resource: G.name,\n                variables: N,\n                meta: K,\n                metaData: K\n            }) : lt(N.map((re)=>j.create({\n                    resource: G.name,\n                    variables: re,\n                    meta: K,\n                    metaData: K\n                })));\n        },\n        onSuccess: (w, N, b)=>{\n            var ae;\n            let { resource: F = e, successNotification: V = s, dataProviderName: G = r, invalidates: W = u ?? [\n                \"list\",\n                \"many\"\n            ], values: K = t, meta: j = i, metaData: re = a } = N;\n            if (!K) throw Co;\n            if (!F) throw Ro;\n            let { resource: te, identifier: R } = y(F), S = M.plural(R), B = ee(R, G, m), H = P({\n                resource: te,\n                meta: I(j, re)\n            }), $ = typeof V == \"function\" ? V(w, K, R) : V;\n            x($, {\n                key: `createMany-${R}-notification`,\n                message: d(\"notifications.createSuccess\", {\n                    resource: d(`${R}.${R}`, R)\n                }, `Successfully created ${S}`),\n                description: d(\"notifications.success\", \"Success\"),\n                type: \"success\"\n            }), v({\n                resource: R,\n                dataProviderName: B,\n                invalidates: W\n            });\n            let X = w == null ? void 0 : w.data.filter((J)=>(J == null ? void 0 : J.id) !== void 0).map((J)=>J.id);\n            T == null || T({\n                channel: `resources/${te.name}`,\n                type: \"created\",\n                payload: {\n                    ids: X\n                },\n                date: new Date,\n                meta: {\n                    ...H,\n                    dataProviderName: B\n                }\n            });\n            let { fields: ne, operation: Y, variables: O, ..._ } = H || {};\n            f == null || f.mutate({\n                action: \"createMany\",\n                resource: te.name,\n                data: K,\n                meta: {\n                    dataProviderName: B,\n                    ids: X,\n                    ..._\n                }\n            }), (ae = c == null ? void 0 : c.onSuccess) == null || ae.call(c, w, N, b);\n        },\n        onError: (w, N, b)=>{\n            var j;\n            let { resource: F = e, errorNotification: V = n, values: G = t } = N;\n            if (!G) throw Co;\n            if (!F) throw Ro;\n            let { identifier: W } = y(F), K = typeof V == \"function\" ? V(w, G, W) : V;\n            x(K, {\n                key: `createMany-${W}-notification`,\n                description: w.message,\n                message: d(\"notifications.createError\", {\n                    resource: d(`${W}.${W}`, W),\n                    statusCode: w.statusCode\n                }, `There was an error creating ${W} (status code: ${w.statusCode}`),\n                type: \"error\"\n            }), (j = c == null ? void 0 : c.onError) == null || j.call(c, w, N, b);\n        },\n        mutationKey: Q().data().mutation(\"createMany\").get(g),\n        ...c,\n        meta: {\n            ...c == null ? void 0 : c.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useCreateMany\", g)\n        }\n    }), { mutate: h, mutateAsync: D, ...k } = C, { elapsedTime: E } = fe({\n        ...p,\n        isLoading: k.isLoading\n    });\n    return {\n        ...k,\n        mutate: o((w, N)=>h(w || {}, N), \"handleMutation\"),\n        mutateAsync: o((w, N)=>D(w || {}, N), \"handleMutateAsync\"),\n        overtime: {\n            elapsedTime: E\n        }\n    };\n}, \"useCreateMany\"), Ro = new Error(\"[useCreateMany]: `resource` is not defined or not matched but is required\"), Co = new Error(\"[useCreateMany]: `values` is not provided but is required\");\n\n\nvar ii = o(({ ids: e, resource: t, values: r, dataProviderName: s, successNotification: n, errorNotification: i, meta: a, metaData: u, mutationMode: c, undoableTimeout: p, onCancel: l, optimisticUpdateMap: m, invalidates: y, mutationOptions: d, overtimeOptions: T } = {})=>{\n    let { resources: x, select: v } = q(), f = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), P = le(), M = z(), { mutationMode: Q, undoableTimeout: g } = _e(), C = ie(), { mutate: h } = Re({\n        v3LegacyAuthProviderCompatible: !!(C != null && C.isLegacy)\n    }), { notificationDispatch: D } = ut(), k = Ye(), E = Ce(), L = Ae(), { log: U } = Je(), w = ue(), { options: { textTransformers: N } } = ge(), { keys: b, preferLegacyKeys: F } = Z(), V = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationFn: ({ ids: R = e, values: S = r, resource: B = t, onCancel: H = l, mutationMode: $ = c, undoableTimeout: X = p, meta: ne = a, metaData: Y = u, dataProviderName: O = s })=>{\n            if (!R) throw Yt;\n            if (!S) throw Sr;\n            if (!B) throw Zt;\n            let { resource: _, identifier: ae } = v(B), J = w({\n                resource: _,\n                meta: I(ne, Y)\n            }), we = $ ?? Q, ye = X ?? g, Ve = P(ee(ae, O, x)), Ne = o(()=>Ve.updateMany ? Ve.updateMany({\n                    resource: _.name,\n                    ids: R,\n                    variables: S,\n                    meta: J,\n                    metaData: J\n                }) : lt(R.map((me)=>Ve.update({\n                        resource: _.name,\n                        id: me,\n                        variables: S,\n                        meta: J,\n                        metaData: J\n                    }))), \"mutationFn\");\n            return we !== \"undoable\" ? Ne() : new Promise((me, ce)=>{\n                let ve = o(()=>{\n                    Ne().then((Ke)=>me(Ke)).catch((Ke)=>ce(Ke));\n                }, \"doMutation\"), rt = o(()=>{\n                    ce({\n                        message: \"mutationCancelled\"\n                    });\n                }, \"cancelMutation\");\n                H && H(rt), D({\n                    type: \"ADD\",\n                    payload: {\n                        id: R,\n                        resource: ae,\n                        cancelMutation: rt,\n                        doMutation: ve,\n                        seconds: ye,\n                        isSilent: !!H\n                    }\n                });\n            });\n        },\n        onMutate: async ({ resource: R = t, ids: S = e, values: B = r, mutationMode: H = c, dataProviderName: $ = s, meta: X = a, metaData: ne = u, optimisticUpdateMap: Y = m ?? {\n            list: !0,\n            many: !0,\n            detail: !0\n        } })=>{\n            if (!S) throw Yt;\n            if (!B) throw Sr;\n            if (!R) throw Zt;\n            let { identifier: O } = v(R), { gqlMutation: _, gqlQuery: ae, ...J } = I(X, ne) ?? {}, we = dt(F)(O, ee(O, $, x), J), ye = b().data(ee(O, $, x)).resource(O), Ve = H ?? Q;\n            await f.cancelQueries(ye.get(F), void 0, {\n                silent: !0\n            });\n            let Ne = f.getQueriesData(ye.get(F));\n            if (Ve !== \"pessimistic\" && (Y.list && f.setQueriesData(ye.action(\"list\").params(J ?? {}).get(F), (se)=>{\n                if (typeof Y.list == \"function\") return Y.list(se, B, S);\n                if (!se) return null;\n                let me = se.data.map((ce)=>ce.id !== void 0 && S.filter((ve)=>ve !== void 0).map(String).includes(ce.id.toString()) ? {\n                        ...ce,\n                        ...B\n                    } : ce);\n                return {\n                    ...se,\n                    data: me\n                };\n            }), Y.many && f.setQueriesData(ye.action(\"many\").get(F), (se)=>{\n                if (typeof Y.many == \"function\") return Y.many(se, B, S);\n                if (!se) return null;\n                let me = se.data.map((ce)=>ce.id !== void 0 && S.filter((ve)=>ve !== void 0).map(String).includes(ce.id.toString()) ? {\n                        ...ce,\n                        ...B\n                    } : ce);\n                return {\n                    ...se,\n                    data: me\n                };\n            }), Y.detail)) for (let se of S)f.setQueriesData(ye.action(\"one\").id(se).params(J ?? {}).get(F), (me)=>{\n                if (typeof Y.detail == \"function\") return Y.detail(me, B, se);\n                if (!me) return null;\n                let ce = {\n                    ...me.data,\n                    ...B\n                };\n                return {\n                    ...me,\n                    data: ce\n                };\n            });\n            return {\n                previousQueries: Ne,\n                queryKey: we\n            };\n        },\n        onSettled: (R, S, B, H)=>{\n            var _;\n            let { ids: $ = e, resource: X = t, dataProviderName: ne = s, invalidates: Y = y } = B;\n            if (!$) throw Yt;\n            if (!X) throw Zt;\n            let { identifier: O } = v(X);\n            L({\n                resource: O,\n                invalidates: Y ?? [\n                    \"list\",\n                    \"many\"\n                ],\n                dataProviderName: ee(O, ne, x)\n            }), $.forEach((ae)=>L({\n                    resource: O,\n                    invalidates: Y ?? [\n                        \"detail\"\n                    ],\n                    dataProviderName: ee(O, ne, x),\n                    id: ae\n                })), D({\n                type: \"REMOVE\",\n                payload: {\n                    id: $,\n                    resource: O\n                }\n            }), (_ = d == null ? void 0 : d.onSettled) == null || _.call(d, R, S, B, H);\n        },\n        onSuccess: (R, S, B)=>{\n            var Ke;\n            let { ids: H = e, resource: $ = t, values: X = r, meta: ne = a, metaData: Y = u, dataProviderName: O = s, successNotification: _ = n } = S;\n            if (!H) throw Yt;\n            if (!X) throw Sr;\n            if (!$) throw Zt;\n            let { resource: ae, identifier: J } = v($), we = N.singular(J), ye = ee(J, O, x), Ve = w({\n                resource: ae,\n                meta: I(ne, Y)\n            }), Ne = typeof _ == \"function\" ? _(R, {\n                ids: H,\n                values: X\n            }, J) : _;\n            E(Ne, {\n                key: `${H}-${J}-notification`,\n                description: M(\"notifications.success\", \"Successful\"),\n                message: M(\"notifications.editSuccess\", {\n                    resource: M(`${J}.${J}`, J)\n                }, `Successfully updated ${we}`),\n                type: \"success\"\n            }), k == null || k({\n                channel: `resources/${ae.name}`,\n                type: \"updated\",\n                payload: {\n                    ids: H.map(String)\n                },\n                date: new Date,\n                meta: {\n                    ...Ve,\n                    dataProviderName: ye\n                }\n            });\n            let se = [];\n            B && H.forEach((Ct)=>{\n                let Ge = f.getQueryData(B.queryKey.detail(Ct));\n                se.push(Object.keys(X || {}).reduce((Tt, xt)=>{\n                    var bt;\n                    return Tt[xt] = (bt = Ge == null ? void 0 : Ge.data) == null ? void 0 : bt[xt], Tt;\n                }, {}));\n            });\n            let { fields: me, operation: ce, variables: ve, ...rt } = Ve || {};\n            U == null || U.mutate({\n                action: \"updateMany\",\n                resource: ae.name,\n                data: X,\n                previousData: se,\n                meta: {\n                    ids: H,\n                    dataProviderName: ye,\n                    ...rt\n                }\n            }), (Ke = d == null ? void 0 : d.onSuccess) == null || Ke.call(d, R, S, B);\n        },\n        onError: (R, S, B)=>{\n            var O;\n            let { ids: H = e, resource: $ = t, errorNotification: X = i, values: ne = r } = S;\n            if (!H) throw Yt;\n            if (!ne) throw Sr;\n            if (!$) throw Zt;\n            let { identifier: Y } = v($);\n            if (B) for (let _ of B.previousQueries)f.setQueryData(_[0], _[1]);\n            if (R.message !== \"mutationCancelled\") {\n                h == null || h(R);\n                let _ = N.singular(Y), ae = typeof X == \"function\" ? X(R, {\n                    ids: H,\n                    values: ne\n                }, Y) : X;\n                E(ae, {\n                    key: `${H}-${Y}-updateMany-error-notification`,\n                    message: M(\"notifications.editError\", {\n                        resource: _,\n                        statusCode: R.statusCode\n                    }, `Error when updating ${_} (status code: ${R.statusCode})`),\n                    description: R.message,\n                    type: \"error\"\n                });\n            }\n            (O = d == null ? void 0 : d.onError) == null || O.call(d, R, S, B);\n        },\n        mutationKey: b().data().mutation(\"updateMany\").get(F),\n        ...d,\n        meta: {\n            ...d == null ? void 0 : d.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useUpdateMany\", F)\n        }\n    }), { mutate: G, mutateAsync: W, ...K } = V, { elapsedTime: j } = fe({\n        ...T,\n        isLoading: K.isLoading\n    });\n    return {\n        ...K,\n        mutate: o((R, S)=>G(R || {}, S), \"handleMutation\"),\n        mutateAsync: o((R, S)=>W(R || {}, S), \"handleMutateAsync\"),\n        overtime: {\n            elapsedTime: j\n        }\n    };\n}, \"useUpdateMany\"), Zt = new Error(\"[useUpdateMany]: `resource` is not defined or not matched but is required\"), Yt = new Error(\"[useUpdateMany]: `id` is not defined but is required in edit and clone actions\"), Sr = new Error(\"[useUpdateMany]: `values` is not provided but is required\");\n\n\nvar di = o(({ mutationOptions: e, overtimeOptions: t } = {})=>{\n    let r = ie(), { mutate: s } = Re({\n        v3LegacyAuthProviderCompatible: !!(r != null && r.isLegacy)\n    }), { mutationMode: n, undoableTimeout: i } = _e(), a = le(), { notificationDispatch: u } = ut(), c = z(), p = Ye(), l = Ce(), m = Ae(), { log: y } = Je(), { resources: d, select: T } = q(), x = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), v = ue(), { options: { textTransformers: f } } = ge(), { keys: P, preferLegacyKeys: M } = Z(), Q = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationFn: ({ resource: C, ids: h, mutationMode: D, undoableTimeout: k, onCancel: E, meta: L, metaData: U, dataProviderName: w, values: N })=>{\n            let { resource: b, identifier: F } = T(C), V = v({\n                resource: b,\n                meta: I(L, U)\n            }), G = D ?? n, W = k ?? i, K = a(ee(F, w, d)), j = o(()=>K.deleteMany ? K.deleteMany({\n                    resource: b.name,\n                    ids: h,\n                    meta: V,\n                    metaData: V,\n                    variables: N\n                }) : lt(h.map((te)=>K.deleteOne({\n                        resource: b.name,\n                        id: te,\n                        meta: V,\n                        metaData: V,\n                        variables: N\n                    }))), \"mutationFn\");\n            return G !== \"undoable\" ? j() : new Promise((te, R)=>{\n                let S = o(()=>{\n                    j().then((H)=>te(H)).catch((H)=>R(H));\n                }, \"doMutation\"), B = o(()=>{\n                    R({\n                        message: \"mutationCancelled\"\n                    });\n                }, \"cancelMutation\");\n                E && E(B), u({\n                    type: \"ADD\",\n                    payload: {\n                        id: h,\n                        resource: F,\n                        cancelMutation: B,\n                        doMutation: S,\n                        seconds: W,\n                        isSilent: !!E\n                    }\n                });\n            });\n        },\n        onMutate: async ({ ids: C, resource: h, mutationMode: D, dataProviderName: k, meta: E, metaData: L })=>{\n            let { identifier: U } = T(h), { gqlMutation: w, gqlQuery: N, ...b } = I(E, L) ?? {}, F = dt(M)(U, ee(U, k, d), b), V = P().data(ee(U, k, d)).resource(U), G = D ?? n;\n            await x.cancelQueries(V.get(M), void 0, {\n                silent: !0\n            });\n            let W = x.getQueriesData(V.get(M));\n            if (G !== \"pessimistic\") {\n                x.setQueriesData(V.action(\"list\").params(b ?? {}).get(M), (K)=>K ? {\n                        data: K.data.filter((re)=>re.id && !C.map(String).includes(re.id.toString())),\n                        total: K.total - 1\n                    } : null), x.setQueriesData(V.action(\"many\").get(M), (K)=>{\n                    if (!K) return null;\n                    let j = K.data.filter((re)=>re.id ? !C.map(String).includes(re.id.toString()) : !1);\n                    return {\n                        ...K,\n                        data: j\n                    };\n                });\n                for (let K of C)x.setQueriesData(V.action(\"one\").id(K).params(b).get(M), (j)=>!j || j.data.id === K ? null : {\n                        ...j\n                    });\n            }\n            return {\n                previousQueries: W,\n                queryKey: F\n            };\n        },\n        onSettled: (C, h, { resource: D, ids: k, dataProviderName: E, invalidates: L = [\n            \"list\",\n            \"many\"\n        ] })=>{\n            let { identifier: U } = T(D);\n            m({\n                resource: U,\n                dataProviderName: ee(U, E, d),\n                invalidates: L\n            }), u({\n                type: \"REMOVE\",\n                payload: {\n                    id: k,\n                    resource: U\n                }\n            });\n        },\n        onSuccess: (C, { ids: h, resource: D, meta: k, metaData: E, dataProviderName: L, successNotification: U }, w)=>{\n            let { resource: N, identifier: b } = T(D), F = ee(b, L, d), V = v({\n                resource: N,\n                meta: I(k, E)\n            });\n            h.forEach((te)=>x.removeQueries(w == null ? void 0 : w.queryKey.detail(te)));\n            let G = typeof U == \"function\" ? U(C, h, b) : U;\n            l(G, {\n                key: `${h}-${b}-notification`,\n                description: c(\"notifications.success\", \"Success\"),\n                message: c(\"notifications.deleteSuccess\", {\n                    resource: c(`${b}.${b}`, b)\n                }, `Successfully deleted ${b}`),\n                type: \"success\"\n            }), p == null || p({\n                channel: `resources/${N.name}`,\n                type: \"deleted\",\n                payload: {\n                    ids: h\n                },\n                date: new Date,\n                meta: {\n                    ...V,\n                    dataProviderName: F\n                }\n            });\n            let { fields: W, operation: K, variables: j, ...re } = V || {};\n            y == null || y.mutate({\n                action: \"deleteMany\",\n                resource: N.name,\n                meta: {\n                    ids: h,\n                    dataProviderName: F,\n                    ...re\n                }\n            }), h.forEach((te)=>x.removeQueries(w == null ? void 0 : w.queryKey.detail(te)));\n        },\n        onError: (C, { ids: h, resource: D, errorNotification: k }, E)=>{\n            let { identifier: L } = T(D);\n            if (E) for (let U of E.previousQueries)x.setQueryData(U[0], U[1]);\n            if (C.message !== \"mutationCancelled\") {\n                s(C);\n                let U = f.singular(L), w = typeof k == \"function\" ? k(C, h, L) : k;\n                l(w, {\n                    key: `${h}-${L}-notification`,\n                    message: c(\"notifications.deleteError\", {\n                        resource: U,\n                        statusCode: C.statusCode\n                    }, `Error (status code: ${C.statusCode})`),\n                    description: C.message,\n                    type: \"error\"\n                });\n            }\n        },\n        mutationKey: P().data().mutation(\"deleteMany\").get(M),\n        ...e,\n        meta: {\n            ...e == null ? void 0 : e.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useDeleteMany\", M)\n        }\n    }), { elapsedTime: g } = fe({\n        ...t,\n        isLoading: Q.isLoading\n    });\n    return {\n        ...Q,\n        overtime: {\n            elapsedTime: g\n        }\n    };\n}, \"useDeleteMany\");\nvar li = o((e)=>{\n    var n;\n    let t = le(), { resource: r } = q(), { getApiUrl: s } = t(e ?? ((n = I(r == null ? void 0 : r.meta, r == null ? void 0 : r.options)) == null ? void 0 : n.dataProviderName));\n    return s();\n}, \"useApiUrl\");\n\n\nvar yi = o(({ url: e, method: t, config: r, queryOptions: s, successNotification: n, errorNotification: i, meta: a, metaData: u, dataProviderName: c, overtimeOptions: p })=>{\n    let l = le(), m = ie(), { mutate: y } = Re({\n        v3LegacyAuthProviderCompatible: !!(m != null && m.isLegacy)\n    }), d = z(), T = Ce(), x = ue(), { keys: v, preferLegacyKeys: f } = Z(), P = I(a, u), { custom: M } = l(c), Q = x({\n        meta: P\n    });\n    if (M) {\n        let g = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n            queryKey: v().data(c).mutation(\"custom\").params({\n                method: t,\n                url: e,\n                ...r,\n                ...P || {}\n            }).get(f),\n            queryFn: (h)=>M({\n                    url: e,\n                    method: t,\n                    ...r,\n                    meta: {\n                        ...Q,\n                        queryContext: je(h)\n                    },\n                    metaData: {\n                        ...Q,\n                        queryContext: je(h)\n                    }\n                }),\n            ...s,\n            onSuccess: (h)=>{\n                var k;\n                (k = s == null ? void 0 : s.onSuccess) == null || k.call(s, h);\n                let D = typeof n == \"function\" ? n(h, {\n                    ...r,\n                    ...Q\n                }) : n;\n                T(D);\n            },\n            onError: (h)=>{\n                var k;\n                y(h), (k = s == null ? void 0 : s.onError) == null || k.call(s, h);\n                let D = typeof i == \"function\" ? i(h, {\n                    ...r,\n                    ...Q\n                }) : i;\n                T(D, {\n                    key: `${t}-notification`,\n                    message: d(\"notifications.error\", {\n                        statusCode: h.statusCode\n                    }, `Error (status code: ${h.statusCode})`),\n                    description: h.message,\n                    type: \"error\"\n                });\n            },\n            meta: {\n                ...s == null ? void 0 : s.meta,\n                ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useCustom\", f)\n            }\n        }), { elapsedTime: C } = fe({\n            ...p,\n            isLoading: g.isFetching\n        });\n        return {\n            ...g,\n            overtime: {\n                elapsedTime: C\n            }\n        };\n    }\n    throw Error(\"Not implemented custom on data provider.\");\n}, \"useCustom\");\n\n\nvar xi = o(({ mutationOptions: e, overtimeOptions: t } = {})=>{\n    let r = ie(), { mutate: s } = Re({\n        v3LegacyAuthProviderCompatible: !!(r != null && r.isLegacy)\n    }), n = Ce(), i = le(), a = z(), u = ue(), { keys: c, preferLegacyKeys: p } = Z(), l = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)(({ url: y, method: d, values: T, meta: x, metaData: v, dataProviderName: f, config: P })=>{\n        let M = u({\n            meta: I(x, v)\n        }), { custom: Q } = i(f);\n        if (Q) return Q({\n            url: y,\n            method: d,\n            payload: T,\n            meta: M,\n            metaData: M,\n            headers: {\n                ...P == null ? void 0 : P.headers\n            }\n        });\n        throw Error(\"Not implemented custom on data provider.\");\n    }, {\n        onSuccess: (y, { successNotification: d, config: T, meta: x, metaData: v })=>{\n            let f = typeof d == \"function\" ? d(y, {\n                ...T,\n                ...I(x, v) || {}\n            }) : d;\n            n(f);\n        },\n        onError: (y, { errorNotification: d, method: T, config: x, meta: v, metaData: f })=>{\n            s(y);\n            let P = typeof d == \"function\" ? d(y, {\n                ...x,\n                ...I(v, f) || {}\n            }) : d;\n            n(P, {\n                key: `${T}-notification`,\n                message: a(\"notifications.error\", {\n                    statusCode: y.statusCode\n                }, `Error (status code: ${y.statusCode})`),\n                description: y.message,\n                type: \"error\"\n            });\n        },\n        mutationKey: c().data().mutation(\"customMutation\").get(p),\n        ...e,\n        meta: {\n            ...e == null ? void 0 : e.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useCustomMutation\", p)\n        }\n    }), { elapsedTime: m } = fe({\n        ...t,\n        isLoading: l.isLoading\n    });\n    return {\n        ...l,\n        overtime: {\n            elapsedTime: m\n        }\n    };\n}, \"useCustomMutation\");\n\n\nvar Hs = {\n    default: {}\n}, Jt = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(Hs), $s = o(({ children: e, dataProvider: t })=>{\n    let r = Hs;\n    return t && (!(\"default\" in t) && (\"getList\" in t || \"getOne\" in t) ? r = {\n        default: t\n    } : r = t), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Jt.Provider, {\n        value: r\n    }, e);\n}, \"DataContextProvider\");\nvar le = o(()=>{\n    let e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Jt);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((r)=>{\n        if (r) {\n            let s = e == null ? void 0 : e[r];\n            if (!s) throw new Error(`\"${r}\" Data provider not found`);\n            if (s && !(e != null && e.default)) throw new Error(\"If you have multiple data providers, you must provide default data provider property\");\n            return e[r];\n        }\n        if (e.default) return e.default;\n        throw new Error('There is no \"default\" data provider. Please pass dataProviderName.');\n    }, [\n        e\n    ]);\n}, \"useDataProvider\");\n\n\nvar bi = o(({ resource: e, config: t, filters: r, hasPagination: s, pagination: n, sorters: i, queryOptions: a, successNotification: u, errorNotification: c, meta: p, metaData: l, liveMode: m, onLiveEvent: y, liveParams: d, dataProviderName: T, overtimeOptions: x })=>{\n    let { resources: v, resource: f, identifier: P } = q(e), M = le(), Q = z(), g = ie(), { mutate: C } = Re({\n        v3LegacyAuthProviderCompatible: !!(g != null && g.isLegacy)\n    }), h = Ce(), D = ue(), { keys: k, preferLegacyKeys: E } = Z(), L = ee(P, T, v), U = I(p, l), w = I(r, t == null ? void 0 : t.filters), N = I(i, t == null ? void 0 : t.sort), b = I(s, t == null ? void 0 : t.hasPagination), F = Wt({\n        pagination: n,\n        configPagination: t == null ? void 0 : t.pagination,\n        hasPagination: b\n    }), V = F.mode === \"server\", G = {\n        meta: U,\n        metaData: U,\n        filters: w,\n        hasPagination: V,\n        pagination: F,\n        sorters: N,\n        config: {\n            ...t,\n            sort: N\n        }\n    }, W = (a == null ? void 0 : a.enabled) === void 0 || (a == null ? void 0 : a.enabled) === !0, K = D({\n        resource: f,\n        meta: U\n    }), { getList: j } = M(L);\n    Pt({\n        resource: P,\n        types: [\n            \"*\"\n        ],\n        params: {\n            meta: K,\n            metaData: K,\n            pagination: F,\n            hasPagination: V,\n            sort: N,\n            sorters: N,\n            filters: w,\n            subscriptionType: \"useList\",\n            ...d\n        },\n        channel: `resources/${f.name}`,\n        enabled: W,\n        liveMode: m,\n        onLiveEvent: y,\n        dataProviderName: L,\n        meta: {\n            ...K,\n            dataProviderName: T\n        }\n    });\n    let re = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_13__.useInfiniteQuery)({\n        queryKey: k().data(L).resource(P).action(\"infinite\").params({\n            ...U || {},\n            filters: w,\n            hasPagination: V,\n            ...V && {\n                pagination: F\n            },\n            ...i && {\n                sorters: i\n            },\n            ...(t == null ? void 0 : t.sort) && {\n                sort: t == null ? void 0 : t.sort\n            }\n        }).get(E),\n        queryFn: (R)=>{\n            let S = {\n                ...F,\n                current: R.pageParam\n            }, B = {\n                ...K,\n                queryContext: je(R)\n            };\n            return j({\n                resource: f.name,\n                pagination: S,\n                hasPagination: V,\n                filters: w,\n                sort: N,\n                sorters: N,\n                meta: B,\n                metaData: B\n            }).then(({ data: H, total: $, ...X })=>({\n                    data: H,\n                    total: $,\n                    pagination: S,\n                    ...X\n                }));\n        },\n        getNextPageParam: (R)=>Tr(R),\n        getPreviousPageParam: (R)=>xr(R),\n        ...a,\n        onSuccess: (R)=>{\n            var B;\n            (B = a == null ? void 0 : a.onSuccess) == null || B.call(a, R);\n            let S = typeof u == \"function\" ? u(R, G, P) : u;\n            h(S);\n        },\n        onError: (R)=>{\n            var B;\n            C(R), (B = a == null ? void 0 : a.onError) == null || B.call(a, R);\n            let S = typeof c == \"function\" ? c(R, G, P) : c;\n            h(S, {\n                key: `${P}-useInfiniteList-notification`,\n                message: Q(\"notifications.error\", {\n                    statusCode: R.statusCode\n                }, `Error (status code: ${R.statusCode})`),\n                description: R.message,\n                type: \"error\"\n            });\n        },\n        meta: {\n            ...a == null ? void 0 : a.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useInfiniteList\", E, f == null ? void 0 : f.name)\n        }\n    }), { elapsedTime: te } = fe({\n        ...x,\n        isLoading: re.isFetching\n    });\n    return {\n        ...re,\n        overtime: {\n            elapsedTime: te\n        }\n    };\n}, \"useInfiniteList\");\n\n\nvar mt = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({}), _s = o(({ liveProvider: e, children: t })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(mt.Provider, {\n        value: {\n            liveProvider: e\n        }\n    }, t), \"LiveContextProvider\");\n\n\nvar Ae = o(()=>{\n    let { resources: e } = q(), t = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), { keys: r, preferLegacyKeys: s } = Z();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ({ resource: i, dataProviderName: a, invalidates: u, id: c, invalidationFilters: p = {\n        type: \"all\",\n        refetchType: \"active\"\n    }, invalidationOptions: l = {\n        cancelRefetch: !1\n    } })=>{\n        if (u === !1) return;\n        let m = ee(i, a, e), y = r().data(m).resource(i ?? \"\");\n        await Promise.all(u.map((d)=>{\n            switch(d){\n                case \"all\":\n                    return t.invalidateQueries(r().data(m).get(s), p, l);\n                case \"list\":\n                    return t.invalidateQueries(y.action(\"list\").get(s), p, l);\n                case \"many\":\n                    return t.invalidateQueries(y.action(\"many\").get(s), p, l);\n                case \"resourceAll\":\n                    return t.invalidateQueries(y.get(s), p, l);\n                case \"detail\":\n                    return t.invalidateQueries(y.action(\"one\").id(c || \"\").get(s), p, l);\n                default:\n                    return;\n            }\n        }));\n    }, []);\n}, \"useInvalidate\");\n\n\n\n\n\nvar js = o((e)=>{\n    let t = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(e);\n    return (0,lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(t.current, e) || (t.current = e), t.current;\n}, \"useMemoized\");\nvar Ar = o((e, t)=>{\n    let r = js(t);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(e, r);\n}, \"useDeepMemo\");\nvar Rt = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    resources: []\n}), Zs = o(({ resources: e, children: t })=>{\n    let r = Ar(()=>hr(e ?? []), [\n        e\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Rt.Provider, {\n        value: {\n            resources: r\n        }\n    }, t);\n}, \"ResourceContextProvider\");\n\nvar Js = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(\"new\"), qs = Js.Provider, oe = o(()=>react__WEBPACK_IMPORTED_MODULE_0__.useContext(Js), \"useRouterType\");\n\n\nvar en = {}, ft = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(en), tn = o(({ children: e, router: t })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ft.Provider, {\n        value: t ?? en\n    }, e), \"RouterContextProvider\");\n\nvar vo = o(()=>{\n    let e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ft);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(e == null ? void 0 : e.parse) ?? (()=>()=>({})), [\n        e == null ? void 0 : e.parse\n    ])();\n}, \"useParse\");\nvar Te = o(()=>{\n    let e = vo();\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>e(), [\n        e\n    ]);\n}, \"useParsed\");\nfunction q(e) {\n    let { resources: t } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Rt), r = oe(), s = Te(), n = {\n        resourceName: e && typeof e != \"string\" ? e.resourceName : e,\n        resourceNameOrRouteName: e && typeof e != \"string\" ? e.resourceNameOrRouteName : e,\n        recordItemId: e && typeof e != \"string\" ? e.recordItemId : void 0\n    }, i = o((m, y = !0)=>{\n        let T = Ee(m, t, r === \"legacy\");\n        if (T) return {\n            resource: T,\n            identifier: T.identifier ?? T.name\n        };\n        if (y) {\n            let x = {\n                name: m,\n                identifier: m\n            }, v = x.identifier ?? x.name;\n            return {\n                resource: x,\n                identifier: v\n            };\n        }\n    }, \"select\"), a = rn(), { useParams: u } = pe(), c = u();\n    if (r === \"legacy\") {\n        let m = n.resourceNameOrRouteName ? n.resourceNameOrRouteName : c.resource, y = m ? a(m) : void 0, d = (n == null ? void 0 : n.recordItemId) ?? c.id, T = c.action, x = (n == null ? void 0 : n.resourceName) ?? (y == null ? void 0 : y.name), v = (y == null ? void 0 : y.identifier) ?? (y == null ? void 0 : y.name);\n        return {\n            resources: t,\n            resource: y,\n            resourceName: x,\n            id: d,\n            action: T,\n            select: i,\n            identifier: v\n        };\n    }\n    let p, l = typeof e == \"string\" ? e : n == null ? void 0 : n.resourceNameOrRouteName;\n    if (l) {\n        let m = Ee(l, t);\n        m ? p = m : p = {\n            name: l\n        };\n    } else s != null && s.resource && (p = s.resource);\n    return {\n        resources: t,\n        resource: p,\n        resourceName: p == null ? void 0 : p.name,\n        id: s.id,\n        action: s.action,\n        select: i,\n        identifier: (p == null ? void 0 : p.identifier) ?? (p == null ? void 0 : p.name)\n    };\n}\no(q, \"useResource\");\n\nvar rn = o(()=>{\n    let { resources: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Rt);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((r)=>{\n        let s = Ee(r, e, !0);\n        return s || {\n            name: r,\n            route: r\n        };\n    }, [\n        e\n    ]);\n}, \"useResourceWithRoute\");\nvar Pt = o(({ resource: e, params: t, channel: r, types: s, enabled: n = !0, liveMode: i, onLiveEvent: a, dataProviderName: u, meta: c })=>{\n    var f;\n    let { resource: p, identifier: l } = q(e), { liveProvider: m } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(mt), { liveMode: y, onLiveEvent: d } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Qe), T = i ?? y, x = Ae(), v = u ?? (c == null ? void 0 : c.dataProviderName) ?? ((f = p == null ? void 0 : p.meta) == null ? void 0 : f.dataProviderName);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let P, M = o((Q)=>{\n            T === \"auto\" && x({\n                resource: l,\n                dataProviderName: v,\n                invalidates: [\n                    \"resourceAll\"\n                ],\n                invalidationFilters: {\n                    type: \"active\",\n                    refetchType: \"active\"\n                },\n                invalidationOptions: {\n                    cancelRefetch: !1\n                }\n            }), a == null || a(Q), d == null || d(Q);\n        }, \"callback\");\n        return T && T !== \"off\" && n && (P = m == null ? void 0 : m.subscribe({\n            channel: r,\n            params: {\n                resource: p == null ? void 0 : p.name,\n                ...t\n            },\n            types: s,\n            callback: M,\n            dataProviderName: v,\n            meta: {\n                ...c,\n                dataProviderName: v\n            }\n        })), ()=>{\n            P && (m == null || m.unsubscribe(P));\n        };\n    }, [\n        n\n    ]);\n}, \"useResourceSubscription\");\n\nvar sn = o((e)=>{\n    let { liveMode: t } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Qe);\n    return e ?? t;\n}, \"useLiveMode\");\n\nvar ph = o(({ params: e, channel: t, types: r = [\n    \"*\"\n], enabled: s = !0, onLiveEvent: n, dataProviderName: i = \"default\", meta: a })=>{\n    let { liveProvider: u } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(mt);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let c;\n        return s && (c = u == null ? void 0 : u.subscribe({\n            channel: t,\n            params: e,\n            types: r,\n            callback: n,\n            dataProviderName: i,\n            meta: {\n                ...a,\n                dataProviderName: i\n            }\n        })), ()=>{\n            c && (u == null || u.unsubscribe(c));\n        };\n    }, [\n        s\n    ]);\n}, \"useSubscription\");\n\nvar Ye = o(()=>{\n    let { liveProvider: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(mt);\n    return e == null ? void 0 : e.publish;\n}, \"usePublish\");\n\n\n\nvar Uo = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    notifications: [],\n    notificationDispatch: ()=>!1\n}), Hi = [], $i = o((e, t)=>{\n    switch(t.type){\n        case \"ADD\":\n            return [\n                ...e.filter((s)=>!((0,lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(s.id, t.payload.id) && s.resource === t.payload.resource)),\n                {\n                    ...t.payload,\n                    isRunning: !0\n                }\n            ];\n        case \"REMOVE\":\n            return e.filter((r)=>!((0,lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(r.id, t.payload.id) && r.resource === t.payload.resource));\n        case \"DECREASE_NOTIFICATION_SECOND\":\n            return e.map((r)=>(0,lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(r.id, t.payload.id) && r.resource === t.payload.resource ? {\n                    ...r,\n                    seconds: t.payload.seconds - 1e3\n                } : r);\n        default:\n            return e;\n    }\n}, \"undoableQueueReducer\"), an = o(({ children: e })=>{\n    let [t, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)($i, Hi), s = {\n        notifications: t,\n        notificationDispatch: r\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Uo.Provider, {\n        value: s\n    }, e,  false ? 0 : null);\n}, \"UndoableQueueContextProvider\");\nvar ut = o(()=>{\n    let { notifications: e, notificationDispatch: t } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Uo);\n    return {\n        notifications: e,\n        notificationDispatch: t\n    };\n}, \"useCancelNotification\");\n\n\nvar qt = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({}), cn = o(({ open: e, close: t, children: r })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(qt.Provider, {\n        value: {\n            open: e,\n            close: t\n        }\n    }, r), \"NotificationContextProvider\");\nvar He = o(()=>{\n    let { open: e, close: t } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(qt);\n    return {\n        open: e,\n        close: t\n    };\n}, \"useNotification\");\n\nvar Ce = o(()=>{\n    let { open: e } = He();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((r, s)=>{\n        r !== !1 && (r ? e == null || e(r) : s && (e == null || e(s)));\n    }, []);\n}, \"useHandleNotification\");\n\n\nvar Xe = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({}), dn = o(({ children: e, i18nProvider: t })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Xe.Provider, {\n        value: {\n            i18nProvider: t\n        }\n    }, e), \"I18nContextProvider\");\nvar Eo = o(()=>{\n    let { i18nProvider: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Xe);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((t)=>e == null ? void 0 : e.changeLocale(t), []);\n}, \"useSetLocale\");\n\nvar z = o(()=>{\n    let { i18nProvider: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Xe);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        function r(s, n, i) {\n            return (e == null ? void 0 : e.translate(s, n, i)) ?? i ?? (typeof n == \"string\" && typeof i > \"u\" ? n : s);\n        }\n        return o(r, \"translate\"), r;\n    }, [\n        e\n    ]);\n}, \"useTranslate\");\n\nvar Lo = o(()=>{\n    let { i18nProvider: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Xe);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>e == null ? void 0 : e.getLocale(), []);\n}, \"useGetLocale\");\nvar tP = o(()=>{\n    let e = z(), t = Eo(), r = Lo();\n    return {\n        translate: e,\n        changeLocale: t,\n        getLocale: r\n    };\n}, \"useTranslation\");\n\n\n\nvar fP = o(({ resourceName: e, resource: t, sorter: r, sorters: s, filters: n, maxItemCount: i, pageSize: a = 20, mapData: u = o((x)=>x, \"mapData\"), exportOptions: c, unparseConfig: p, meta: l, metaData: m, dataProviderName: y, onError: d, download: T } = {})=>{\n    let [x, v] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), f = le(), P = ue(), { resource: M, resources: Q, identifier: g } = q(I(t, e)), h = `${ht()(g, \"plural\")}-${new Date().toLocaleString()}`, { getList: D } = f(ee(g, y, Q)), k = P({\n        resource: M,\n        meta: I(l, m)\n    });\n    return {\n        isLoading: x,\n        triggerExport: o(async ()=>{\n            v(!0);\n            let L = [], U = 1, w = !0;\n            for(; w;)try {\n                let { data: V, total: G } = await D({\n                    resource: (M == null ? void 0 : M.name) ?? \"\",\n                    filters: n,\n                    sort: I(s, r),\n                    sorters: I(s, r),\n                    pagination: {\n                        current: U,\n                        pageSize: a,\n                        mode: \"server\"\n                    },\n                    meta: k,\n                    metaData: k\n                });\n                U++, L.push(...V), i && L.length >= i && (L = L.slice(0, i), w = !1), G === L.length && (w = !1);\n            } catch (V) {\n                v(!1), w = !1, d == null || d(V);\n                return;\n            }\n            let N = typeof p < \"u\" && p !== null;\n            warn_once__WEBPACK_IMPORTED_MODULE_1__(N && typeof c < \"u\" && c !== null, `[useExport]: resource: \"${g}\" \n\nBoth \\`unparseConfig\\` and \\`exportOptions\\` are set, \\`unparseConfig\\` will take precedence`);\n            let b = {\n                filename: h,\n                useKeysAsHeaders: !0,\n                useBom: !0,\n                title: \"My Generated Report\",\n                quoteStrings: '\"',\n                ...c\n            };\n            warn_once__WEBPACK_IMPORTED_MODULE_1__((c == null ? void 0 : c.decimalSeparator) !== void 0, `[useExport]: resource: \"${g}\" \n\nUse of \\`decimalSeparator\\` no longer supported, please use \\`mapData\\` instead.\n\nSee https://refine.dev/docs/api-reference/core/hooks/import-export/useExport/`), N ? p = {\n                quotes: !0,\n                ...p\n            } : p = {\n                columns: b.useKeysAsHeaders ? void 0 : b.headers,\n                delimiter: b.fieldSeparator,\n                header: b.showLabels || b.useKeysAsHeaders,\n                quoteChar: b.quoteStrings,\n                quotes: !0\n            };\n            let F = papaparse__WEBPACK_IMPORTED_MODULE_15__.unparse(L.map(u), p);\n            if (b.showTitle && (F = `${b.title}\\r\n\n${F}`),  false && (0)) {\n                let V = b.useTextFile ? \".txt\" : \".csv\", G = `text/${b.useTextFile ? \"plain\" : \"csv\"};charset=utf8;`, W = `${(b.filename ?? \"download\").replace(/ /g, \"_\")}${V}`;\n                ro(W, `${b != null && b.useBom ? \"\\uFEFF\" : \"\"}${F}`, G);\n            }\n            return v(!1), F;\n        }, \"triggerExport\")\n    };\n}, \"useExport\");\n\n\nvar RP = o((e = {})=>{\n    var K, j, re;\n    let t = ue(), r = Ae(), { redirect: s } = At(), { mutationMode: n } = _e(), { setWarnWhen: i } = vt(), a = fn(), u = I(e.meta, e.metaData), c = e.mutationMode ?? n, { id: p, setId: l, resource: m, identifier: y, formAction: d } = qe({\n        resource: e.resource,\n        id: e.id,\n        action: e.action\n    }), [T, x] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), v = d === \"edit\", f = d === \"clone\", P = d === \"create\", M = t({\n        resource: m,\n        meta: u\n    }), Q = (v || f) && !!e.resource, g = typeof e.id < \"u\", C = ((K = e.queryOptions) == null ? void 0 : K.enabled) === !1;\n    warn_once__WEBPACK_IMPORTED_MODULE_1__(Q && !g && !C, pu(d, y, p));\n    let h = qr({\n        redirectFromProps: e.redirect,\n        action: d,\n        redirectOptions: s\n    }), D = o((te = v ? \"list\" : \"edit\", R = p, S = {})=>{\n        a({\n            redirect: te,\n            resource: m,\n            id: R,\n            meta: {\n                ...u,\n                ...S\n            }\n        });\n    }, \"redirect\"), k = zt({\n        resource: y,\n        id: p,\n        queryOptions: {\n            enabled: !P && p !== void 0,\n            ...e.queryOptions\n        },\n        liveMode: e.liveMode,\n        onLiveEvent: e.onLiveEvent,\n        liveParams: e.liveParams,\n        meta: {\n            ...M,\n            ...e.queryMeta\n        },\n        dataProviderName: e.dataProviderName,\n        overtimeOptions: {\n            enabled: !1\n        }\n    }), E = Xt({\n        mutationOptions: e.createMutationOptions,\n        overtimeOptions: {\n            enabled: !1\n        }\n    }), L = To({\n        mutationOptions: e.updateMutationOptions,\n        overtimeOptions: {\n            enabled: !1\n        }\n    }), U = v ? L : E, N = U.isLoading || k.isFetching, { elapsedTime: b } = fe({\n        ...e.overtimeOptions,\n        isLoading: N\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>()=>{\n            var te;\n            (te = e.autoSave) != null && te.invalidateOnUnmount && T && y && typeof p < \"u\" && r({\n                id: p,\n                invalidates: e.invalidates || [\n                    \"list\",\n                    \"many\",\n                    \"detail\"\n                ],\n                dataProviderName: e.dataProviderName,\n                resource: y\n            });\n        }, [\n        (j = e.autoSave) == null ? void 0 : j.invalidateOnUnmount,\n        T\n    ]);\n    let F = o(async (te, { isAutosave: R = !1 } = {})=>{\n        let S = c === \"pessimistic\";\n        i(!1);\n        let B = o(($)=>D(h, $), \"onSuccessRedirect\");\n        return new Promise(($, X)=>{\n            if (!m) return X(au);\n            if (f && !p) return X(iu);\n            if (!te) return X(uu);\n            if (R && !v) return X(cu);\n            !S && !R && (br(()=>B()), $());\n            let ne = {\n                values: te,\n                resource: y ?? m.name,\n                meta: {\n                    ...M,\n                    ...e.mutationMeta\n                },\n                metaData: {\n                    ...M,\n                    ...e.mutationMeta\n                },\n                dataProviderName: e.dataProviderName,\n                invalidates: R ? [] : e.invalidates,\n                successNotification: R ? !1 : e.successNotification,\n                errorNotification: R ? !1 : e.errorNotification,\n                ...v ? {\n                    id: p ?? \"\",\n                    mutationMode: c,\n                    undoableTimeout: e.undoableTimeout,\n                    optimisticUpdateMap: e.optimisticUpdateMap\n                } : {}\n            }, { mutateAsync: Y } = v ? L : E;\n            Y(ne, {\n                onSuccess: e.onMutationSuccess ? (O, _, ae)=>{\n                    var J;\n                    (J = e.onMutationSuccess) == null || J.call(e, O, te, ae, R);\n                } : void 0,\n                onError: e.onMutationError ? (O, _, ae)=>{\n                    var J;\n                    (J = e.onMutationError) == null || J.call(e, O, te, ae, R);\n                } : void 0\n            }).then((O)=>{\n                S && !R && br(()=>{\n                    var _;\n                    return B((_ = O == null ? void 0 : O.data) == null ? void 0 : _.id);\n                }), R && x(!0), $(O);\n            }).catch(X);\n        });\n    }, \"onFinish\"), V = oo((te)=>F(te, {\n            isAutosave: !0\n        }), ((re = e.autoSave) == null ? void 0 : re.debounce) || 1e3, \"Cancelled by debounce\"), G = {\n        elapsedTime: b\n    }, W = {\n        status: L.status,\n        data: L.data,\n        error: L.error\n    };\n    return {\n        onFinish: F,\n        onFinishAutoSave: V,\n        formLoading: N,\n        mutationResult: U,\n        mutation: U,\n        queryResult: k,\n        query: k,\n        autoSaveProps: W,\n        id: p,\n        setId: l,\n        redirect: D,\n        overtime: G\n    };\n}, \"useForm\"), au = new Error(\"[useForm]: `resource` is not defined or not matched but is required\"), iu = new Error(\"[useForm]: `id` is not defined but is required in edit and clone actions\"), uu = new Error(\"[useForm]: `values` is not provided but is required\"), cu = new Error(\"[useForm]: `autoSave` is only allowed in edit action\"), pu = o((e, t, r)=>`[useForm]: action: \"${e}\", resource: \"${t}\", id: ${r}\n\nIf you don't use the \\`setId\\` method to set the \\`id\\`, you should pass the \\`id\\` prop to \\`useForm\\`. Otherwise, \\`useForm\\` will not be able to infer the \\`id\\` from the current URL with custom resource provided.\n\nSee https://refine.dev/docs/data/hooks/use-form/#id-`, \"idWarningMessage\");\n\nvar fn = o(()=>{\n    let { show: e, edit: t, list: r, create: s } = he();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({ redirect: i, resource: a, id: u, meta: c = {} })=>{\n        if (i && a) return a.show && i === \"show\" && u ? e(a, u, void 0, c) : a.edit && i === \"edit\" && u ? t(a, u, void 0, c) : a.create && i === \"create\" ? s(a, void 0, c) : r(a, \"push\", c);\n    }, []);\n}, \"useRedirectionAfterSubmission\");\n\nvar Mo = o(()=>{\n    let e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ft);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(e == null ? void 0 : e.back) ?? (()=>()=>{}), [\n        e == null ? void 0 : e.back\n    ])();\n}, \"useBack\");\n\n\nvar Ut = o(()=>{\n    let e = oe(), { resource: t, resources: r } = q(), s = Te();\n    return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(({ resource: i, action: a, meta: u })=>{\n        var y;\n        let c = i || t;\n        if (!c) return;\n        let l = (y = Se(c, r, e === \"legacy\").find((d)=>d.action === a)) == null ? void 0 : y.route;\n        return l ? We(l, c == null ? void 0 : c.meta, s, u) : void 0;\n    }, [\n        r,\n        t,\n        s\n    ]);\n}, \"useGetToPath\");\nvar Pe = o(()=>{\n    let e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ft), { select: t } = q(), r = Ut(), n = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(e == null ? void 0 : e.go) ?? (()=>()=>{}), [\n        e == null ? void 0 : e.go\n    ])();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((a)=>{\n        if (typeof a.to != \"object\") return n({\n            ...a,\n            to: a.to\n        });\n        let { resource: u } = t(a.to.resource);\n        xu(a.to, u);\n        let c = r({\n            resource: u,\n            action: a.to.action,\n            meta: {\n                id: a.to.id,\n                ...a.to.meta\n            }\n        });\n        return n({\n            ...a,\n            to: c\n        });\n    }, [\n        t,\n        n\n    ]);\n}, \"useGo\"), xu = o((e, t)=>{\n    if (!(e != null && e.action) || !(e != null && e.resource)) throw new Error('[useGo]: \"action\" or \"resource\" is required.');\n    if ([\n        \"edit\",\n        \"show\",\n        \"clone\"\n    ].includes(e == null ? void 0 : e.action) && !e.id) throw new Error(`[useGo]: [action: ${e.action}] requires an \"id\" for resource [resource: ${e.resource}]`);\n    if (!t[e.action]) throw new Error(`[useGo]: [action: ${e.action}] is not defined for [resource: ${e.resource}]`);\n}, \"handleResourceErrors\");\nvar he = o(()=>{\n    let { resources: e } = q(), t = oe(), { useHistory: r } = pe(), s = r(), n = Te(), i = Pe(), a = Mo(), u = o((g, C = \"push\")=>{\n        t === \"legacy\" ? s[C](g) : i({\n            to: g,\n            type: C\n        });\n    }, \"handleUrl\"), c = o((g, C = {})=>{\n        var k;\n        if (t === \"legacy\") {\n            let E = typeof g == \"string\" ? Ee(g, e, !0) ?? {\n                name: g,\n                route: g\n            } : g, L = Se(E, e, !0).find((U)=>U.action === \"create\");\n            return L ? We(L.route, E == null ? void 0 : E.meta, n, C) : \"\";\n        }\n        let h = typeof g == \"string\" ? Ee(g, e) ?? {\n            name: g\n        } : g, D = (k = Se(h, e).find((E)=>E.action === \"create\")) == null ? void 0 : k.route;\n        return D ? i({\n            to: We(D, h == null ? void 0 : h.meta, n, C),\n            type: \"path\",\n            query: C.query\n        }) : \"\";\n    }, \"createUrl\"), p = o((g, C, h = {})=>{\n        var L;\n        let D = encodeURIComponent(C);\n        if (t === \"legacy\") {\n            let U = typeof g == \"string\" ? Ee(g, e, !0) ?? {\n                name: g,\n                route: g\n            } : g, w = Se(U, e, !0).find((N)=>N.action === \"edit\");\n            return w ? We(w.route, U == null ? void 0 : U.meta, n, {\n                ...h,\n                id: D\n            }) : \"\";\n        }\n        let k = typeof g == \"string\" ? Ee(g, e) ?? {\n            name: g\n        } : g, E = (L = Se(k, e).find((U)=>U.action === \"edit\")) == null ? void 0 : L.route;\n        return E ? i({\n            to: We(E, k == null ? void 0 : k.meta, n, {\n                ...h,\n                id: D\n            }),\n            type: \"path\",\n            query: h.query\n        }) : \"\";\n    }, \"editUrl\"), l = o((g, C, h = {})=>{\n        var L;\n        let D = encodeURIComponent(C);\n        if (t === \"legacy\") {\n            let U = typeof g == \"string\" ? Ee(g, e, !0) ?? {\n                name: g,\n                route: g\n            } : g, w = Se(U, e, !0).find((N)=>N.action === \"clone\");\n            return w ? We(w.route, U == null ? void 0 : U.meta, n, {\n                ...h,\n                id: D\n            }) : \"\";\n        }\n        let k = typeof g == \"string\" ? Ee(g, e) ?? {\n            name: g\n        } : g, E = (L = Se(k, e).find((U)=>U.action === \"clone\")) == null ? void 0 : L.route;\n        return E ? i({\n            to: We(E, k == null ? void 0 : k.meta, n, {\n                ...h,\n                id: D\n            }),\n            type: \"path\",\n            query: h.query\n        }) : \"\";\n    }, \"cloneUrl\"), m = o((g, C, h = {})=>{\n        var L;\n        let D = encodeURIComponent(C);\n        if (t === \"legacy\") {\n            let U = typeof g == \"string\" ? Ee(g, e, !0) ?? {\n                name: g,\n                route: g\n            } : g, w = Se(U, e, !0).find((N)=>N.action === \"show\");\n            return w ? We(w.route, U == null ? void 0 : U.meta, n, {\n                ...h,\n                id: D\n            }) : \"\";\n        }\n        let k = typeof g == \"string\" ? Ee(g, e) ?? {\n            name: g\n        } : g, E = (L = Se(k, e).find((U)=>U.action === \"show\")) == null ? void 0 : L.route;\n        return E ? i({\n            to: We(E, k == null ? void 0 : k.meta, n, {\n                ...h,\n                id: D\n            }),\n            type: \"path\",\n            query: h.query\n        }) : \"\";\n    }, \"showUrl\"), y = o((g, C = {})=>{\n        var k;\n        if (t === \"legacy\") {\n            let E = typeof g == \"string\" ? Ee(g, e, !0) ?? {\n                name: g,\n                route: g\n            } : g, L = Se(E, e, !0).find((U)=>U.action === \"list\");\n            return L ? We(L.route, E == null ? void 0 : E.meta, n, C) : \"\";\n        }\n        let h = typeof g == \"string\" ? Ee(g, e) ?? {\n            name: g\n        } : g, D = (k = Se(h, e).find((E)=>E.action === \"list\")) == null ? void 0 : k.route;\n        return D ? i({\n            to: We(D, h == null ? void 0 : h.meta, n, C),\n            type: \"path\",\n            query: C.query\n        }) : \"\";\n    }, \"listUrl\");\n    return {\n        create: o((g, C = \"push\", h = {})=>{\n            u(c(g, h), C);\n        }, \"create\"),\n        createUrl: c,\n        edit: o((g, C, h = \"push\", D = {})=>{\n            u(p(g, C, D), h);\n        }, \"edit\"),\n        editUrl: p,\n        clone: o((g, C, h = \"push\", D = {})=>{\n            u(l(g, C, D), h);\n        }, \"clone\"),\n        cloneUrl: l,\n        show: o((g, C, h = \"push\", D = {})=>{\n            u(m(g, C, D), h);\n        }, \"show\"),\n        showUrl: m,\n        list: o((g, C = \"push\", h = {})=>{\n            u(y(g, h), C);\n        }, \"list\"),\n        listUrl: y,\n        push: o((g, ...C)=>{\n            t === \"legacy\" ? s.push(g, ...C) : i({\n                to: g,\n                type: \"push\"\n            });\n        }, \"push\"),\n        replace: o((g, ...C)=>{\n            t === \"legacy\" ? s.replace(g, ...C) : i({\n                to: g,\n                type: \"replace\"\n            });\n        }, \"replace\"),\n        goBack: o(()=>{\n            t === \"legacy\" ? s.goBack() : a();\n        }, \"goBack\")\n    };\n}, \"useNavigation\");\n\nvar nR = o(({ resource: e, id: t, meta: r, metaData: s, queryOptions: n, overtimeOptions: i, ...a } = {})=>{\n    let { resource: u, identifier: c, id: p, setId: l } = qe({\n        id: t,\n        resource: e\n    }), y = ue()({\n        resource: u,\n        meta: I(r, s)\n    });\n    warn_once__WEBPACK_IMPORTED_MODULE_1__(!!e && !p, Pu(c, p));\n    let d = zt({\n        resource: c,\n        id: p ?? \"\",\n        queryOptions: {\n            enabled: p !== void 0,\n            ...n\n        },\n        meta: y,\n        metaData: y,\n        overtimeOptions: i,\n        ...a\n    });\n    return {\n        queryResult: d,\n        query: d,\n        showId: p,\n        setShowId: l,\n        overtime: d.overtime\n    };\n}, \"useShow\"), Pu = o((e, t)=>`[useShow]: resource: \"${e}\", id: ${t} \n\nIf you don't use the \\`setShowId\\` method to set the \\`showId\\`, you should pass the \\`id\\` prop to \\`useShow\\`. Otherwise, \\`useShow\\` will not be able to infer the \\`id\\` from the current URL. \n\nSee https://refine.dev/docs/data/hooks/use-show/#resource`, \"idWarningMessage\");\n\n\n\nvar mR = o(({ resourceName: e, resource: t, mapData: r = o((l)=>l, \"mapData\"), paparseOptions: s, batchSize: n = Number.MAX_SAFE_INTEGER, onFinish: i, meta: a, metaData: u, onProgress: c, dataProviderName: p } = {})=>{\n    let [l, m] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0), [y, d] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0), [T, x] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), { resource: v, identifier: f } = q(t ?? e), P = ue(), M = bo(), Q = Xt(), g = P({\n        resource: v,\n        meta: I(a, u)\n    }), C;\n    n === 1 ? C = Q : C = M;\n    let h = o(()=>{\n        d(0), m(0), x(!1);\n    }, \"handleCleanup\"), D = o((E)=>{\n        let L = {\n            succeeded: E.filter((U)=>U.type === \"success\"),\n            errored: E.filter((U)=>U.type === \"error\")\n        };\n        i == null || i(L), x(!1);\n    }, \"handleFinish\");\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        c == null || c({\n            totalAmount: y,\n            processedAmount: l\n        });\n    }, [\n        y,\n        l\n    ]);\n    let k = o(({ file: E })=>(h(), new Promise((L)=>{\n            x(!0), papaparse__WEBPACK_IMPORTED_MODULE_15__.parse(E, {\n                complete: async ({ data: U })=>{\n                    let w = sr(U, r);\n                    if (d(w.length), n === 1) {\n                        let N = w.map((F)=>o(async ()=>({\n                                    response: await Q.mutateAsync({\n                                        resource: f ?? \"\",\n                                        values: F,\n                                        successNotification: !1,\n                                        errorNotification: !1,\n                                        dataProviderName: p,\n                                        meta: g,\n                                        metaData: g\n                                    }),\n                                    value: F\n                                }), \"fn\")), b = await gr(N, ({ response: F, value: V })=>(m((G)=>G + 1), {\n                                response: [\n                                    F.data\n                                ],\n                                type: \"success\",\n                                request: [\n                                    V\n                                ]\n                            }), (F, V)=>({\n                                response: [\n                                    F\n                                ],\n                                type: \"error\",\n                                request: [\n                                    w[V]\n                                ]\n                            }));\n                        L(b);\n                    } else {\n                        let N = (0,lodash_es_chunk_js__WEBPACK_IMPORTED_MODULE_16__[\"default\"])(w, n), b = N.map((V)=>o(async ()=>({\n                                    response: await M.mutateAsync({\n                                        resource: f ?? \"\",\n                                        values: V,\n                                        successNotification: !1,\n                                        errorNotification: !1,\n                                        dataProviderName: p,\n                                        meta: g,\n                                        metaData: g\n                                    }),\n                                    value: V,\n                                    currentBatchLength: V.length\n                                }), \"fn\")), F = await gr(b, ({ response: V, currentBatchLength: G, value: W })=>(m((K)=>K + G), {\n                                response: V.data,\n                                type: \"success\",\n                                request: W\n                            }), (V, G)=>({\n                                response: [\n                                    V\n                                ],\n                                type: \"error\",\n                                request: N[G]\n                            }));\n                        L(F);\n                    }\n                },\n                ...s\n            });\n        }).then((L)=>(D(L), L))), \"handleChange\");\n    return {\n        inputProps: {\n            type: \"file\",\n            accept: \".csv\",\n            onChange: (E)=>{\n                E.target.files && E.target.files.length > 0 && k({\n                    file: E.target.files[0]\n                });\n            }\n        },\n        mutationResult: C,\n        isLoading: T,\n        handleChange: k\n    };\n}, \"useImport\");\n\nvar TR = o(({ defaultVisible: e = !1 } = {})=>{\n    let [t, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(e), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>r(!0), [\n        t\n    ]), n = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>r(!1), [\n        t\n    ]);\n    return {\n        visible: t,\n        show: s,\n        close: n\n    };\n}, \"useModal\");\nvar Du = o(({ resource: e, action: t, meta: r, legacy: s })=>Ut()({\n        resource: e,\n        action: t,\n        meta: r,\n        legacy: s\n    }), \"useToPath\");\n\n\nvar Mu = o((e, t)=>{\n    let r = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ft), s = r == null ? void 0 : r.Link, n = Pe(), i = \"\";\n    return \"go\" in e && (r != null && r.go || warn_once__WEBPACK_IMPORTED_MODULE_1__(!0, \"[Link]: `routerProvider` is not found. To use `go`, Please make sure that you have provided the `routerProvider` for `<Refine />` https://refine.dev/docs/routing/router-provider/ \\n\"), i = n({\n        ...e.go,\n        type: \"path\"\n    })), \"to\" in e && (i = e.to), s ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(s, {\n        ref: t,\n        ...e,\n        to: i,\n        go: void 0\n    }) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        ref: t,\n        href: i,\n        ...e,\n        to: void 0,\n        go: void 0\n    });\n}, \"LinkComponent\"), Io = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(Mu);\nvar yt = o(()=>Io, \"useLink\");\n\n\nvar gt = {\n    useHistory: ()=>!1,\n    useLocation: ()=>!1,\n    useParams: ()=>({}),\n    Prompt: ()=>null,\n    Link: ()=>null\n}, er = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(gt), xn = o(({ children: e, useHistory: t, useLocation: r, useParams: s, Prompt: n, Link: i, routes: a })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(er.Provider, {\n        value: {\n            useHistory: t ?? gt.useHistory,\n            useLocation: r ?? gt.useLocation,\n            useParams: s ?? gt.useParams,\n            Prompt: n ?? gt.Prompt,\n            Link: i ?? gt.Link,\n            routes: a ?? gt.routes\n        }\n    }, e), \"LegacyRouterContextProvider\");\nvar pe = o(()=>{\n    let e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(er), { useHistory: t, useLocation: r, useParams: s, Prompt: n, Link: i, routes: a } = e ?? gt;\n    return {\n        useHistory: t,\n        useLocation: r,\n        useParams: s,\n        Prompt: n,\n        Link: i,\n        routes: a\n    };\n}, \"useRouterContext\");\n\n\n\n\nvar ct = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    options: {\n        buttons: {\n            enableAccessControl: !0,\n            hideIfUnauthorized: !1\n        }\n    }\n}), Pn = o(({ can: e, children: t, options: r })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ct.Provider, {\n        value: {\n            can: e,\n            options: r ? {\n                ...r,\n                buttons: {\n                    enableAccessControl: !0,\n                    hideIfUnauthorized: !1,\n                    ...r.buttons\n                }\n            } : {\n                buttons: {\n                    enableAccessControl: !0,\n                    hideIfUnauthorized: !1\n                },\n                queryOptions: void 0\n            }\n        }\n    }, t), \"AccessControlContextProvider\");\nvar kt = o((e)=>{\n    if (!e) return;\n    let { icon: t, list: r, edit: s, create: n, show: i, clone: a, children: u, meta: c, options: p, ...l } = e, { icon: m, ...y } = c ?? {}, { icon: d, ...T } = p ?? {};\n    return {\n        ...l,\n        ...c ? {\n            meta: y\n        } : {},\n        ...p ? {\n            options: T\n        } : {}\n    };\n}, \"sanitizeResource\");\nvar kr = o(({ action: e, resource: t, params: r, queryOptions: s })=>{\n    let { can: n, options: i } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ct), { keys: a, preferLegacyKeys: u } = Z(), { queryOptions: c } = i || {}, p = {\n        ...c,\n        ...s\n    }, { resource: l, ...m } = r ?? {}, y = kt(l), d = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: a().access().resource(t).action(e).params({\n            params: {\n                ...m,\n                resource: y\n            },\n            enabled: p == null ? void 0 : p.enabled\n        }).get(u),\n        queryFn: ()=>(n == null ? void 0 : n({\n                action: e,\n                resource: t,\n                params: {\n                    ...m,\n                    resource: y\n                }\n            })) ?? Promise.resolve({\n                can: !0\n            }),\n        enabled: typeof n < \"u\",\n        ...p,\n        meta: {\n            ...p == null ? void 0 : p.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useCan\", u, t, [\n                \"useButtonCanAccess\",\n                \"useNavigationButton\"\n            ])\n        },\n        retry: !1\n    });\n    return typeof n > \"u\" ? {\n        data: {\n            can: !0\n        }\n    } : d;\n}, \"useCan\");\n\nvar cC = o(()=>{\n    let { can: e } = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ct);\n    return {\n        can: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>e ? o(async ({ params: s, ...n })=>{\n                let i = s != null && s.resource ? kt(s.resource) : void 0;\n                return e({\n                    ...n,\n                    ...s ? {\n                        params: {\n                            ...s,\n                            resource: i\n                        }\n                    } : {}\n                });\n            }, \"canWithSanitizedResource\") : void 0, [\n            e\n        ])\n    };\n}, \"useCanWithoutCache\");\n\n\n\n\nvar PC = o((e)=>{\n    let [t, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]), [s, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]), [i, a] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]), { resource: u, sort: c, sorters: p, filters: l = [], optionLabel: m = \"title\", optionValue: y = \"id\", searchField: d = typeof m == \"string\" ? m : \"title\", debounce: T = 300, successNotification: x, errorNotification: v, defaultValueQueryOptions: f, queryOptions: P, fetchSize: M, pagination: Q, hasPagination: g = !1, liveMode: C, defaultValue: h = [], selectedOptionsOrder: D = \"in-place\", onLiveEvent: k, onSearch: E, liveParams: L, meta: U, metaData: w, dataProviderName: N, overtimeOptions: b } = e, F = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((O)=>typeof m == \"string\" ? (0,lodash_es_get_js__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(O, m) : m(O), [\n        m\n    ]), V = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((O)=>typeof y == \"string\" ? (0,lodash_es_get_js__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(O, y) : y(O), [\n        y\n    ]), { resource: G, identifier: W } = q(u), j = ue()({\n        resource: G,\n        meta: I(U, w)\n    }), re = Array.isArray(h) ? h : [\n        h\n    ], te = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((O)=>{\n        a(O.data.map((_)=>({\n                label: F(_),\n                value: V(_)\n            })));\n    }, [\n        m,\n        y\n    ]), R = f ?? P, S = go({\n        resource: W,\n        ids: re,\n        queryOptions: {\n            ...R,\n            enabled: re.length > 0 && ((R == null ? void 0 : R.enabled) ?? !0),\n            onSuccess: (O)=>{\n                var _;\n                te(O), (_ = R == null ? void 0 : R.onSuccess) == null || _.call(R, O);\n            }\n        },\n        overtimeOptions: {\n            enabled: !1\n        },\n        meta: j,\n        metaData: j,\n        liveMode: \"off\",\n        dataProviderName: N\n    }), B = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((O)=>{\n        n(O.data.map((_)=>({\n                label: F(_),\n                value: V(_)\n            })));\n    }, [\n        m,\n        y\n    ]), H = $t({\n        resource: W,\n        sorters: I(p, c),\n        filters: l.concat(t),\n        pagination: {\n            current: Q == null ? void 0 : Q.current,\n            pageSize: (Q == null ? void 0 : Q.pageSize) ?? M,\n            mode: Q == null ? void 0 : Q.mode\n        },\n        hasPagination: g,\n        queryOptions: {\n            ...P,\n            onSuccess: (O)=>{\n                var _;\n                B(O), (_ = P == null ? void 0 : P.onSuccess) == null || _.call(P, O);\n            }\n        },\n        overtimeOptions: {\n            enabled: !1\n        },\n        successNotification: x,\n        errorNotification: v,\n        meta: j,\n        metaData: j,\n        liveMode: C,\n        liveParams: L,\n        onLiveEvent: k,\n        dataProviderName: N\n    }), { elapsedTime: $ } = fe({\n        ...b,\n        isLoading: H.isFetching || S.isFetching\n    }), X = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,lodash_es_uniqBy_js__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(D === \"in-place\" ? [\n            ...s,\n            ...i\n        ] : [\n            ...i,\n            ...s\n        ], \"value\"), [\n        s,\n        i\n    ]), ne = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(E), Y = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,lodash_es_debounce_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])((O)=>{\n            if (ne.current) {\n                r(ne.current(O));\n                return;\n            }\n            if (!O) {\n                r([]);\n                return;\n            }\n            r([\n                {\n                    field: d,\n                    operator: \"contains\",\n                    value: O\n                }\n            ]);\n        }, T), [\n        d,\n        T\n    ]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        ne.current = E;\n    }, [\n        E\n    ]), {\n        queryResult: H,\n        defaultValueQueryResult: S,\n        query: H,\n        defaultValueQuery: S,\n        options: X,\n        onSearch: Y,\n        overtime: {\n            elapsedTime: $\n        }\n    };\n}, \"useSelect\");\n\n\n\n\n\nvar Un = [], En = [];\nfunction IC({ initialCurrent: e, initialPageSize: t, hasPagination: r = !0, pagination: s, initialSorter: n, permanentSorter: i = En, defaultSetFilterBehavior: a, initialFilter: u, permanentFilter: c = Un, filters: p, sorters: l, syncWithLocation: m, resource: y, successNotification: d, errorNotification: T, queryOptions: x, liveMode: v, onLiveEvent: f, liveParams: P, meta: M, metaData: Q, dataProviderName: g, overtimeOptions: C } = {}) {\n    var Wo, Ho, $o, zo, _o;\n    let { syncWithLocation: h } = to(), D = m ?? h, k = sn(v), E = oe(), { useLocation: L } = pe(), { search: U, pathname: w } = L(), N = ue(), b = Te(), F = ((p == null ? void 0 : p.mode) || \"server\") === \"server\", V = ((l == null ? void 0 : l.mode) || \"server\") === \"server\", G = r === !1 ? \"off\" : \"server\", W = ((s == null ? void 0 : s.mode) ?? G) !== \"off\", K = I(s == null ? void 0 : s.current, e), j = I(s == null ? void 0 : s.pageSize, t), re = I(M, Q), { parsedCurrent: te, parsedPageSize: R, parsedSorter: S, parsedFilters: B } = vr(U ?? \"?\"), H = I(p == null ? void 0 : p.initial, u), $ = I(p == null ? void 0 : p.permanent, c) ?? Un, X = I(l == null ? void 0 : l.initial, n), ne = I(l == null ? void 0 : l.permanent, i) ?? En, Y = I(p == null ? void 0 : p.defaultBehavior, a) ?? \"merge\", O, _, ae, J;\n    D ? (O = ((Wo = b == null ? void 0 : b.params) == null ? void 0 : Wo.current) || te || K || 1, _ = ((Ho = b == null ? void 0 : b.params) == null ? void 0 : Ho.pageSize) || R || j || 10, ae = (($o = b == null ? void 0 : b.params) == null ? void 0 : $o.sorters) || (S.length ? S : X), J = ((zo = b == null ? void 0 : b.params) == null ? void 0 : zo.filters) || (B.length ? B : H)) : (O = K || 1, _ = j || 10, ae = X, J = H);\n    let { replace: we } = he(), ye = Pe(), { resource: Ve, identifier: Ne } = q(y), se = N({\n        resource: Ve,\n        meta: re\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        warn_once__WEBPACK_IMPORTED_MODULE_1__(typeof Ne > \"u\", \"useTable: `resource` is not defined.\");\n    }, [\n        Ne\n    ]);\n    let [me, ce] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(Lr(ne, ae ?? [])), [ve, rt] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(Er($, J ?? [])), [Ke, Ct] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(O), [Ge, Tt] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(_), xt = o(()=>{\n        if (E === \"new\") {\n            let { sorters: jo, filters: Nc, pageSize: Bc, current: Kc, ...sa } = (b == null ? void 0 : b.params) ?? {};\n            return sa;\n        }\n        let { sorter: Ie, filters: ot, pageSize: zr, current: _r, ...jr } = qs__WEBPACK_IMPORTED_MODULE_6__.parse(U, {\n            ignoreQueryPrefix: !0\n        });\n        return jr;\n    }, \"getCurrentQueryParams\"), bt = o(({ pagination: { current: Ie, pageSize: ot }, sorter: zr, filters: _r })=>{\n        if (E === \"new\") return ye({\n            type: \"path\",\n            options: {\n                keepHash: !0,\n                keepQuery: !0\n            },\n            query: {\n                ...W ? {\n                    current: Ie,\n                    pageSize: ot\n                } : {},\n                sorters: zr,\n                filters: _r,\n                ...xt()\n            }\n        }) ?? \"\";\n        let jr = qs__WEBPACK_IMPORTED_MODULE_6__.parse(U == null ? void 0 : U.substring(1)), jo = Dr({\n            pagination: {\n                pageSize: ot,\n                current: Ie\n            },\n            sorters: me ?? zr,\n            filters: _r,\n            ...jr\n        });\n        return `${w ?? \"\"}?${jo ?? \"\"}`;\n    }, \"createLinkForSyncWithLocation\");\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        U === \"\" && (Ct(O), Tt(_), ce(Lr(ne, ae ?? [])), rt(Er($, J ?? [])));\n    }, [\n        U\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (D) {\n            let Ie = xt();\n            if (E === \"new\") ye({\n                type: \"replace\",\n                options: {\n                    keepQuery: !0\n                },\n                query: {\n                    ...W ? {\n                        pageSize: Ge,\n                        current: Ke\n                    } : {},\n                    sorters: (0,lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(me, ne, lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"]),\n                    filters: (0,lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(ve, $, lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"])\n                }\n            });\n            else {\n                let ot = Dr({\n                    ...W ? {\n                        pagination: {\n                            pageSize: Ge,\n                            current: Ke\n                        }\n                    } : {},\n                    sorters: (0,lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(me, ne, lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"]),\n                    filters: (0,lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(ve, $, lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"]),\n                    ...Ie\n                });\n                return we == null ? void 0 : we(`${w}?${ot}`, void 0, {\n                    shallow: !0\n                });\n            }\n        }\n    }, [\n        D,\n        Ke,\n        Ge,\n        me,\n        ve\n    ]);\n    let or = $t({\n        resource: Ne,\n        hasPagination: r,\n        pagination: {\n            current: Ke,\n            pageSize: Ge,\n            mode: s == null ? void 0 : s.mode\n        },\n        filters: F ? St($, ve) : void 0,\n        sorters: V ? Ur(ne, me) : void 0,\n        queryOptions: x,\n        overtimeOptions: C,\n        successNotification: d,\n        errorNotification: T,\n        meta: se,\n        metaData: se,\n        liveMode: k,\n        liveParams: P,\n        onLiveEvent: f,\n        dataProviderName: g\n    }), Bo = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((Ie)=>{\n        rt((ot)=>St($, Ie, ot));\n    }, [\n        $\n    ]), Ko = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((Ie)=>{\n        rt(St($, Ie));\n    }, [\n        $\n    ]), Go = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((Ie)=>{\n        rt((ot)=>St($, Ie(ot)));\n    }, [\n        $\n    ]), oa = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((Ie, ot = Y)=>{\n        typeof Ie == \"function\" ? Go(Ie) : ot === \"replace\" ? Ko(Ie) : Bo(Ie);\n    }, [\n        Go,\n        Ko,\n        Bo\n    ]), Oo = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((Ie)=>{\n        ce(()=>Ur(ne, Ie));\n    }, [\n        ne\n    ]);\n    return {\n        tableQueryResult: or,\n        tableQuery: or,\n        sorters: me,\n        setSorters: Oo,\n        sorter: me,\n        setSorter: Oo,\n        filters: ve,\n        setFilters: oa,\n        current: Ke,\n        setCurrent: Ct,\n        pageSize: Ge,\n        setPageSize: Tt,\n        pageCount: Ge ? Math.ceil((((_o = or.data) == null ? void 0 : _o.total) ?? 0) / Ge) : 1,\n        createLinkForSyncWithLocation: bt,\n        overtime: or.overtime\n    };\n}\no(IC, \"useTable\");\n\n\n\n\nvar Et = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({}), Mn = o(({ create: e, get: t, update: r, children: s })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Et.Provider, {\n        value: {\n            create: e,\n            get: t,\n            update: r\n        }\n    }, s), \"AuditLogContextProvider\");\nvar Je = o(({ logMutationOptions: e, renameMutationOptions: t } = {})=>{\n    let r = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Et), { keys: n, preferLegacyKeys: i } = Z(), a = ie(), { resources: u } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Rt), { data: c, refetch: p, isLoading: l } = no({\n        v3LegacyAuthProviderCompatible: !!(a != null && a.isLegacy),\n        queryOptions: {\n            enabled: !!(s != null && s.create)\n        }\n    }), m = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)(async (d)=>{\n        var f, P, M, Q, g;\n        let T = Ee(d.resource, u), x = I((f = T == null ? void 0 : T.meta) == null ? void 0 : f.audit, (P = T == null ? void 0 : T.options) == null ? void 0 : P.audit, (Q = (M = T == null ? void 0 : T.options) == null ? void 0 : M.auditLog) == null ? void 0 : Q.permissions);\n        if (x && !Xr(x, d.action)) return;\n        let v;\n        return l && s != null && s.create && (v = await p()), await ((g = s.create) == null ? void 0 : g.call(s, {\n            ...d,\n            author: c ?? (v == null ? void 0 : v.data)\n        }));\n    }, {\n        mutationKey: n().audit().action(\"log\").get(),\n        ...e,\n        meta: {\n            ...e == null ? void 0 : e.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useLog\", i)\n        }\n    }), y = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)(async (d)=>{\n        var T;\n        return await ((T = s.update) == null ? void 0 : T.call(s, d));\n    }, {\n        onSuccess: (d)=>{\n            d != null && d.resource && r.invalidateQueries(n().audit().resource((d == null ? void 0 : d.resource) ?? \"\").action(\"list\").get(i));\n        },\n        mutationKey: n().audit().action(\"rename\").get(),\n        ...t,\n        meta: {\n            ...t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useLog\", i)\n        }\n    });\n    return {\n        log: m,\n        rename: y\n    };\n}, \"useLog\");\n\n\n\nvar eb = o(({ resource: e, action: t, meta: r, author: s, metaData: n, queryOptions: i })=>{\n    let { get: a } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Et), { keys: u, preferLegacyKeys: c } = Z();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: u().audit().resource(e).action(\"list\").params(r).get(c),\n        queryFn: ()=>(a == null ? void 0 : a({\n                resource: e,\n                action: t,\n                author: s,\n                meta: r,\n                metaData: n\n            })) ?? Promise.resolve([]),\n        enabled: typeof a < \"u\",\n        ...i,\n        retry: !1,\n        meta: {\n            ...i == null ? void 0 : i.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useLogList\", c, e)\n        }\n    });\n}, \"useLogList\");\n\n\nvar fb = o(({ meta: e = {} } = {})=>{\n    let t = oe(), { i18nProvider: r } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Xe), s = Te(), n = z(), { resources: i, resource: a, action: u } = q(), { options: { textTransformers: c } } = ge(), p = [];\n    if (!(a != null && a.name)) return {\n        breadcrumbs: p\n    };\n    let l = o((m)=>{\n        var d, T, x, v, f, P;\n        let y = typeof m == \"string\" ? Ee(m, i, t === \"legacy\") ?? {\n            name: m\n        } : m;\n        if (y) {\n            let M = I((d = y == null ? void 0 : y.meta) == null ? void 0 : d.parent, y == null ? void 0 : y.parentName);\n            M && l(M);\n            let Q = Se(y, i, t === \"legacy\").find((h)=>h.action === \"list\"), g = (T = Q == null ? void 0 : Q.resource) != null && T.list ? Q == null ? void 0 : Q.route : void 0, C = g ? t === \"legacy\" ? g : We(g, y == null ? void 0 : y.meta, s, e) : void 0;\n            p.push({\n                label: I((x = y.meta) == null ? void 0 : x.label, (v = y.options) == null ? void 0 : v.label) ?? n(`${y.name}.${y.name}`, c.humanize(y.name)),\n                href: C,\n                icon: I((f = y.meta) == null ? void 0 : f.icon, (P = y.options) == null ? void 0 : P.icon, y.icon)\n            });\n        }\n    }, \"addBreadcrumb\");\n    if (l(a), u && u !== \"list\") {\n        let m = `actions.${u}`, y = n(m);\n        typeof r < \"u\" && y === m ? (warn_once__WEBPACK_IMPORTED_MODULE_1__(!0, `[useBreadcrumb]: Breadcrumb missing translate key for the \"${u}\" action. Please add \"actions.${u}\" key to your translation file.\nFor more information, see https://refine.dev/docs/api-reference/core/hooks/useBreadcrumb/#i18n-support`), p.push({\n            label: n(`buttons.${u}`, c.humanize(u))\n        })) : p.push({\n            label: n(m, c.humanize(u))\n        });\n    }\n    return {\n        breadcrumbs: p\n    };\n}, \"useBreadcrumb\");\n\nvar Ft = o((e, t, r = !1)=>{\n    let s = [], n = ze(e, t);\n    for(; n;)s.push(n), n = ze(n, t);\n    return s.reverse(), `/${[\n        ...s,\n        e\n    ].map((a)=>ke((r ? a.route : void 0) ?? a.identifier ?? a.name)).join(\"/\").replace(/^\\//, \"\")}`;\n}, \"createResourceKey\");\nvar An = o((e, t = !1)=>{\n    let r = {\n        item: {\n            name: \"__root__\"\n        },\n        children: {}\n    };\n    e.forEach((n)=>{\n        let i = [], a = ze(n, e);\n        for(; a;)i.push(a), a = ze(a, e);\n        i.reverse();\n        let u = r;\n        i.forEach((p)=>{\n            let l = (t ? p.route : void 0) ?? p.identifier ?? p.name;\n            u.children[l] || (u.children[l] = {\n                item: p,\n                children: {}\n            }), u = u.children[l];\n        });\n        let c = (t ? n.route : void 0) ?? n.identifier ?? n.name;\n        u.children[c] || (u.children[c] = {\n            item: n,\n            children: {}\n        });\n    });\n    let s = o((n)=>{\n        let i = [];\n        return Object.keys(n.children).forEach((a)=>{\n            let u = Ft(n.children[a].item, e, t), c = {\n                ...n.children[a].item,\n                key: u,\n                children: s(n.children[a])\n            };\n            i.push(c);\n        }), i;\n    }, \"flatten\");\n    return s(r);\n}, \"createTree\");\nvar kn = o((e)=>e.split(\"?\")[0].split(\"#\")[0].replace(/(.+)(\\/$)/, \"$1\"), \"getCleanPath\"), zu = o(({ meta: e, hideOnMissingParameter: t = !0 } = {\n    hideOnMissingParameter: !0\n})=>{\n    let r = z(), s = Ut(), n = oe(), { resource: i, resources: a } = q(), { pathname: u } = Te(), { useLocation: c } = pe(), { pathname: p } = c(), l = ht(), y = `/${((n === \"legacy\" ? kn(p) : u ? kn(u) : void 0) ?? \"\").replace(/^\\//, \"\")}`, d = i ? Ft(i, a, n === \"legacy\") : y ?? \"\", T = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        if (!i) return [];\n        let f = ze(i, a), P = [\n            Ft(i, a)\n        ];\n        for(; f;)P.push(Ft(f, a)), f = ze(f, a);\n        return P;\n    }, []), x = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((f)=>{\n        var M, Q, g, C, h, D;\n        if (I((M = f == null ? void 0 : f.meta) == null ? void 0 : M.hide, (Q = f == null ? void 0 : f.options) == null ? void 0 : Q.hide) || !(f != null && f.list) && f.children.length === 0) return;\n        let P = f.list ? s({\n            resource: f,\n            action: \"list\",\n            legacy: n === \"legacy\",\n            meta: e\n        }) : void 0;\n        if (!(t && P && P.match(/(\\/|^):(.+?)(\\/|$){1}/))) return {\n            ...f,\n            route: P,\n            icon: I((g = f.meta) == null ? void 0 : g.icon, (C = f.options) == null ? void 0 : C.icon, f.icon),\n            label: I((h = f == null ? void 0 : f.meta) == null ? void 0 : h.label, (D = f == null ? void 0 : f.options) == null ? void 0 : D.label) ?? r(`${f.name}.${f.name}`, l(f.name, \"plural\"))\n        };\n    }, [\n        n,\n        e,\n        s,\n        r,\n        t\n    ]), v = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        let f = An(a, n === \"legacy\"), P = o((M)=>M.flatMap((Q)=>{\n                let g = P(Q.children), C = x({\n                    ...Q,\n                    children: g\n                });\n                return C ? [\n                    C\n                ] : [];\n            }), \"prepare\");\n        return P(f);\n    }, [\n        a,\n        n,\n        x\n    ]);\n    return {\n        defaultOpenKeys: T,\n        selectedKey: d,\n        menuItems: v\n    };\n}, \"useMenu\");\n\nvar ko = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({}), Zu = o(({ children: e, value: t })=>{\n    let r = Br(), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            ...r,\n            ...t\n        }), [\n        r,\n        t\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ko.Provider, {\n        value: s\n    }, e);\n}, \"MetaContextProvider\"), Br = o(()=>{\n    if (!(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ko)) throw new Error(\"useMetaContext must be used within a MetaContextProvider\");\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ko);\n}, \"useMetaContext\");\nvar ue = o(()=>{\n    let { params: e } = Te(), t = Br();\n    return o(({ resource: s, meta: n } = {})=>{\n        let { meta: i } = kt(s) ?? {\n            meta: {}\n        }, { filters: a, sorters: u, current: c, pageSize: p, ...l } = e ?? {}, m = {\n            ...i,\n            ...l,\n            ...n\n        };\n        return t != null && t.tenantId && (m.tenantId = t.tenantId), m;\n    }, \"getMetaFn\");\n}, \"useMeta\");\n\nvar At = o(()=>{\n    let { options: e } = react__WEBPACK_IMPORTED_MODULE_0__.useContext(Qe);\n    return e;\n}, \"useRefineOptions\");\n\nvar Qn = o((e)=>{\n    let t = oe(), { useParams: r } = pe(), s = Te(), n = r(), i = t === \"legacy\" ? n.id : s.id;\n    return e ?? i;\n}, \"useId\");\nvar Vn = o((e)=>{\n    let t = oe(), { useParams: r } = pe(), s = Te(), n = r(), i = t === \"legacy\" ? n.action : s.action;\n    return e ?? i;\n}, \"useAction\");\nfunction qe(e) {\n    let { select: t, identifier: r } = q(), s = (e == null ? void 0 : e.resource) ?? r, { identifier: n = void 0, resource: i = void 0 } = s ? t(s, !0) : {}, a = r === n, u = Qn(), c = Vn(e == null ? void 0 : e.action), p = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>a ? (e == null ? void 0 : e.id) ?? u : e == null ? void 0 : e.id, [\n        a,\n        e == null ? void 0 : e.id,\n        u\n    ]), [l, m] = react__WEBPACK_IMPORTED_MODULE_0__.useState(p);\n    react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>m(p), [\n        p\n    ]);\n    let y = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>!a && !(e != null && e.action) ? \"create\" : c === \"edit\" || c === \"clone\" ? c : \"create\", [\n        c,\n        a,\n        e == null ? void 0 : e.action\n    ]);\n    return {\n        id: l,\n        setId: m,\n        resource: i,\n        action: c,\n        identifier: n,\n        formAction: y\n    };\n}\no(qe, \"useResourceParams\");\nfunction Gr({ type: e }) {\n    let t = z(), { textTransformers: { humanize: r } } = At(), s = `buttons.${e}`, n = r(e);\n    return {\n        label: t(s, n)\n    };\n}\no(Gr, \"useActionableButton\");\n\n\nvar Or = o((e)=>{\n    var p, l, m;\n    let t = z(), r = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ct), s = ((p = e.accessControl) == null ? void 0 : p.enabled) ?? r.options.buttons.enableAccessControl, n = ((l = e.accessControl) == null ? void 0 : l.hideIfUnauthorized) ?? r.options.buttons.hideIfUnauthorized, { data: i } = kr({\n        resource: (m = e.resource) == null ? void 0 : m.name,\n        action: e.action === \"clone\" ? \"create\" : e.action,\n        params: {\n            id: e.id,\n            resource: e.resource\n        },\n        queryOptions: {\n            enabled: s\n        }\n    }), a = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>i != null && i.can ? \"\" : i != null && i.reason ? i.reason : t(\"buttons.notAccessTitle\", \"You don't have permission to access\"), [\n        i == null ? void 0 : i.can,\n        i == null ? void 0 : i.reason,\n        t\n    ]), u = s && n && !(i != null && i.can), c = (i == null ? void 0 : i.can) === !1;\n    return {\n        title: a,\n        hidden: u,\n        disabled: c,\n        canAccess: i\n    };\n}, \"useButtonCanAccess\");\nfunction Qt(e) {\n    var P;\n    let t = he(), r = oe(), s = yt(), { Link: n } = pe(), i = z(), a = ht(), { textTransformers: { humanize: u } } = At(), { id: c, resource: p, identifier: l } = qe({\n        resource: e.resource,\n        id: e.action === \"create\" ? void 0 : e.id\n    }), { canAccess: m, title: y, hidden: d, disabled: T } = Or({\n        action: e.action,\n        accessControl: e.accessControl,\n        id: c,\n        resource: p\n    }), x = r === \"legacy\" ? n : s, v = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        if (!p) return \"\";\n        switch(e.action){\n            case \"create\":\n            case \"list\":\n                return t[`${e.action}Url`](p, e.meta);\n            default:\n                return c ? t[`${e.action}Url`](p, c, e.meta) : \"\";\n        }\n    }, [\n        p,\n        c,\n        e.meta,\n        t[`${e.action}Url`]\n    ]), f = e.action === \"list\" ? i(`${l ?? e.resource}.titles.list`, a(((P = p == null ? void 0 : p.meta) == null ? void 0 : P.label) ?? (p == null ? void 0 : p.label) ?? l ?? e.resource, \"plural\")) : i(`buttons.${e.action}`, u(e.action));\n    return {\n        to: v,\n        label: f,\n        title: y,\n        disabled: T,\n        hidden: d,\n        canAccess: m,\n        LinkComponent: x\n    };\n}\no(Qt, \"useNavigationButton\");\nfunction qu(e) {\n    let t = z(), { mutate: r, isLoading: s, variables: n } = Po(), { setWarnWhen: i } = vt(), { mutationMode: a } = _e(e.mutationMode), { id: u, resource: c, identifier: p } = qe({\n        resource: e.resource,\n        id: e.id\n    }), { title: l, disabled: m, hidden: y, canAccess: d } = Or({\n        action: \"delete\",\n        accessControl: e.accessControl,\n        id: u,\n        resource: c\n    }), T = t(\"buttons.delete\", \"Delete\"), x = t(\"buttons.delete\", \"Delete\"), v = t(\"buttons.confirm\", \"Are you sure?\"), f = t(\"buttons.cancel\", \"Cancel\"), P = u === (n == null ? void 0 : n.id) && s;\n    return {\n        label: T,\n        title: l,\n        hidden: y,\n        disabled: m,\n        canAccess: d,\n        loading: P,\n        confirmOkLabel: x,\n        cancelLabel: f,\n        confirmTitle: v,\n        onConfirm: o(()=>{\n            u && p && (i(!1), r({\n                id: u,\n                resource: p,\n                mutationMode: a,\n                successNotification: e.successNotification,\n                errorNotification: e.errorNotification,\n                meta: e.meta,\n                metaData: e.meta,\n                dataProviderName: e.dataProviderName,\n                invalidates: e.invalidates\n            }, {\n                onSuccess: e.onSuccess\n            }));\n        }, \"onConfirm\")\n    };\n}\no(qu, \"useDeleteButton\");\n\nfunction tc(e) {\n    let t = z(), { keys: r, preferLegacyKeys: s } = Z(), n = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), i = Ae(), { identifier: a, id: u } = qe({\n        resource: e.resource,\n        id: e.id\n    }), { resources: c } = q(), p = !!n.isFetching({\n        queryKey: r().data(ee(a, e.dataProviderName, c)).resource(a).action(\"one\").get(s)\n    }), l = o(()=>{\n        i({\n            id: u,\n            invalidates: [\n                \"detail\"\n            ],\n            dataProviderName: e.dataProviderName,\n            resource: a\n        });\n    }, \"onClick\"), m = t(\"buttons.refresh\", \"Refresh\");\n    return {\n        onClick: l,\n        label: m,\n        loading: p\n    };\n}\no(tc, \"useRefreshButton\");\nvar Zv = o((e)=>Qt({\n        ...e,\n        action: \"show\"\n    }), \"useShowButton\"), Yv = o((e)=>Qt({\n        ...e,\n        action: \"edit\"\n    }), \"useEditButton\"), Jv = o((e)=>Qt({\n        ...e,\n        action: \"clone\"\n    }), \"useCloneButton\"), qv = o((e)=>Qt({\n        ...e,\n        action: \"create\"\n    }), \"useCreateButton\"), eD = o((e)=>Qt({\n        ...e,\n        action: \"list\"\n    }), \"useListButton\"), tD = o(()=>Gr({\n        type: \"save\"\n    }), \"useSaveButton\"), rD = o(()=>Gr({\n        type: \"export\"\n    }), \"useExportButton\"), oD = o(()=>Gr({\n        type: \"import\"\n    }), \"useImportButton\");\nvar sc = o(()=>{\n    let [e, t] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), r = z(), { push: s } = he(), n = Pe(), i = oe(), { resource: a, action: u } = q();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        a && u && t(r(\"pages.error.info\", {\n            action: u,\n            resource: a.name\n        }, `You may have forgotten to add the \"${u}\" component to \"${a.name}\" resource.`));\n    }, [\n        a,\n        u\n    ]), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", null, r(\"pages.error.404\", void 0, \"Sorry, the page you visited does not exist.\")), e && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"p\", null, e), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        onClick: ()=>{\n            i === \"legacy\" ? s(\"/\") : n({\n                to: \"/\"\n            });\n        }\n    }, r(\"pages.error.backHome\", void 0, \"Back Home\")));\n}, \"ErrorComponent\");\n\nvar Yr = o(()=>{\n    let [e, t] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), [r, s] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), n = z(), i = ie(), { mutate: a } = Ht({\n        v3LegacyAuthProviderCompatible: !!(i != null && i.isLegacy)\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", null, n(\"pages.login.title\", \"Sign in your account\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", {\n        onSubmit: (u)=>{\n            u.preventDefault(), a({\n                username: e,\n                password: r\n            });\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"table\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"tbody\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"tr\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"td\", null, n(\"pages.login.username\", void 0, \"username\"), \":\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"td\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        type: \"text\",\n        size: 20,\n        autoCorrect: \"off\",\n        spellCheck: !1,\n        autoCapitalize: \"off\",\n        autoFocus: !0,\n        required: !0,\n        value: e,\n        onChange: (u)=>t(u.target.value)\n    }))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"tr\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"td\", null, n(\"pages.login.password\", void 0, \"password\"), \":\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"td\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        type: \"password\",\n        required: !0,\n        size: 20,\n        value: r,\n        onChange: (u)=>s(u.target.value)\n    }))))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"br\", null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        type: \"submit\",\n        value: \"login\"\n    })));\n}, \"LoginPage\");\n\n\nvar Kn = o(({ providers: e, registerLink: t, forgotPasswordLink: r, rememberMe: s, contentProps: n, wrapperProps: i, renderContent: a, formProps: u, title: c = void 0, hideForm: p, mutationVariables: l })=>{\n    let m = oe(), y = yt(), { Link: d } = pe(), T = m === \"legacy\" ? d : y, [x, v] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), [f, P] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), [M, Q] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), g = z(), C = ie(), { mutate: h } = Ht({\n        v3LegacyAuthProviderCompatible: !!(C != null && C.isLegacy)\n    }), D = o((L, U)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(T, {\n            to: L\n        }, U), \"renderLink\"), k = o(()=>e ? e.map((L)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n                key: L.name,\n                style: {\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    marginBottom: \"1rem\"\n                }\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n                onClick: ()=>h({\n                        ...l,\n                        providerName: L.name\n                    }),\n                style: {\n                    display: \"flex\",\n                    alignItems: \"center\"\n                }\n            }, L == null ? void 0 : L.icon, L.label ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", null, L.label)))) : null, \"renderProviders\"), E = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...n\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", {\n        style: {\n            textAlign: \"center\"\n        }\n    }, g(\"pages.login.title\", \"Sign in to your account\")), k(), !p && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"hr\", null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", {\n        onSubmit: (L)=>{\n            L.preventDefault(), h({\n                ...l,\n                email: x,\n                password: f,\n                remember: M\n            });\n        },\n        ...u\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            padding: 25\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"email-input\"\n    }, g(\"pages.login.fields.email\", \"Email\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"email-input\",\n        name: \"email\",\n        type: \"text\",\n        size: 20,\n        autoCorrect: \"off\",\n        spellCheck: !1,\n        autoCapitalize: \"off\",\n        required: !0,\n        value: x,\n        onChange: (L)=>v(L.target.value)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"password-input\"\n    }, g(\"pages.login.fields.password\", \"Password\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"password-input\",\n        type: \"password\",\n        name: \"password\",\n        required: !0,\n        size: 20,\n        value: f,\n        onChange: (L)=>P(L.target.value)\n    }), s ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"remember-me-input\"\n    }, g(\"pages.login.buttons.rememberMe\", \"Remember me\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"remember-me-input\",\n        name: \"remember\",\n        type: \"checkbox\",\n        size: 20,\n        checked: M,\n        value: M.toString(),\n        onChange: ()=>{\n            Q(!M);\n        }\n    }))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"br\", null), r ?? D(\"/forgot-password\", g(\"pages.login.buttons.forgotPassword\", \"Forgot password?\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        type: \"submit\",\n        value: g(\"pages.login.signin\", \"Sign in\")\n    }), t ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, g(\"pages.login.buttons.noAccount\", \"Don’t have an account?\"), \" \", D(\"/register\", g(\"pages.login.register\", \"Sign up\")))))), t !== !1 && p && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            textAlign: \"center\"\n        }\n    }, g(\"pages.login.buttons.noAccount\", \"Don’t have an account?\"), \" \", D(\"/register\", g(\"pages.login.register\", \"Sign up\"))));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...i\n    }, a ? a(E, c) : E);\n}, \"LoginPage\");\n\nvar On = o(({ providers: e, loginLink: t, wrapperProps: r, contentProps: s, renderContent: n, formProps: i, title: a = void 0, hideForm: u, mutationVariables: c })=>{\n    let p = oe(), l = yt(), { Link: m } = pe(), y = p === \"legacy\" ? m : l, [d, T] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), [x, v] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), f = z(), P = ie(), { mutate: M, isLoading: Q } = co({\n        v3LegacyAuthProviderCompatible: !!(P != null && P.isLegacy)\n    }), g = o((D, k)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(y, {\n            to: D\n        }, k), \"renderLink\"), C = o(()=>e ? e.map((D)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n                key: D.name,\n                style: {\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    marginBottom: \"1rem\"\n                }\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n                onClick: ()=>M({\n                        ...c,\n                        providerName: D.name\n                    }),\n                style: {\n                    display: \"flex\",\n                    alignItems: \"center\"\n                }\n            }, D == null ? void 0 : D.icon, D.label ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", null, D.label)))) : null, \"renderProviders\"), h = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...s\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", {\n        style: {\n            textAlign: \"center\"\n        }\n    }, f(\"pages.register.title\", \"Sign up for your account\")), C(), !u && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"hr\", null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", {\n        onSubmit: (D)=>{\n            D.preventDefault(), M({\n                ...c,\n                email: d,\n                password: x\n            });\n        },\n        ...i\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            padding: 25\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"email-input\"\n    }, f(\"pages.register.fields.email\", \"Email\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"email-input\",\n        name: \"email\",\n        type: \"email\",\n        size: 20,\n        autoCorrect: \"off\",\n        spellCheck: !1,\n        autoCapitalize: \"off\",\n        required: !0,\n        value: d,\n        onChange: (D)=>T(D.target.value)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"password-input\"\n    }, f(\"pages.register.fields.password\", \"Password\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"password-input\",\n        name: \"password\",\n        type: \"password\",\n        required: !0,\n        size: 20,\n        value: x,\n        onChange: (D)=>v(D.target.value)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        type: \"submit\",\n        value: f(\"pages.register.buttons.submit\", \"Sign up\"),\n        disabled: Q\n    }), t ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, f(\"pages.login.buttons.haveAccount\", \"Have an account?\"), \" \", g(\"/login\", f(\"pages.login.signin\", \"Sign in\"))))))), t !== !1 && u && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            textAlign: \"center\"\n        }\n    }, f(\"pages.login.buttons.haveAccount\", \"Have an account?\"), \" \", g(\"/login\", f(\"pages.login.signin\", \"Sign in\"))));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...r\n    }, n ? n(h, a) : h);\n}, \"RegisterPage\");\n\nvar Wn = o(({ loginLink: e, wrapperProps: t, contentProps: r, renderContent: s, formProps: n, title: i = void 0, mutationVariables: a })=>{\n    let u = z(), c = oe(), p = yt(), { Link: l } = pe(), m = c === \"legacy\" ? l : p, [y, d] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), { mutate: T, isLoading: x } = lo(), v = o((P, M)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(m, {\n            to: P\n        }, M), \"renderLink\"), f = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...r\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", {\n        style: {\n            textAlign: \"center\"\n        }\n    }, u(\"pages.forgotPassword.title\", \"Forgot your password?\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"hr\", null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", {\n        onSubmit: (P)=>{\n            P.preventDefault(), T({\n                ...a,\n                email: y\n            });\n        },\n        ...n\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            padding: 25\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"email-input\"\n    }, u(\"pages.forgotPassword.fields.email\", \"Email\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"email-input\",\n        name: \"email\",\n        type: \"mail\",\n        autoCorrect: \"off\",\n        spellCheck: !1,\n        autoCapitalize: \"off\",\n        required: !0,\n        value: y,\n        onChange: (P)=>d(P.target.value)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        type: \"submit\",\n        disabled: x,\n        value: u(\"pages.forgotPassword.buttons.submit\", \"Send reset instructions\")\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"br\", null), e ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, u(\"pages.register.buttons.haveAccount\", \"Have an account? \"), \" \", v(\"/login\", u(\"pages.login.signin\", \"Sign in\"))))));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...t\n    }, s ? s(f, i) : f);\n}, \"ForgotPasswordPage\");\n\nvar $n = o(({ wrapperProps: e, contentProps: t, renderContent: r, formProps: s, title: n = void 0, mutationVariables: i })=>{\n    let a = z(), u = ie(), { mutate: c, isLoading: p } = fo({\n        v3LegacyAuthProviderCompatible: !!(u != null && u.isLegacy)\n    }), [l, m] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), [y, d] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), T = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...t\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", {\n        style: {\n            textAlign: \"center\"\n        }\n    }, a(\"pages.updatePassword.title\", \"Update Password\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"hr\", null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", {\n        onSubmit: (x)=>{\n            x.preventDefault(), c({\n                ...i,\n                password: l,\n                confirmPassword: y\n            });\n        },\n        ...s\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            padding: 25\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"password-input\"\n    }, a(\"pages.updatePassword.fields.password\", \"New Password\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"password-input\",\n        name: \"password\",\n        type: \"password\",\n        required: !0,\n        size: 20,\n        value: l,\n        onChange: (x)=>m(x.target.value)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"confirm-password-input\"\n    }, a(\"pages.updatePassword.fields.confirmPassword\", \"Confirm New Password\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"confirm-password-input\",\n        name: \"confirmPassword\",\n        type: \"password\",\n        required: !0,\n        size: 20,\n        value: y,\n        onChange: (x)=>d(x.target.value)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        type: \"submit\",\n        disabled: p,\n        value: a(\"pages.updatePassword.buttons.submit\", \"Update\")\n    }))));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...e\n    }, r ? r(T, n) : T);\n}, \"UpdatePasswordPage\");\nvar ac = o((e)=>{\n    let { type: t } = e;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, o(()=>{\n        switch(t){\n            case \"register\":\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(On, {\n                    ...e\n                });\n            case \"forgotPassword\":\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Wn, {\n                    ...e\n                });\n            case \"updatePassword\":\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement($n, {\n                    ...e\n                });\n            default:\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Kn, {\n                    ...e\n                });\n        }\n    }, \"renderView\")());\n}, \"AuthPage\");\n\nvar Qo = o(()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", null, \"Welcome on board\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"p\", null, \"Your configuration is completed.\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"p\", null, \"Now you can get started by adding your resources to the\", \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"code\", null, \"`resources`\"), \" property of \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"code\", null, \"`<Refine>`\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            gap: 8\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        href: \"https://refine.dev\",\n        target: \"_blank\",\n        rel: \"noreferrer\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", null, \"Documentation\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        href: \"https://refine.dev/examples\",\n        target: \"_blank\",\n        rel: \"noreferrer\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", null, \"Examples\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        href: \"https://discord.gg/refine\",\n        target: \"_blank\",\n        rel: \"noreferrer\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", null, \"Community\")))), \"ReadyPage\");\n\n\nvar uc = [\n    {\n        title: \"Documentation\",\n        description: \"Learn about the technical details of using Refine in your projects.\",\n        link: \"https://refine.dev/docs\",\n        iconUrl: \"https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/book.svg\"\n    },\n    {\n        title: \"Tutorial\",\n        description: \"Learn how to use Refine by building a fully-functioning CRUD app, from scratch to full launch.\",\n        link: \"https://refine.dev/tutorial\",\n        iconUrl: \"https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/hat.svg\"\n    },\n    {\n        title: \"Templates\",\n        description: \"Explore a range of pre-built templates, perfect everything from admin panels to dashboards and CRMs.\",\n        link: \"https://refine.dev/templates\",\n        iconUrl: \"https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/application.svg\"\n    },\n    {\n        title: \"Community\",\n        description: \"Join our Discord community and keep up with the latest news.\",\n        link: \"https://discord.gg/refine\",\n        iconUrl: \"https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/discord.svg\"\n    }\n], zn = o(()=>{\n    let e = Pr(\"(max-width: 1010px)\"), t = Pr(\"(max-width: 650px)\"), r = o(()=>t ? \"1, 280px\" : e ? \"2, 280px\" : \"4, 1fr\", \"getGridTemplateColumns\"), s = o(()=>t ? \"32px\" : e ? \"40px\" : \"48px\", \"getHeaderFontSize\"), n = o(()=>t ? \"16px\" : e ? \"20px\" : \"24px\", \"getSubHeaderFontSize\");\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            position: \"fixed\",\n            zIndex: 10,\n            inset: 0,\n            overflow: \"auto\",\n            width: \"100dvw\",\n            height: \"100dvh\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            overflow: \"hidden\",\n            position: \"relative\",\n            backgroundSize: \"cover\",\n            backgroundRepeat: \"no-repeat\",\n            background: t ? \"url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/landing-noise.webp), radial-gradient(88.89% 50% at 50% 100%, rgba(38, 217, 127, 0.10) 0%, rgba(38, 217, 127, 0.00) 100%), radial-gradient(88.89% 50% at 50% 0%, rgba(71, 235, 235, 0.15) 0%, rgba(71, 235, 235, 0.00) 100%), #1D1E30\" : e ? \"url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/landing-noise.webp), radial-gradient(66.67% 50% at 50% 100%, rgba(38, 217, 127, 0.10) 0%, rgba(38, 217, 127, 0.00) 100%), radial-gradient(66.67% 50% at 50% 0%, rgba(71, 235, 235, 0.15) 0%, rgba(71, 235, 235, 0.00) 100%), #1D1E30\" : \"url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/landing-noise.webp), radial-gradient(35.56% 50% at 50% 100%, rgba(38, 217, 127, 0.12) 0%, rgba(38, 217, 127, 0) 100%), radial-gradient(35.56% 50% at 50% 0%, rgba(71, 235, 235, 0.18) 0%, rgba(71, 235, 235, 0) 100%), #1D1E30\",\n            minHeight: \"100%\",\n            minWidth: \"100%\",\n            fontFamily: \"Arial\",\n            color: \"#FFFFFF\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            zIndex: 2,\n            position: \"absolute\",\n            width: t ? \"400px\" : \"800px\",\n            height: \"552px\",\n            opacity: \"0.5\",\n            background: \"url(https://refine.ams3.cdn.digitaloceanspaces.com/assets/welcome-page-hexagon.png)\",\n            backgroundRepeat: \"no-repeat\",\n            backgroundSize: \"contain\",\n            top: \"0\",\n            left: \"50%\",\n            transform: \"translateX(-50%)\"\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            height: t ? \"40px\" : \"80px\"\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            justifyContent: \"center\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            backgroundRepeat: \"no-repeat\",\n            backgroundSize: t ? \"112px 58px\" : \"224px 116px\",\n            backgroundImage: \"url(https://refine.ams3.cdn.digitaloceanspaces.com/assets/refine-logo.svg)\",\n            width: t ? 112 : 224,\n            height: t ? 58 : 116\n        }\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            height: t ? \"120px\" : e ? \"200px\" : \"30vh\",\n            minHeight: t ? \"120px\" : \"200px\"\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: \"16px\",\n            textAlign: \"center\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", {\n        style: {\n            fontSize: s(),\n            fontWeight: 700,\n            margin: \"0px\"\n        }\n    }, \"Welcome Aboard!\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h4\", {\n        style: {\n            fontSize: n(),\n            fontWeight: 400,\n            margin: \"0px\"\n        }\n    }, \"Your configuration is completed.\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            height: \"64px\"\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"grid\",\n            gridTemplateColumns: `repeat(${r()})`,\n            justifyContent: \"center\",\n            gap: \"48px\",\n            paddingRight: \"16px\",\n            paddingLeft: \"16px\",\n            paddingBottom: \"32px\",\n            maxWidth: \"976px\",\n            margin: \"auto\"\n        }\n    }, uc.map((i)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(cc, {\n            key: `welcome-page-${i.title}`,\n            card: i\n        })))));\n}, \"ConfigSuccessPage\"), cc = o(({ card: e })=>{\n    let { title: t, description: r, iconUrl: s, link: n } = e, [i, a] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: \"16px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            alignItems: \"center\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        onPointerEnter: ()=>a(!0),\n        onPointerLeave: ()=>a(!1),\n        style: {\n            display: \"flex\",\n            alignItems: \"center\",\n            color: \"#fff\",\n            textDecoration: \"none\"\n        },\n        href: n\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            width: \"16px\",\n            height: \"16px\",\n            backgroundPosition: \"center\",\n            backgroundSize: \"contain\",\n            backgroundRepeat: \"no-repeat\",\n            backgroundImage: `url(${s})`\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            fontSize: \"16px\",\n            fontWeight: 700,\n            marginLeft: \"13px\",\n            marginRight: \"14px\"\n        }\n    }, t), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        style: {\n            transition: \"transform 0.5s ease-in-out, opacity 0.2s ease-in-out\",\n            ...i && {\n                transform: \"translateX(4px)\",\n                opacity: 1\n            }\n        },\n        width: \"12\",\n        height: \"8\",\n        fill: \"none\",\n        opacity: \"0.5\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M7.293.293a1 1 0 0 1 1.414 0l3 3a1 1 0 0 1 0 1.414l-3 3a1 1 0 0 1-1.414-1.414L8.586 5H1a1 1 0 0 1 0-2h7.586L7.293 1.707a1 1 0 0 1 0-1.414Z\",\n        fill: \"#fff\"\n    })))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            fontSize: \"12px\",\n            opacity: .5,\n            lineHeight: \"16px\"\n        }\n    }, r));\n}, \"Card\");\n\nvar _n = o(()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            position: \"fixed\",\n            zIndex: 11,\n            inset: 0,\n            overflow: \"auto\",\n            width: \"100dvw\",\n            height: \"100dvh\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            padding: \"24px\",\n            background: \"#14141FBF\",\n            backdropFilter: \"blur(3px)\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            maxWidth: \"640px\",\n            width: \"100%\",\n            background: \"#1D1E30\",\n            borderRadius: \"16px\",\n            border: \"1px solid #303450\",\n            boxShadow: \"0px 0px 120px -24px #000000\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            padding: \"16px 20px\",\n            borderBottom: \"1px solid #303450\",\n            display: \"flex\",\n            alignItems: \"center\",\n            gap: \"8px\",\n            position: \"relative\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(dc, {\n        style: {\n            position: \"absolute\",\n            left: 0,\n            top: 0\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            lineHeight: \"24px\",\n            fontSize: \"16px\",\n            color: \"#FFFFFF\",\n            display: \"flex\",\n            alignItems: \"center\",\n            gap: \"16px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(lc, null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            fontWeight: 400\n        }\n    }, \"Configuration Error\"))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            padding: \"20px\",\n            color: \"#A3ADC2\",\n            lineHeight: \"20px\",\n            fontSize: \"14px\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: \"20px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"p\", {\n        style: {\n            margin: 0,\n            padding: 0,\n            lineHeight: \"28px\",\n            fontSize: \"16px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"code\", {\n        style: {\n            display: \"inline-block\",\n            background: \"#30345080\",\n            padding: \"0 4px\",\n            lineHeight: \"24px\",\n            fontSize: \"16px\",\n            borderRadius: \"4px\",\n            color: \"#FFFFFF\"\n        }\n    }, \"<Refine />\"), \" \", \"is not initialized. Please make sure you have it mounted in your app and placed your components inside it.\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(pc, null)))))), \"ConfigErrorPage\"), pc = o(()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"pre\", {\n        style: {\n            display: \"block\",\n            overflowX: \"auto\",\n            borderRadius: \"8px\",\n            fontSize: \"14px\",\n            lineHeight: \"24px\",\n            backgroundColor: \"#14141F\",\n            color: \"#E5ECF2\",\n            padding: \"16px\",\n            margin: \"0\",\n            maxHeight: \"400px\",\n            overflow: \"auto\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#FF7B72\"\n        }\n    }, \"import\"), \" \", \"{\", \" Refine, WelcomePage\", \" \", \"}\", \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#FF7B72\"\n        }\n    }, \"from\"), \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#A5D6FF\"\n        }\n    }, '\"@refinedev/core\"'), \";\", `\n`, `\n`, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#FF7B72\"\n        }\n    }, \"export\"), \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#FF7B72\"\n        }\n    }, \"default\"), \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#FF7B72\"\n        }\n    }, \"function\"), \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#FFA657\"\n        }\n    }, \"App\"), \"(\", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"rgb(222, 147, 95)\"\n        }\n    }), \")\", \" \"), \"{\", `\n`, \"  \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#FF7B72\"\n        }\n    }, \"return\"), \" (\", `\n`, \"    \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#79C0FF\"\n        }\n    }, \"<\", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#79C0FF\"\n        }\n    }, \"Refine\"), `\n`, \"      \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#E5ECF2\",\n            opacity: .6\n        }\n    }, \"// \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, \"...\")), `\n`, \"    \", \">\"), `\n`, \"      \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            opacity: .6\n        }\n    }, \"{\", \"/* ... */\", \"}\"), `\n`, \"      \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#79C0FF\"\n        }\n    }, \"<\", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#79C0FF\"\n        }\n    }, \"WelcomePage\"), \" />\"), `\n`, \"      \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            opacity: .6\n        }\n    }, \"{\", \"/* ... */\", \"}\"), `\n`, \"    \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#79C0FF\"\n        }\n    }, \"</\", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#79C0FF\"\n        }\n    }, \"Refine\"), \">\")), `\n`, \"  \", \");\", `\n`, \"}\"), \"ExampleImplementation\"), dc = o((e)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 204,\n        height: 56,\n        viewBox: \"0 0 204 56\",\n        fill: \"none\",\n        ...e\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-a)\",\n        d: \"M12 0H0v12L12 0Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-b)\",\n        d: \"M28 0h-8L0 20v8L28 0Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-c)\",\n        d: \"M36 0h8L0 44v-8L36 0Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-d)\",\n        d: \"M60 0h-8L0 52v4h4L60 0Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-e)\",\n        d: \"M68 0h8L20 56h-8L68 0Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-f)\",\n        d: \"M92 0h-8L28 56h8L92 0Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-g)\",\n        d: \"M100 0h8L52 56h-8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-h)\",\n        d: \"M124 0h-8L60 56h8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-i)\",\n        d: \"M140 0h-8L76 56h8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-j)\",\n        d: \"M132 0h8L84 56h-8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-k)\",\n        d: \"M156 0h-8L92 56h8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-l)\",\n        d: \"M164 0h8l-56 56h-8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-m)\",\n        d: \"M188 0h-8l-56 56h8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-n)\",\n        d: \"M204 0h-8l-56 56h8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"defs\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-a\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-b\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-c\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-d\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-e\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-f\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-g\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-h\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-i\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-j\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-k\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-l\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-m\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-n\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })))), \"ErrorGradient\"), lc = o((e)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        viewBox: \"0 0 16 16\",\n        fill: \"none\",\n        ...e\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"#FF4C4D\",\n        fillRule: \"evenodd\",\n        d: \"M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16Z\",\n        clipRule: \"evenodd\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"#fff\",\n        fillRule: \"evenodd\",\n        d: \"M7 8a1 1 0 1 0 2 0V5a1 1 0 1 0-2 0v3Zm0 3a1 1 0 1 1 2 0 1 1 0 0 1-2 0Z\",\n        clipRule: \"evenodd\"\n    })), \"ErrorIcon\");\nvar mc = o(()=>{\n    let { __initialized: e } = ge();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(zn, null), !e && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_n, null));\n}, \"WelcomePage\");\n\n\n\n\n\nvar fc = \"4.57.5\", jn = o(()=>{\n    var P;\n    let e = yo(), t = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Et), { liveProvider: r } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(mt), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(er), n = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Jt), { i18nProvider: i } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Xe), a = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(qt), u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ct), { resources: c } = q(), p = ge(), l = !!t.create || !!t.get || !!t.update, m = !!(r != null && r.publish) || !!(r != null && r.subscribe) || !!(r != null && r.unsubscribe), y = !!s.useHistory || !!s.Link || !!s.Prompt || !!s.useLocation || !!s.useParams, d = !!n, T = !!(i != null && i.changeLocale) || !!(i != null && i.getLocale) || !!(i != null && i.translate), x = !!a.close || !!a.open, v = !!u.can, f = (P = p == null ? void 0 : p.options) == null ? void 0 : P.projectId;\n    return {\n        providers: {\n            auth: e,\n            auditLog: l,\n            live: m,\n            router: y,\n            data: d,\n            i18n: T,\n            notification: x,\n            accessControl: v\n        },\n        version: fc,\n        resourceCount: c.length,\n        projectId: f\n    };\n}, \"useTelemetryData\");\nvar yc = o((e)=>{\n    try {\n        let t = JSON.stringify(e || {});\n        return typeof btoa < \"u\" ? btoa(t) : Buffer.from(t).toString(\"base64\");\n    } catch  {\n        return;\n    }\n}, \"encode\"), gc = o((e)=>{\n    let t = new Image;\n    t.src = e;\n}, \"throughImage\"), Tc = o((e)=>{\n    fetch(e);\n}, \"throughFetch\"), xc = o((e)=>{\n    typeof Image < \"u\" ? gc(e) : typeof fetch < \"u\" && Tc(e);\n}, \"transport\"), Zn = o(()=>{\n    let e = jn(), t = react__WEBPACK_IMPORTED_MODULE_0__.useRef(!1);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (t.current) return;\n        let r = yc(e);\n        r && (xc(`https://telemetry.refine.dev/telemetry?payload=${r}`), t.current = !0);\n    }, []), null;\n}, \"Telemetry\");\nvar Yn = o((e)=>{\n    let t = [\n        \"go\",\n        \"parse\",\n        \"back\",\n        \"Link\"\n    ], r = Object.keys(e).filter((n)=>!t.includes(n));\n    return r.length > 0 ? (console.warn(`Unsupported properties are found in \\`routerProvider\\` prop. You provided \\`${r.join(\", \")}\\`. Supported properties are \\`${t.join(\", \")}\\`. You may wanted to use \\`legacyRouterProvider\\` prop instead.`), !0) : !1;\n}, \"checkRouterPropMisuse\");\n\nvar qn = o((e)=>{\n    let t = react__WEBPACK_IMPORTED_MODULE_0__.useRef(!1);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        t.current === !1 && e && Yn(e) && (t.current = !0);\n    }, [\n        e\n    ]);\n}, \"useRouterMisuseWarning\");\nvar Rc = o(({ legacyAuthProvider: e, authProvider: t, dataProvider: r, legacyRouterProvider: s, routerProvider: n, notificationProvider: i, accessControlProvider: a, auditLogProvider: u, resources: c, DashboardPage: p, ReadyPage: l, LoginPage: m, catchAll: y, children: d, liveProvider: T, i18nProvider: x, Title: v, Layout: f, Sider: P, Header: M, Footer: Q, OffLayoutArea: g, onLiveEvent: C, options: h })=>{\n    let { optionsWithDefaults: D, disableTelemetryWithDefault: k, reactQueryWithDefaults: E } = Jr({\n        options: h\n    }), L = Ar(()=>{\n        var b;\n        return E.clientConfig instanceof _tanstack_react_query__WEBPACK_IMPORTED_MODULE_19__.QueryClient ? E.clientConfig : new _tanstack_react_query__WEBPACK_IMPORTED_MODULE_19__.QueryClient({\n            ...E.clientConfig,\n            defaultOptions: {\n                ...E.clientConfig.defaultOptions,\n                queries: {\n                    refetchOnWindowFocus: !1,\n                    keepPreviousData: !0,\n                    ...(b = E.clientConfig.defaultOptions) == null ? void 0 : b.queries\n                }\n            }\n        });\n    }, [\n        E.clientConfig\n    ]);\n    (0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.useQuerySubscription)(L);\n    let w = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>typeof i == \"function\" ? i : ()=>i, [\n        i\n    ])();\n    if (qn(n), s && !n && (c ?? []).length === 0) return l ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(l, null) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Qo, null);\n    let { RouterComponent: N = react__WEBPACK_IMPORTED_MODULE_0__.Fragment } = n ? {} : s ?? {};\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.QueryClientProvider, {\n        client: L\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(cn, {\n        ...w\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Zo, {\n        ...e ?? {},\n        isProvided: !!e\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Jo, {\n        ...t ?? {},\n        isProvided: !!t\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement($s, {\n        dataProvider: r\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_s, {\n        liveProvider: T\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(qs, {\n        value: s && !n ? \"legacy\" : \"new\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(tn, {\n        router: n\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(xn, {\n        ...s\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Zs, {\n        resources: c ?? []\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(dn, {\n        i18nProvider: x\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Pn, {\n        ...a ?? {}\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Mn, {\n        ...u ?? {}\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(an, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(cs, {\n        mutationMode: D.mutationMode,\n        warnWhenUnsavedChanges: D.warnWhenUnsavedChanges,\n        syncWithLocation: D.syncWithLocation,\n        Title: v,\n        undoableTimeout: D.undoableTimeout,\n        catchAll: y,\n        DashboardPage: p,\n        LoginPage: m,\n        Layout: f,\n        Sider: P,\n        Footer: Q,\n        Header: M,\n        OffLayoutArea: g,\n        hasDashboard: !!p,\n        liveMode: D.liveMode,\n        onLiveEvent: C,\n        options: D\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(fs, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(N, null, d, !k && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Zn, null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Vo, null))))))))))))))))));\n}, \"Refine\");\n\nvar un = o(({ notification: e })=>{\n    let t = z(), { notificationDispatch: r } = ut(), { open: s } = He(), [n, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), a = o(()=>{\n        if (e.isRunning === !0 && (e.seconds === 0 && e.doMutation(), e.isSilent || s == null || s({\n            key: `${e.id}-${e.resource}-notification`,\n            type: \"progress\",\n            message: t(\"notifications.undoable\", {\n                seconds: Bt(e.seconds)\n            }, `You have ${Bt(e.seconds)} seconds to undo`),\n            cancelMutation: e.cancelMutation,\n            undoableTimeout: Bt(e.seconds)\n        }), e.seconds > 0)) {\n            n && clearTimeout(n);\n            let u = setTimeout(()=>{\n                r({\n                    type: \"DECREASE_NOTIFICATION_SECOND\",\n                    payload: {\n                        id: e.id,\n                        seconds: e.seconds,\n                        resource: e.resource\n                    }\n                });\n            }, 1e3);\n            i(u);\n        }\n    }, \"cancelNotification\");\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        a();\n    }, [\n        e\n    ]), null;\n}, \"UndoableQueue\");\n\nvar Dc = o(({ children: e, Layout: t, Sider: r, Header: s, Title: n, Footer: i, OffLayoutArea: a })=>{\n    let { Layout: u, Footer: c, Header: p, Sider: l, Title: m, OffLayoutArea: y } = ge();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(t ?? u, {\n        Sider: r ?? l,\n        Header: s ?? p,\n        Footer: i ?? c,\n        Title: n ?? m,\n        OffLayoutArea: a ?? y\n    }, e, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Uc, null));\n}, \"LayoutWrapper\"), Uc = o(()=>{\n    let { Prompt: e } = pe(), t = z(), { warnWhen: r, setWarnWhen: s } = vt(), n = o((i)=>(i.preventDefault(), i.returnValue = t(\"warnWhenUnsavedChanges\", \"Are you sure you want to leave? You have unsaved changes.\"), i.returnValue), \"warnWhenListener\");\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>(r && window.addEventListener(\"beforeunload\", n), window.removeEventListener(\"beforeunload\", n)), [\n        r\n    ]), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(e, {\n        when: r,\n        message: t(\"warnWhenUnsavedChanges\", \"Are you sure you want to leave? You have unsaved changes.\"),\n        setWarnWhen: s\n    });\n}, \"UnsavedPrompt\");\n\nfunction Ec({ redirectOnFail: e = !0, appendCurrentPathToQuery: t = !0, children: r, fallback: s, loading: n, params: i }) {\n    var C;\n    let a = ie(), u = oe(), c = !!(a != null && a.isProvided), p = !!(a != null && a.isLegacy), l = u === \"legacy\", m = Te(), y = Pe(), { useLocation: d } = pe(), T = d(), { isFetching: x, isSuccess: v, data: { authenticated: f, redirectTo: P } = {} } = wr({\n        v3LegacyAuthProviderCompatible: p,\n        params: i\n    }), M = c ? p ? v : f : !0;\n    if (!c) return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, r ?? null);\n    if (x) return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, n ?? null);\n    if (M) return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, r ?? null);\n    if (typeof s < \"u\") return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, s ?? null);\n    let Q = p ? typeof e == \"string\" ? e : \"/login\" : typeof e == \"string\" ? e : P, g = `${l ? T == null ? void 0 : T.pathname : m.pathname}`.replace(/(\\?.*|#.*)$/, \"\");\n    if (Q) {\n        if (l) {\n            let D = t ? `?to=${encodeURIComponent(g)}` : \"\";\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Mc, {\n                to: `${Q}${D}`\n            });\n        }\n        let h = (C = m.params) != null && C.to ? m.params.to : y({\n            to: g,\n            options: {\n                keepQuery: !0\n            },\n            type: \"path\"\n        });\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Lc, {\n            config: {\n                to: Q,\n                query: t && (h ?? \"\").length > 1 ? {\n                    to: h\n                } : void 0,\n                type: \"replace\"\n            }\n        });\n    }\n    return null;\n}\no(Ec, \"Authenticated\");\nvar Lc = o(({ config: e })=>{\n    let t = Pe();\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        t(e);\n    }, [\n        t,\n        e\n    ]), null;\n}, \"Redirect\"), Mc = o(({ to: e })=>{\n    let { replace: t } = he();\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        t(e);\n    }, [\n        t,\n        e\n    ]), null;\n}, \"RedirectLegacy\");\n\nvar Vo = o(()=>{\n    let { useLocation: e } = pe(), { checkAuth: t } = xe(), r = e();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        t == null || t().catch(()=>!1);\n    }, [\n        r == null ? void 0 : r.pathname\n    ]), null;\n}, \"RouteChangeHandler\");\n\nvar Sc = o(({ resource: e, action: t, params: r, fallback: s, onUnauthorized: n, children: i, queryOptions: a, ...u })=>{\n    let { id: c, resource: p, action: l = \"\" } = qe({\n        resource: e,\n        id: r == null ? void 0 : r.id\n    }), m = t ?? l, y = r ?? {\n        id: c,\n        resource: p\n    }, { data: d } = kr({\n        resource: p == null ? void 0 : p.name,\n        action: m,\n        params: y,\n        queryOptions: a\n    });\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        n && (d == null ? void 0 : d.can) === !1 && n({\n            resource: p == null ? void 0 : p.name,\n            action: m,\n            reason: d == null ? void 0 : d.reason,\n            params: y\n        });\n    }, [\n        d == null ? void 0 : d.can\n    ]), d != null && d.can ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(i) ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(i, u) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, i) : (d == null ? void 0 : d.can) === !1 ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, s ?? null) : null;\n}, \"CanAccess\");\n\nvar ta = [\n    `\n    .bg-top-announcement {\n        border-bottom: 1px solid rgba(71, 235, 235, 0.15);\n        background: radial-gradient(\n                218.19% 111.8% at 0% 0%,\n                rgba(71, 235, 235, 0.1) 0%,\n                rgba(71, 235, 235, 0.2) 100%\n            ),\n            #14141f;\n    }\n    `,\n    `\n    .top-announcement-mask {\n        mask-image: url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/hexagon.svg);\n        -webkit-mask-image: url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/hexagon.svg);\n        mask-repeat: repeat;\n        -webkit-mask-repeat: repeat;\n        background: rgba(71, 235, 235, 0.25);\n    }\n    `,\n    `\n    .banner {\n        display: flex;\n        @media (max-width: 1000px) {\n            display: none;\n        }\n    }`,\n    `\n    .gh-link, .gh-link:hover, .gh-link:active, .gh-link:visited, .gh-link:focus {\n        text-decoration: none;\n        z-index: 9;\n    }\n    `,\n    `\n    @keyframes top-announcement-glow {\n        0% {\n            opacity: 1;\n        }\n\n        100% {\n            opacity: 0;\n        }\n    }\n    `\n];\nvar kc = \"If you find Refine useful, you can contribute to its growth by giving it a star on GitHub\", Fc = o(({ containerStyle: e })=>((0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let t = document.createElement(\"style\");\n        document.head.appendChild(t), ta.forEach((r)=>{\n            var s;\n            return (s = t.sheet) == null ? void 0 : s.insertRule(r, t.sheet.cssRules.length);\n        });\n    }, []), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"banner bg-top-announcement\",\n        style: {\n            width: \"100%\",\n            height: \"48px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            position: \"relative\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            paddingLeft: \"200px\",\n            width: \"100%\",\n            maxWidth: \"100vw\",\n            height: \"100%\",\n            borderBottom: \"1px solid #47ebeb26\",\n            ...e\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"top-announcement-mask\",\n        style: {\n            position: \"absolute\",\n            left: 0,\n            top: 0,\n            width: \"100%\",\n            height: \"100%\",\n            borderBottom: \"1px solid #47ebeb26\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            position: \"relative\",\n            width: \"960px\",\n            height: \"100%\",\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            margin: \"0 auto\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            width: \"calc(50% - 300px)\",\n            height: \"100%\",\n            position: \"relative\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Hr, {\n        style: {\n            animationDelay: \"1.5s\",\n            position: \"absolute\",\n            top: \"2px\",\n            right: \"220px\"\n        },\n        id: \"1\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Hr, {\n        style: {\n            animationDelay: \"1s\",\n            position: \"absolute\",\n            top: \"8px\",\n            right: \"100px\",\n            transform: \"rotate(180deg)\"\n        },\n        id: \"2\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ra, {\n        style: {\n            position: \"absolute\",\n            right: \"10px\"\n        },\n        id: \"3\"\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            width: \"calc(50% - 300px)\",\n            height: \"100%\",\n            position: \"relative\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Hr, {\n        style: {\n            animationDelay: \"2s\",\n            position: \"absolute\",\n            top: \"6px\",\n            right: \"180px\",\n            transform: \"rotate(180deg)\"\n        },\n        id: \"4\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Hr, {\n        style: {\n            animationDelay: \"0.5s\",\n            transitionDelay: \"1.3s\",\n            position: \"absolute\",\n            top: \"2px\",\n            right: \"40px\"\n        },\n        id: \"5\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ra, {\n        style: {\n            position: \"absolute\",\n            right: \"-70px\"\n        },\n        id: \"6\"\n    })))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Qc, {\n        text: kc\n    })))), \"GitHubBanner\"), Qc = o(({ text: e })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        className: \"gh-link\",\n        href: \"https://s.refine.dev/github-support\",\n        target: \"_blank\",\n        rel: \"noreferrer\",\n        style: {\n            position: \"absolute\",\n            height: \"100%\",\n            padding: \"0 60px\",\n            display: \"flex\",\n            flexWrap: \"nowrap\",\n            whiteSpace: \"nowrap\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            backgroundImage: \"linear-gradient(90deg, rgba(31, 63, 72, 0.00) 0%, #1F3F48 10%, #1F3F48 90%, rgba(31, 63, 72, 0.00) 100%)\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            color: \"#fff\",\n            display: \"flex\",\n            flexDirection: \"row\",\n            gap: \"8px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n        }\n    }, \"⭐️\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"text\",\n        style: {\n            fontSize: \"16px\",\n            lineHeight: \"24px\"\n        }\n    }, e), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n        }\n    }, \"⭐️\"))), \"Text\"), Hr = o(({ style: e, ...t })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 80,\n        height: 40,\n        fill: \"none\",\n        style: {\n            opacity: 1,\n            animation: \"top-announcement-glow 1s ease-in-out infinite alternate\",\n            ...e\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n        cx: 40,\n        r: 40,\n        fill: `url(#${t.id}-a)`,\n        fillOpacity: .5\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"defs\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: `${t.id}-a`,\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"matrix(0 40 -40 0 40 0)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#47EBEB\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#47EBEB\",\n        stopOpacity: 0\n    })))), \"GlowSmall\"), ra = o(({ style: e, ...t })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 120,\n        height: 48,\n        fill: \"none\",\n        ...t,\n        style: {\n            opacity: 1,\n            animation: \"top-announcement-glow 1s ease-in-out infinite alternate\",\n            ...e\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n        cx: 60,\n        cy: 24,\n        r: 60,\n        fill: `url(#${t.id}-a)`,\n        fillOpacity: .5\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"defs\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: `${t.id}-a`,\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"matrix(0 60 -60 0 60 24)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#47EBEB\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#47EBEB\",\n        stopOpacity: 0\n    })))), \"GlowBig\");\n\nvar Vc = o(({ status: e, elements: { success: t = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement($r, {\n    translationKey: \"autoSave.success\",\n    defaultMessage: \"saved\"\n}), error: r = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement($r, {\n    translationKey: \"autoSave.error\",\n    defaultMessage: \"auto save failure\"\n}), loading: s = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement($r, {\n    translationKey: \"autoSave.loading\",\n    defaultMessage: \"saving...\"\n}), idle: n = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement($r, {\n    translationKey: \"autoSave.idle\",\n    defaultMessage: \"waiting for changes\"\n}) } = {} })=>{\n    switch(e){\n        case \"success\":\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, t);\n        case \"error\":\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, r);\n        case \"loading\":\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, s);\n        default:\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, n);\n    }\n}, \"AutoSaveIndicator\"), $r = o(({ translationKey: e, defaultMessage: t })=>{\n    let r = z();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, r(e, t));\n}, \"Message\");\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/core/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/devtools-internal/dist/index.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@refinedev/devtools-internal/dist/index.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getTrace: () => (/* binding */ p),\n/* harmony export */   getXRay: () => (/* binding */ k),\n/* harmony export */   useQuerySubscription: () => (/* binding */ C)\n/* harmony export */ });\n/* harmony import */ var error_stack_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! error-stack-parser */ \"(ssr)/./node_modules/error-stack-parser/error-stack-parser.js\");\n/* harmony import */ var _refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @refinedev/devtools-shared */ \"(ssr)/./node_modules/@refinedev/devtools-shared/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ getTrace,getXRay,useQuerySubscription auto */ \nvar T = \"renderWithHooks\", y = (r)=>{\n    let e = r.findIndex((n)=>n.functionName === T);\n    return e !== -1 ? r.slice(0, e) : r;\n};\nvar f =  false ? 0 : /\\/refine\\/packages\\/(?<name>.*?)\\//;\nvar d = (r)=>r ? !!r.match(f) : !1;\nvar m = (r)=>{\n    var o;\n    if (!r) return;\n    let e = r.match(f), n = (o = e == null ? void 0 : e.groups) == null ? void 0 : o.name;\n    if (n) return `@refinedev/${n}`;\n};\nfunction p(r) {\n    if (false) {}\n    try {\n        let e = new Error, n = error_stack_parser__WEBPACK_IMPORTED_MODULE_0__.parse(e);\n        return y(n).map((t)=>({\n                file: t.fileName,\n                line: t.lineNumber,\n                column: t.columnNumber,\n                function: t.functionName,\n                isRefine: d(t.fileName),\n                packageName: m(t.fileName)\n            })).filter((t)=>t.function).filter((t)=>!(r != null && r.includes(t.function ?? \"\"))).slice(1);\n    } catch  {\n        return [];\n    }\n}\n\nvar E = (r, e)=>{\n    if (_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.scopes[r] === \"auth\") return null;\n    if (r === \"useCan\") return e ? \"key[1].resource\" : \"key[1]\";\n    if (_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.scopes[r] === \"audit-log\") return r === \"useLog\" ? \"variables.resource\" : \"key[1]\";\n    if (_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.scopes[r] === \"data\") {\n        if (r === \"useCustom\" || r === \"useCustomMutation\") return null;\n        switch(r){\n            case \"useList\":\n            case \"useInfiniteList\":\n            case \"useOne\":\n            case \"useMany\":\n                return e ? \"key[1]\" : \"key[2]\";\n            case \"useCreate\":\n            case \"useCreateMany\":\n            case \"useDelete\":\n            case \"useDeleteMany\":\n            case \"useUpdate\":\n            case \"useUpdateMany\":\n                return \"variables.resource\";\n        }\n    }\n    return null;\n};\nfunction k(r, e, n, o) {\n    if (false) {}\n    let s = p(o).slice(1), t = E(r, e);\n    return {\n        hookName: r,\n        trace: s,\n        resourcePath: t,\n        legacyKey: e,\n        resourceName: n\n    };\n}\n\n\n\nvar l = (r, e)=>{\n    let n = e == null ? void 0 : e.map((s)=>`${s.file}:${s.line}:${s.column}#${s.function}-${s.packageName}-${s.isRefine ? 1 : 0}`);\n    return JSON.stringify([\n        ...r ?? [],\n        ...n ?? []\n    ]);\n};\nvar g = (r)=>(e)=>{\n        var o;\n        if (!((o = e == null ? void 0 : e.meta) != null && o.trace)) return;\n        let n = e == null ? void 0 : e.meta;\n        new Promise((s)=>{\n            var t, a;\n            (0,_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.send)(r, _refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.DevtoolsEvent.ACTIVITY, {\n                type: \"mutation\",\n                identifier: l(e == null ? void 0 : e.options.mutationKey, (t = e == null ? void 0 : e.meta) == null ? void 0 : t.trace),\n                key: e == null ? void 0 : e.options.mutationKey,\n                status: e == null ? void 0 : e.state.status,\n                state: e == null ? void 0 : e.state,\n                variables: (a = e == null ? void 0 : e.state) == null ? void 0 : a.variables,\n                ...n\n            }), s();\n        });\n    }, R = (r)=>(e)=>{\n        var o;\n        if (!((o = e == null ? void 0 : e.meta) != null && o.trace)) return;\n        let n = e == null ? void 0 : e.meta;\n        new Promise((s)=>{\n            var t;\n            (0,_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.send)(r, _refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.DevtoolsEvent.ACTIVITY, {\n                type: \"query\",\n                identifier: l(e.queryKey, (t = e.meta) == null ? void 0 : t.trace),\n                key: e.queryKey,\n                status: e.state.status,\n                state: e.state,\n                ...n\n            }), s();\n        });\n    };\nvar b = {}, x = ()=>b, C =  false ? 0 : (r)=>{\n    let { ws: e } = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.DevToolsContext), n = react__WEBPACK_IMPORTED_MODULE_2__.useRef(), o = react__WEBPACK_IMPORTED_MODULE_2__.useRef();\n    return react__WEBPACK_IMPORTED_MODULE_2__.useEffect(()=>{\n        if (!e) return ()=>0;\n        let s = r.getQueryCache(), t = R(e);\n        return s.getAll().forEach(t), n.current = s.subscribe(({ query: a, type: c })=>(c === \"added\" || c === \"updated\") && t(a)), ()=>{\n            var a;\n            (a = n.current) == null || a.call(n);\n        };\n    }, [\n        e,\n        r\n    ]), react__WEBPACK_IMPORTED_MODULE_2__.useEffect(()=>{\n        if (!e) return ()=>0;\n        let s = r.getMutationCache(), t = g(e);\n        return s.getAll().forEach(t), o.current = s.subscribe(({ mutation: a, type: c })=>(c === \"added\" || c === \"updated\") && t(a)), ()=>{\n            var a;\n            (a = o.current) == null || a.call(o);\n        };\n    }, [\n        e,\n        r\n    ]), react__WEBPACK_IMPORTED_MODULE_2__.useEffect(()=>e ? (0,_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.receive)(e, _refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.DevtoolsEvent.DEVTOOLS_INVALIDATE_QUERY_ACTION, ({ queryKey: t })=>{\n            t && r.invalidateQueries(t);\n        }) : ()=>0, [\n        e,\n        r\n    ]), {};\n};\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9kZXZ0b29scy1pbnRlcm5hbC9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7MkZDRUE7QUFBQSxJQUFNQyxJQUF3QixtQkFFakJDLElBQWNDLENBQUFBO0lBQ3pCLElBQU1DLElBQXNCRCxFQUFNRSxTQUFBLENBQy9CQyxDQUFBQSxJQUFVQSxFQUFNQyxZQUFBLEtBQWlCTjtJQUdwQyxPQUFJRyxNQUF3QixLQUNuQkQsRUFBTUssS0FBQSxDQUFNLEdBQUdKLEtBR2pCRDtBQUNUO0FDZE8sSUFBTU0sSUFDWEMsTUFBbUMsR0FDL0IsQ0FBeUMsR0FDekM7QUNEQyxJQUFNQyxJQUFpQkMsQ0FBQUEsSUFDdkJBLElBSUUsQ0FBQyxDQUZNQSxFQUFTQyxLQUFBLENBQU1KLEtBRlA7QUNEakIsSUFBTUssSUFBOEJGLENBQUFBO0lBRjNDLElBQUFHO0lBR0UsSUFBSSxDQUFDSCxHQUFVO0lBRWYsSUFBTUMsSUFBUUQsRUFBU0MsS0FBQSxDQUFNSixJQUV2Qk8sSUFBQUEsQ0FBT0QsSUFBQUYsS0FBQSxnQkFBQUEsRUFBT0ksTUFBQSxLQUFQLGdCQUFBRixFQUFlQyxJQUFBO0lBRTVCLElBQUtBLEdBRUwsT0FBTyxjQUFjQSxFQUFBQSxDQUN2QjtBQUFBO0FKTk8sU0FBU0UsRUFBU0MsQ0FBQUE7SUFDdkIsSUFBSVQsS0FBbUMsRUFDckMsRUFBUTtJQUVWLElBQUk7UUFDRixJQUFNVSxJQUFRLElBQUlDLE9BQ1psQixJQUFRSCxxREFBaUIsQ0FBTW9CO1FBZ0JyQyxPQWZjbEIsRUFBV0MsR0FFdEJvQixHQUFBLENBQ0VqQixDQUFBQSxJQUNFO2dCQUNDa0IsTUFBTWxCLEVBQU1tQixRQUFBO2dCQUNaQyxNQUFNcEIsRUFBTXFCLFVBQUE7Z0JBQ1pDLFFBQVF0QixFQUFNdUIsWUFBQTtnQkFDZEMsVUFBVXhCLEVBQU1DLFlBQUE7Z0JBQ2hCd0IsVUFBVXBCLEVBQWNMLEVBQU1tQixRQUFRO2dCQUN0Q08sYUFBYWxCLEVBQTJCUixFQUFNbUIsUUFBUTtZQUN4RCxJQUVIUSxNQUFBLENBQVFDLENBQUFBLElBQVVBLEVBQU1KLFFBQVEsRUFDaENHLE1BQUEsQ0FBUUMsQ0FBQUEsSUFBVSxDQUFDZixDQUFBQSxLQUFBLFFBQUFBLEVBQWtCZ0IsUUFBQSxDQUFTRCxFQUFNSixRQUFBLElBQVksTUFDckR0QixLQUFBLENBQU07SUFDdEIsU0FBRTtRQUNBLE9BQU8sRUFDVDtJQUFBO0FBQ0Y7QUt0Qk87QUFBQSxJQUFNNkIsSUFBa0IsQ0FDN0JDLEdBQ0FDO0lBRUEsSUFBSUgsOERBQUFBLENBQU9FLEVBQVEsS0FBTSxRQUN2QixPQUFPO0lBRVQsSUFBSUEsTUFBYSxVQUNmLE9BQUlDLElBQ0ssb0JBRUY7SUFFVCxJQUFJSCw4REFBQUEsQ0FBT0UsRUFBUSxLQUFNLGFBQ3ZCLE9BQUlBLE1BQWEsV0FDUix1QkFFRjtJQUVULElBQUlGLDhEQUFBQSxDQUFPRSxFQUFRLEtBQU0sUUFBUTtRQUMvQixJQUFJQSxNQUFhLGVBQWVBLE1BQWEscUJBQzNDLE9BQU87UUFFVCxPQUFRQTtZQUNOLEtBQUs7WUFDTCxLQUFLO1lBQ0wsS0FBSztZQUNMLEtBQUs7Z0JBQ0gsT0FBSUMsSUFDSyxXQUVGO1lBQ1QsS0FBSztZQUNMLEtBQUs7WUFDTCxLQUFLO1lBQ0wsS0FBSztZQUNMLEtBQUs7WUFDTCxLQUFLO2dCQUNILE9BQU87UUFDWDtJQUFBO0lBRUYsT0FBTztBQUNUO0FDeENPLFNBQVNDLEVBQ2RGLENBQUFBLEVBQ0FDLENBQUFBLEVBQ0FFLENBQUFBLEVBQ0F0QixDQUFBQTtJQUVBLElBQUlULEtBQW1DLEVBQ3JDLEVBS0U7SUFFSixJQUFNd0IsSUFBUWhCLEVBQVNDLEdBQWtCWCxLQUFBLENBQU0sSUFFekNrQyxJQUFlTCxFQUFnQkMsR0FBd0JDO0lBRTdELE9BQU87UUFDTEQsVUFBQUE7UUFDQUosT0FBQUE7UUFDQVEsY0FBQUE7UUFDQUgsV0FBQUE7UUFDQUUsY0FBQUE7SUFDRjtBQUNGO0FDL0JBO0FDTkE7QUNHTztBQUFBLElBQU1RLElBQW1CLENBQzlCQyxHQUNBaEI7SUFFQSxJQUFNaUIsSUFBY2pCLEtBQUEsZ0JBQUFBLEVBQU9YLEdBQUEsQ0FDeEI2QixDQUFBQSxJQUNDLEdBQUdBLEVBQUU1QixJQUFBLElBQVE0QixFQUFFMUIsSUFBQSxJQUFRMEIsRUFBRXhCLE1BQUEsSUFBVXdCLEVBQUV0QixRQUFBLElBQVlzQixFQUFFcEIsV0FBQSxJQUNqRG9CLEVBQUVyQixRQUFBLEdBQVcsSUFBSTtJQUt2QixPQUZZc0IsS0FBS0MsU0FBQSxDQUFVO1dBQUtKLEtBQU8sRUFBQztXQUFRQyxLQUFlLEVBQUc7S0FBQztBQUdyRTtBRFZPLElBQU1JLElBQ1ZDLENBQUFBLElBQW1CQyxDQUFBQTtRQVB0QixJQUFBMUM7UUFRSSxJQUFJLEdBQUNBLElBQUEwQyxLQUFBLGdCQUFBQSxFQUFVQyxJQUFBLEtBQVYsUUFBQTNDLEVBQWdCbUIsS0FBQSxHQUFPO1FBRTVCLElBQU13QixJQUFxQkQsS0FBQSxnQkFBQUEsRUFBVUMsSUFBQTtRQUVyQyxJQUFJQyxRQUFlQyxDQUFBQTtZQVp2QixJQUFBN0MsR0FBQThDO1lBYU1iLGdFQUFBQSxDQUFLUSxHQUFJWixxRUFBQUEsQ0FBY2tCLFFBQUEsRUFBVTtnQkFDL0JDLE1BQU07Z0JBQ05DLFlBQVlmLEVBQ1ZRLEtBQUEsZ0JBQUFBLEVBQVVRLE9BQUEsQ0FBUUMsV0FBQSxHQUNsQm5ELElBQUEwQyxLQUFBLGdCQUFBQSxFQUFVQyxJQUFBLEtBQVYsZ0JBQUEzQyxFQUFnQm1CLEtBQ2xCO2dCQUNBZ0IsS0FBS08sS0FBQSxnQkFBQUEsRUFBVVEsT0FBQSxDQUFRQyxXQUFBO2dCQUN2QkMsUUFBUVYsS0FBQSxnQkFBQUEsRUFBVVcsS0FBQSxDQUFNRCxNQUFBO2dCQUN4QkMsT0FBT1gsS0FBQSxnQkFBQUEsRUFBVVcsS0FBQTtnQkFDakJDLFdBQUEsQ0FBV1IsSUFBQUosS0FBQSxnQkFBQUEsRUFBVVcsS0FBQSxLQUFWLGdCQUFBUCxFQUFpQlEsU0FBQTtnQkFDNUIsR0FBR1gsQ0FDTDtZQUFBLElBQ0FFO1FBQ0Y7SUFDRixHQUVXVSxJQUF1QmQsQ0FBQUEsSUFBbUJlLENBQUFBO1FBN0J2RCxJQUFBeEQ7UUE4QkUsSUFBSSxHQUFDQSxJQUFBd0QsS0FBQSxnQkFBQUEsRUFBT2IsSUFBQSxLQUFQLFFBQUEzQyxFQUFhbUIsS0FBQSxHQUFPO1FBRXpCLElBQU13QixJQUFxQmEsS0FBQSxnQkFBQUEsRUFBT2IsSUFBQTtRQUVsQyxJQUFJQyxRQUFlQyxDQUFBQTtZQWxDckIsSUFBQTdDO1lBbUNJaUMsZ0VBQUFBLENBQUtRLEdBQUlaLHFFQUFBQSxDQUFja0IsUUFBQSxFQUFVO2dCQUMvQkMsTUFBTTtnQkFDTkMsWUFBWWYsRUFBaUJzQixFQUFNQyxRQUFBLEdBQVV6RCxJQUFBd0QsRUFBTWIsSUFBQSxLQUFOLGdCQUFBM0MsRUFBWW1CLEtBQVk7Z0JBQ3JFZ0IsS0FBS3FCLEVBQU1DLFFBQUE7Z0JBQ1hMLFFBQVFJLEVBQU1ILEtBQUEsQ0FBTUQsTUFBQTtnQkFDcEJDLE9BQU9HLEVBQU1ILEtBQUE7Z0JBQ2IsR0FBR1YsQ0FDTDtZQUFBLElBQ0FFO1FBQ0Y7SUFDRjtBRHBDQSxJQUFNYSxJQUFRLENBQUMsR0FDVEMsSUFBTyxJQUFNRCxHQUVORSxJQUNYakUsTUFBbUMsR0FDL0JnRSxDQUFBQSxHQUNDRSxDQUFBQTtJQUNDLElBQU0sRUFBRXBCLElBQUFBLENBQUcsS0FBSVQsaURBQUFBLENBQVdKLHVFQUFBQSxHQUNwQmtDLElBQXlCL0IseUNBQU0sSUFDL0JpQyxJQUE0QmpDLHlDQUFNO0lBRXhDLE9BQUFBLDRDQUFNLENBQVU7UUFDZCxJQUFJLENBQUNVLEdBQUksT0FBTyxJQUFNO1FBRXRCLElBQU15QixJQUFhTCxFQUFZTSxhQUFBLElBRXpCQyxJQUFnQmIsRUFBb0JkO1FBRTFDLE9BQUF5QixFQUFXRyxNQUFBLEdBQVNDLE9BQUEsQ0FBUUYsSUFFNUJOLEVBQXVCUyxPQUFBLEdBQVVMLEVBQVdNLFNBQUEsQ0FDMUMsQ0FBQyxFQUFFaEIsT0FBQUEsQ0FBQUEsRUFBT1IsTUFBQUEsQ0FBSyxNQUNaQSxNQUFTLFdBQVdBLE1BQVMsY0FBY29CLEVBQWNaLEtBR3ZEO1lBbENqQixJQUFBeEQ7WUFtQ1lBLENBQUFBLElBQUE4RCxFQUF1QlMsT0FBQSxLQUF2QixRQUFBdkUsRUFBQXlFLElBQUEsQ0FBQVg7UUFDRjtJQUNGLEdBQUc7UUFBQ3JCO1FBQUlvQjtLQUFZLEdBRXBCOUIsNENBQU0sQ0FBVTtRQUNkLElBQUksQ0FBQ1UsR0FBSSxPQUFPLElBQU07UUFFdEIsSUFBTWlDLElBQWdCYixFQUFZYyxnQkFBQSxJQUU1QkMsSUFBbUJwQyxFQUF1QkM7UUFFaEQsT0FBQWlDLEVBQWNMLE1BQUEsR0FBU0MsT0FBQSxDQUFRTSxJQUUvQlosRUFBMEJPLE9BQUEsR0FBVUcsRUFBY0YsU0FBQSxDQUNoRCxDQUFDLEVBQUU5QixVQUFBQSxDQUFBQSxFQUFVTSxNQUFBQSxDQUFLLE1BQ2ZBLE1BQVMsV0FBV0EsTUFBUyxjQUM5QjRCLEVBQWlCbEMsS0FHZDtZQXREakIsSUFBQTFDO1lBdURZQSxDQUFBQSxJQUFBZ0UsRUFBMEJPLE9BQUEsS0FBMUIsUUFBQXZFLEVBQUF5RSxJQUFBLENBQUFUO1FBQ0Y7SUFDRixHQUFHO1FBQUN2QjtRQUFJb0I7S0FBWSxHQUVwQjlCLDRDQUFNLENBQVUsSUFDVFUsSUFFTVgsbUVBQUFBLENBQ1RXLEdBQ0FaLHFFQUFDQSxDQUFhZ0QsZ0NBQUEsRUFDZCxDQUFDLEVBQUVwQixVQUFBQSxDQUFTO1lBQ05BLEtBQ0ZJLEVBQVlpQixpQkFBQSxDQUFrQnJCO1FBRWxDLEtBVGMsSUFBTSxHQWFyQjtRQUFDaEI7UUFBSW9CO0tBQVksR0FFYixDQUFDO0FBQ1Y7QUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JlZmluZS1wcm9qZWN0Ly4uL3NyYy9nZXQtdHJhY2UudHM/MDJiNyIsIndlYnBhY2s6Ly9yZWZpbmUtcHJvamVjdC8uLi9zcmMvY2xlYW4tc3RhY2sudHM/MTVjZCIsIndlYnBhY2s6Ly9yZWZpbmUtcHJvamVjdC8uLi9zcmMvY29uc3RhbnRzLnRzP2IxM2UiLCJ3ZWJwYWNrOi8vcmVmaW5lLXByb2plY3QvLi4vc3JjL2lzLXJlZmluZS1zdGFjay50cz9kYjlmIiwid2VicGFjazovL3JlZmluZS1wcm9qZWN0Ly4uL3NyYy9nZXQtcGFja2FnZS1uYW1lLWZyb20tZmlsZW5hbWUudHM/YjM4YyIsIndlYnBhY2s6Ly9yZWZpbmUtcHJvamVjdC8uLi9zcmMvZ2V0LXJlc291cmNlLXBhdGgudHM/Yzg2NSIsIndlYnBhY2s6Ly9yZWZpbmUtcHJvamVjdC8uLi9zcmMvZ2V0LXhyYXkudHM/ZjY2NSIsIndlYnBhY2s6Ly9yZWZpbmUtcHJvamVjdC8uLi9zcmMvdXNlLXF1ZXJ5LXN1YnNjcmlwdGlvbi50c3g/MWNmMCIsIndlYnBhY2s6Ly9yZWZpbmUtcHJvamVjdC8uLi9zcmMvbGlzdGVuZXJzLnRzPzg0ZDgiLCJ3ZWJwYWNrOi8vcmVmaW5lLXByb2plY3QvLi4vc3JjL2NyZWF0ZS1pZGVudGlmaWVyLnRzPzY2ZWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEVycm9yU3RhY2tQYXJzZXIgZnJvbSBcImVycm9yLXN0YWNrLXBhcnNlclwiO1xuaW1wb3J0IHsgY2xlYW5TdGFjayB9IGZyb20gXCIuL2NsZWFuLXN0YWNrXCI7XG5pbXBvcnQgeyBpc1JlZmluZVN0YWNrIH0gZnJvbSBcIi4vaXMtcmVmaW5lLXN0YWNrXCI7XG5pbXBvcnQgeyBnZXRQYWNrYWdlTmFtZUZyb21GaWxlbmFtZSB9IGZyb20gXCIuL2dldC1wYWNrYWdlLW5hbWUtZnJvbS1maWxlbmFtZVwiO1xuaW1wb3J0IHR5cGUgeyBUcmFjZVR5cGUgfSBmcm9tIFwiQHJlZmluZWRldi9kZXZ0b29scy1zaGFyZWRcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRyYWNlKGV4Y2x1ZGVGcm9tVHJhY2U/OiBzdHJpbmdbXSkge1xuICBpZiAoX19ERVZfQ09ORElUSU9OX18gIT09IFwiZGV2ZWxvcG1lbnRcIikge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICB0cnkge1xuICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKCk7XG4gICAgY29uc3Qgc3RhY2sgPSBFcnJvclN0YWNrUGFyc2VyLnBhcnNlKGVycm9yKTtcbiAgICBjb25zdCBjbGVhbiA9IGNsZWFuU3RhY2soc3RhY2spO1xuICAgIGNvbnN0IHRyYWNlcyA9IGNsZWFuXG4gICAgICAubWFwKFxuICAgICAgICAoZnJhbWUpID0+XG4gICAgICAgICAgKHtcbiAgICAgICAgICAgIGZpbGU6IGZyYW1lLmZpbGVOYW1lLFxuICAgICAgICAgICAgbGluZTogZnJhbWUubGluZU51bWJlcixcbiAgICAgICAgICAgIGNvbHVtbjogZnJhbWUuY29sdW1uTnVtYmVyLFxuICAgICAgICAgICAgZnVuY3Rpb246IGZyYW1lLmZ1bmN0aW9uTmFtZSxcbiAgICAgICAgICAgIGlzUmVmaW5lOiBpc1JlZmluZVN0YWNrKGZyYW1lLmZpbGVOYW1lKSxcbiAgICAgICAgICAgIHBhY2thZ2VOYW1lOiBnZXRQYWNrYWdlTmFtZUZyb21GaWxlbmFtZShmcmFtZS5maWxlTmFtZSksXG4gICAgICAgICAgfSkgYXMgVHJhY2VUeXBlLFxuICAgICAgKVxuICAgICAgLmZpbHRlcigodHJhY2UpID0+IHRyYWNlLmZ1bmN0aW9uKVxuICAgICAgLmZpbHRlcigodHJhY2UpID0+ICFleGNsdWRlRnJvbVRyYWNlPy5pbmNsdWRlcyh0cmFjZS5mdW5jdGlvbiA/PyBcIlwiKSk7XG4gICAgcmV0dXJuIHRyYWNlcy5zbGljZSgxKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbn1cbiIsImltcG9ydCB0eXBlIHsgU3RhY2tGcmFtZSB9IGZyb20gXCJlcnJvci1zdGFjay1wYXJzZXJcIjtcblxuY29uc3QgdW5yZWxhdGVkRnVuY3Rpb25OYW1lID0gXCJyZW5kZXJXaXRoSG9va3NcIjtcblxuZXhwb3J0IGNvbnN0IGNsZWFuU3RhY2sgPSAoc3RhY2s6IFN0YWNrRnJhbWVbXSkgPT4ge1xuICBjb25zdCBmaXJzdFVucmVsYXRlZEluZGV4ID0gc3RhY2suZmluZEluZGV4KFxuICAgIChmcmFtZSkgPT4gZnJhbWUuZnVuY3Rpb25OYW1lID09PSB1bnJlbGF0ZWRGdW5jdGlvbk5hbWUsXG4gICk7XG5cbiAgaWYgKGZpcnN0VW5yZWxhdGVkSW5kZXggIT09IC0xKSB7XG4gICAgcmV0dXJuIHN0YWNrLnNsaWNlKDAsIGZpcnN0VW5yZWxhdGVkSW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHN0YWNrO1xufTtcbiIsImV4cG9ydCBjb25zdCBSRUZJTkVfUEFDS0FHRV9GSUxFUEFUSF9SRUdFWFAgPVxuICBfX0RFVl9DT05ESVRJT05fXyAhPT0gXCJkZXZlbG9wbWVudFwiXG4gICAgPyAvbm9kZV9tb2R1bGVzXFwvcmVmaW5lZGV2XFwvKD88bmFtZT4uKj8pXFwvL1xuICAgIDogL1xcL3JlZmluZVxcL3BhY2thZ2VzXFwvKD88bmFtZT4uKj8pXFwvLztcbiIsImltcG9ydCB7IFJFRklORV9QQUNLQUdFX0ZJTEVQQVRIX1JFR0VYUCB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuXG5leHBvcnQgY29uc3QgaXNSZWZpbmVTdGFjayA9IChmaWxlbmFtZT86IHN0cmluZykgPT4ge1xuICBpZiAoIWZpbGVuYW1lKSByZXR1cm4gZmFsc2U7XG5cbiAgY29uc3QgbWF0Y2ggPSBmaWxlbmFtZS5tYXRjaChSRUZJTkVfUEFDS0FHRV9GSUxFUEFUSF9SRUdFWFApO1xuXG4gIHJldHVybiAhIW1hdGNoO1xufTtcbiIsImltcG9ydCB7IFJFRklORV9QQUNLQUdFX0ZJTEVQQVRIX1JFR0VYUCB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuXG5leHBvcnQgY29uc3QgZ2V0UGFja2FnZU5hbWVGcm9tRmlsZW5hbWUgPSAoZmlsZW5hbWU/OiBzdHJpbmcpID0+IHtcbiAgaWYgKCFmaWxlbmFtZSkgcmV0dXJuO1xuXG4gIGNvbnN0IG1hdGNoID0gZmlsZW5hbWUubWF0Y2goUkVGSU5FX1BBQ0tBR0VfRklMRVBBVEhfUkVHRVhQKTtcblxuICBjb25zdCBuYW1lID0gbWF0Y2g/Lmdyb3Vwcz8ubmFtZTtcblxuICBpZiAoIW5hbWUpIHJldHVybjtcblxuICByZXR1cm4gYEByZWZpbmVkZXYvJHtuYW1lfWA7XG59O1xuIiwiaW1wb3J0IHtcbiAgdHlwZSBEZXZ0b29sc0V2ZW50LFxuICB0eXBlIERldnRvb2xzRXZlbnRQYXlsb2FkcyxcbiAgdHlwZSBSZWZpbmVIb29rLFxuICBzY29wZXMsXG59IGZyb20gXCJAcmVmaW5lZGV2L2RldnRvb2xzLXNoYXJlZFwiO1xuXG5leHBvcnQgdHlwZSBBY3Rpdml0eSA9XG4gIERldnRvb2xzRXZlbnRQYXlsb2Fkc1tEZXZ0b29sc0V2ZW50LkRFVlRPT0xTX0FDVElWSVRZX1VQREFURV1bXCJ1cGRhdGVkQWN0aXZpdGllc1wiXVtudW1iZXJdO1xuXG5leHBvcnQgY29uc3QgZ2V0UmVzb3VyY2VQYXRoID0gKFxuICBob29rTmFtZTogUmVmaW5lSG9vayxcbiAgbGVnYWN5S2V5OiBib29sZWFuLFxuKTogc3RyaW5nIHwgbnVsbCA9PiB7XG4gIGlmIChzY29wZXNbaG9va05hbWVdID09PSBcImF1dGhcIikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChob29rTmFtZSA9PT0gXCJ1c2VDYW5cIikge1xuICAgIGlmIChsZWdhY3lLZXkpIHtcbiAgICAgIHJldHVybiBcImtleVsxXS5yZXNvdXJjZVwiO1xuICAgIH1cbiAgICByZXR1cm4gXCJrZXlbMV1cIjtcbiAgfVxuICBpZiAoc2NvcGVzW2hvb2tOYW1lXSA9PT0gXCJhdWRpdC1sb2dcIikge1xuICAgIGlmIChob29rTmFtZSA9PT0gXCJ1c2VMb2dcIikge1xuICAgICAgcmV0dXJuIFwidmFyaWFibGVzLnJlc291cmNlXCI7XG4gICAgfVxuICAgIHJldHVybiBcImtleVsxXVwiO1xuICB9XG4gIGlmIChzY29wZXNbaG9va05hbWVdID09PSBcImRhdGFcIikge1xuICAgIGlmIChob29rTmFtZSA9PT0gXCJ1c2VDdXN0b21cIiB8fCBob29rTmFtZSA9PT0gXCJ1c2VDdXN0b21NdXRhdGlvblwiKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgc3dpdGNoIChob29rTmFtZSkge1xuICAgICAgY2FzZSBcInVzZUxpc3RcIjpcbiAgICAgIGNhc2UgXCJ1c2VJbmZpbml0ZUxpc3RcIjpcbiAgICAgIGNhc2UgXCJ1c2VPbmVcIjpcbiAgICAgIGNhc2UgXCJ1c2VNYW55XCI6XG4gICAgICAgIGlmIChsZWdhY3lLZXkpIHtcbiAgICAgICAgICByZXR1cm4gXCJrZXlbMV1cIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJrZXlbMl1cIjtcbiAgICAgIGNhc2UgXCJ1c2VDcmVhdGVcIjpcbiAgICAgIGNhc2UgXCJ1c2VDcmVhdGVNYW55XCI6XG4gICAgICBjYXNlIFwidXNlRGVsZXRlXCI6XG4gICAgICBjYXNlIFwidXNlRGVsZXRlTWFueVwiOlxuICAgICAgY2FzZSBcInVzZVVwZGF0ZVwiOlxuICAgICAgY2FzZSBcInVzZVVwZGF0ZU1hbnlcIjpcbiAgICAgICAgcmV0dXJuIFwidmFyaWFibGVzLnJlc291cmNlXCI7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufTtcbiIsImltcG9ydCB0eXBlIHsgUmVmaW5lSG9vaywgVHJhY2VUeXBlIH0gZnJvbSBcIkByZWZpbmVkZXYvZGV2dG9vbHMtc2hhcmVkXCI7XG5pbXBvcnQgeyBnZXRUcmFjZSB9IGZyb20gXCIuL2dldC10cmFjZVwiO1xuaW1wb3J0IHsgZ2V0UmVzb3VyY2VQYXRoIH0gZnJvbSBcIi4vZ2V0LXJlc291cmNlLXBhdGhcIjtcblxuZXhwb3J0IHR5cGUgWFJheVJlc3BvbnNlID0ge1xuICBob29rTmFtZTogc3RyaW5nO1xuICB0cmFjZTogVHJhY2VUeXBlW107XG4gIHJlc291cmNlUGF0aDogc3RyaW5nIHwgbnVsbDtcbiAgbGVnYWN5S2V5OiBib29sZWFuO1xuICByZXNvdXJjZU5hbWU/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0WFJheShcbiAgaG9va05hbWU6IHN0cmluZyxcbiAgbGVnYWN5S2V5OiBib29sZWFuLFxuICByZXNvdXJjZU5hbWU/OiBzdHJpbmcsXG4gIGV4Y2x1ZGVGcm9tVHJhY2U/OiBzdHJpbmdbXSxcbik6IFhSYXlSZXNwb25zZSB7XG4gIGlmIChfX0RFVl9DT05ESVRJT05fXyAhPT0gXCJkZXZlbG9wbWVudFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhvb2tOYW1lOiBcIlwiLFxuICAgICAgdHJhY2U6IFtdLFxuICAgICAgcmVzb3VyY2VQYXRoOiBudWxsLFxuICAgICAgbGVnYWN5S2V5OiBmYWxzZSxcbiAgICB9O1xuICB9XG4gIGNvbnN0IHRyYWNlID0gZ2V0VHJhY2UoZXhjbHVkZUZyb21UcmFjZSkuc2xpY2UoMSk7XG5cbiAgY29uc3QgcmVzb3VyY2VQYXRoID0gZ2V0UmVzb3VyY2VQYXRoKGhvb2tOYW1lIGFzIFJlZmluZUhvb2ssIGxlZ2FjeUtleSk7XG5cbiAgcmV0dXJuIHtcbiAgICBob29rTmFtZSxcbiAgICB0cmFjZSxcbiAgICByZXNvdXJjZVBhdGgsXG4gICAgbGVnYWN5S2V5LFxuICAgIHJlc291cmNlTmFtZSxcbiAgfTtcbn1cbiIsImltcG9ydCB7XG4gIERldlRvb2xzQ29udGV4dCxcbiAgRGV2dG9vbHNFdmVudCxcbiAgcmVjZWl2ZSxcbn0gZnJvbSBcIkByZWZpbmVkZXYvZGV2dG9vbHMtc2hhcmVkXCI7XG5pbXBvcnQgdHlwZSB7IFF1ZXJ5Q2xpZW50IH0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGNyZWF0ZVF1ZXJ5TGlzdGVuZXIsIGNyZWF0ZU11dGF0aW9uTGlzdGVuZXIgfSBmcm9tIFwiLi9saXN0ZW5lcnNcIjtcblxuY29uc3QgZW1wdHkgPSB7fTtcbmNvbnN0IG5vb3AgPSAoKSA9PiBlbXB0eTtcblxuZXhwb3J0IGNvbnN0IHVzZVF1ZXJ5U3Vic2NyaXB0aW9uID1cbiAgX19ERVZfQ09ORElUSU9OX18gIT09IFwiZGV2ZWxvcG1lbnRcIlxuICAgID8gbm9vcFxuICAgIDogKHF1ZXJ5Q2xpZW50OiBRdWVyeUNsaWVudCkgPT4ge1xuICAgICAgICBjb25zdCB7IHdzIH0gPSB1c2VDb250ZXh0KERldlRvb2xzQ29udGV4dCk7XG4gICAgICAgIGNvbnN0IHF1ZXJ5Q2FjaGVTdWJzY3JpcHRpb24gPSBSZWFjdC51c2VSZWY8KCkgPT4gdm9pZD4oKTtcbiAgICAgICAgY29uc3QgbXV0YXRpb25DYWNoZVN1YnNjcmlwdGlvbiA9IFJlYWN0LnVzZVJlZjwoKSA9PiB2b2lkPigpO1xuXG4gICAgICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgaWYgKCF3cykgcmV0dXJuICgpID0+IDA7XG5cbiAgICAgICAgICBjb25zdCBxdWVyeUNhY2hlID0gcXVlcnlDbGllbnQuZ2V0UXVlcnlDYWNoZSgpO1xuXG4gICAgICAgICAgY29uc3QgcXVlcnlMaXN0ZW5lciA9IGNyZWF0ZVF1ZXJ5TGlzdGVuZXIod3MpO1xuXG4gICAgICAgICAgcXVlcnlDYWNoZS5nZXRBbGwoKS5mb3JFYWNoKHF1ZXJ5TGlzdGVuZXIpO1xuXG4gICAgICAgICAgcXVlcnlDYWNoZVN1YnNjcmlwdGlvbi5jdXJyZW50ID0gcXVlcnlDYWNoZS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAoeyBxdWVyeSwgdHlwZSB9KSA9PlxuICAgICAgICAgICAgICAodHlwZSA9PT0gXCJhZGRlZFwiIHx8IHR5cGUgPT09IFwidXBkYXRlZFwiKSAmJiBxdWVyeUxpc3RlbmVyKHF1ZXJ5KSxcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHF1ZXJ5Q2FjaGVTdWJzY3JpcHRpb24uY3VycmVudD8uKCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSwgW3dzLCBxdWVyeUNsaWVudF0pO1xuXG4gICAgICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgaWYgKCF3cykgcmV0dXJuICgpID0+IDA7XG5cbiAgICAgICAgICBjb25zdCBtdXRhdGlvbkNhY2hlID0gcXVlcnlDbGllbnQuZ2V0TXV0YXRpb25DYWNoZSgpO1xuXG4gICAgICAgICAgY29uc3QgbXV0YXRpb25MaXN0ZW5lciA9IGNyZWF0ZU11dGF0aW9uTGlzdGVuZXIod3MpO1xuXG4gICAgICAgICAgbXV0YXRpb25DYWNoZS5nZXRBbGwoKS5mb3JFYWNoKG11dGF0aW9uTGlzdGVuZXIpO1xuXG4gICAgICAgICAgbXV0YXRpb25DYWNoZVN1YnNjcmlwdGlvbi5jdXJyZW50ID0gbXV0YXRpb25DYWNoZS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAoeyBtdXRhdGlvbiwgdHlwZSB9KSA9PlxuICAgICAgICAgICAgICAodHlwZSA9PT0gXCJhZGRlZFwiIHx8IHR5cGUgPT09IFwidXBkYXRlZFwiKSAmJlxuICAgICAgICAgICAgICBtdXRhdGlvbkxpc3RlbmVyKG11dGF0aW9uKSxcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIG11dGF0aW9uQ2FjaGVTdWJzY3JpcHRpb24uY3VycmVudD8uKCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSwgW3dzLCBxdWVyeUNsaWVudF0pO1xuXG4gICAgICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgaWYgKCF3cykgcmV0dXJuICgpID0+IDA7XG5cbiAgICAgICAgICBjb25zdCBjYiA9IHJlY2VpdmUoXG4gICAgICAgICAgICB3cyxcbiAgICAgICAgICAgIERldnRvb2xzRXZlbnQuREVWVE9PTFNfSU5WQUxJREFURV9RVUVSWV9BQ1RJT04sXG4gICAgICAgICAgICAoeyBxdWVyeUtleSB9KSA9PiB7XG4gICAgICAgICAgICAgIGlmIChxdWVyeUtleSkge1xuICAgICAgICAgICAgICAgIHF1ZXJ5Q2xpZW50LmludmFsaWRhdGVRdWVyaWVzKHF1ZXJ5S2V5KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgcmV0dXJuIGNiO1xuICAgICAgICB9LCBbd3MsIHF1ZXJ5Q2xpZW50XSk7XG5cbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfTtcbiIsImltcG9ydCB7IERldnRvb2xzRXZlbnQsIHNlbmQgfSBmcm9tIFwiQHJlZmluZWRldi9kZXZ0b29scy1zaGFyZWRcIjtcbmltcG9ydCB0eXBlIHsgTXV0YXRpb24sIFF1ZXJ5IH0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiO1xuXG5pbXBvcnQgeyBjcmVhdGVJZGVudGlmaWVyIH0gZnJvbSBcIi4vY3JlYXRlLWlkZW50aWZpZXJcIjtcbmltcG9ydCB0eXBlIHsgWFJheVJlc3BvbnNlIH0gZnJvbSBcIi4vZ2V0LXhyYXlcIjtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZU11dGF0aW9uTGlzdGVuZXIgPVxuICAod3M6IFdlYlNvY2tldCkgPT4gKG11dGF0aW9uPzogTXV0YXRpb24pID0+IHtcbiAgICBpZiAoIW11dGF0aW9uPy5tZXRhPy50cmFjZSkgcmV0dXJuO1xuXG4gICAgY29uc3QgbWV0YTogWFJheVJlc3BvbnNlID0gbXV0YXRpb24/Lm1ldGEgYXMgYW55O1xuXG4gICAgbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUpID0+IHtcbiAgICAgIHNlbmQod3MsIERldnRvb2xzRXZlbnQuQUNUSVZJVFksIHtcbiAgICAgICAgdHlwZTogXCJtdXRhdGlvblwiLFxuICAgICAgICBpZGVudGlmaWVyOiBjcmVhdGVJZGVudGlmaWVyKFxuICAgICAgICAgIG11dGF0aW9uPy5vcHRpb25zLm11dGF0aW9uS2V5LFxuICAgICAgICAgIG11dGF0aW9uPy5tZXRhPy50cmFjZSBhcyBhbnksXG4gICAgICAgICksXG4gICAgICAgIGtleTogbXV0YXRpb24/Lm9wdGlvbnMubXV0YXRpb25LZXkgYXMgYW55LFxuICAgICAgICBzdGF0dXM6IG11dGF0aW9uPy5zdGF0ZS5zdGF0dXMsXG4gICAgICAgIHN0YXRlOiBtdXRhdGlvbj8uc3RhdGUsXG4gICAgICAgIHZhcmlhYmxlczogbXV0YXRpb24/LnN0YXRlPy52YXJpYWJsZXMsXG4gICAgICAgIC4uLm1ldGEsXG4gICAgICB9KTtcbiAgICAgIHJlc29sdmUoKTtcbiAgICB9KTtcbiAgfTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVF1ZXJ5TGlzdGVuZXIgPSAod3M6IFdlYlNvY2tldCkgPT4gKHF1ZXJ5OiBRdWVyeSkgPT4ge1xuICBpZiAoIXF1ZXJ5Py5tZXRhPy50cmFjZSkgcmV0dXJuO1xuXG4gIGNvbnN0IG1ldGE6IFhSYXlSZXNwb25zZSA9IHF1ZXJ5Py5tZXRhIGFzIGFueTtcblxuICBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSkgPT4ge1xuICAgIHNlbmQod3MsIERldnRvb2xzRXZlbnQuQUNUSVZJVFksIHtcbiAgICAgIHR5cGU6IFwicXVlcnlcIixcbiAgICAgIGlkZW50aWZpZXI6IGNyZWF0ZUlkZW50aWZpZXIocXVlcnkucXVlcnlLZXksIHF1ZXJ5Lm1ldGE/LnRyYWNlIGFzIGFueSksXG4gICAgICBrZXk6IHF1ZXJ5LnF1ZXJ5S2V5IGFzIGFueSxcbiAgICAgIHN0YXR1czogcXVlcnkuc3RhdGUuc3RhdHVzLFxuICAgICAgc3RhdGU6IHF1ZXJ5LnN0YXRlLFxuICAgICAgLi4ubWV0YSxcbiAgICB9KTtcbiAgICByZXNvbHZlKCk7XG4gIH0pO1xufTtcbiIsImltcG9ydCB0eXBlIHsgVHJhY2VUeXBlIH0gZnJvbSBcIkByZWZpbmVkZXYvZGV2dG9vbHMtc2hhcmVkXCI7XG5pbXBvcnQgdHlwZSB7IE11dGF0aW9uS2V5LCBRdWVyeUtleSB9IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIjtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUlkZW50aWZpZXIgPSAoXG4gIGtleT86IFF1ZXJ5S2V5IHwgTXV0YXRpb25LZXksXG4gIHRyYWNlPzogVHJhY2VUeXBlW10sXG4pID0+IHtcbiAgY29uc3Qgc2ltcGxlVHJhY2UgPSB0cmFjZT8ubWFwKFxuICAgICh0KSA9PlxuICAgICAgYCR7dC5maWxlfToke3QubGluZX06JHt0LmNvbHVtbn0jJHt0LmZ1bmN0aW9ufS0ke3QucGFja2FnZU5hbWV9LSR7XG4gICAgICAgIHQuaXNSZWZpbmUgPyAxIDogMFxuICAgICAgfWAsXG4gICk7XG4gIGNvbnN0IHN0ciA9IEpTT04uc3RyaW5naWZ5KFsuLi4oa2V5ID8/IFtdKSwgLi4uKHNpbXBsZVRyYWNlID8/IFtdKV0pO1xuXG4gIHJldHVybiBzdHI7XG59O1xuIl0sIm5hbWVzIjpbIkVycm9yU3RhY2tQYXJzZXIiLCJ1bnJlbGF0ZWRGdW5jdGlvbk5hbWUiLCJjbGVhblN0YWNrIiwic3RhY2siLCJmaXJzdFVucmVsYXRlZEluZGV4IiwiZmluZEluZGV4IiwiZnJhbWUiLCJmdW5jdGlvbk5hbWUiLCJzbGljZSIsIlJFRklORV9QQUNLQUdFX0ZJTEVQQVRIX1JFR0VYUCIsInByb2Nlc3MiLCJpc1JlZmluZVN0YWNrIiwiZmlsZW5hbWUiLCJtYXRjaCIsImdldFBhY2thZ2VOYW1lRnJvbUZpbGVuYW1lIiwiX2EiLCJuYW1lIiwiZ3JvdXBzIiwiZ2V0VHJhY2UiLCJleGNsdWRlRnJvbVRyYWNlIiwiZXJyb3IiLCJFcnJvciIsInBhcnNlIiwibWFwIiwiZmlsZSIsImZpbGVOYW1lIiwibGluZSIsImxpbmVOdW1iZXIiLCJjb2x1bW4iLCJjb2x1bW5OdW1iZXIiLCJmdW5jdGlvbiIsImlzUmVmaW5lIiwicGFja2FnZU5hbWUiLCJmaWx0ZXIiLCJ0cmFjZSIsImluY2x1ZGVzIiwic2NvcGVzIiwiZ2V0UmVzb3VyY2VQYXRoIiwiaG9va05hbWUiLCJsZWdhY3lLZXkiLCJnZXRYUmF5IiwicmVzb3VyY2VOYW1lIiwicmVzb3VyY2VQYXRoIiwiRGV2VG9vbHNDb250ZXh0IiwiRGV2dG9vbHNFdmVudCIsInJlY2VpdmUiLCJSZWFjdCIsInVzZUNvbnRleHQiLCJzZW5kIiwiY3JlYXRlSWRlbnRpZmllciIsImtleSIsInNpbXBsZVRyYWNlIiwidCIsIkpTT04iLCJzdHJpbmdpZnkiLCJjcmVhdGVNdXRhdGlvbkxpc3RlbmVyIiwid3MiLCJtdXRhdGlvbiIsIm1ldGEiLCJQcm9taXNlIiwicmVzb2x2ZSIsIl9iIiwiQUNUSVZJVFkiLCJ0eXBlIiwiaWRlbnRpZmllciIsIm9wdGlvbnMiLCJtdXRhdGlvbktleSIsInN0YXR1cyIsInN0YXRlIiwidmFyaWFibGVzIiwiY3JlYXRlUXVlcnlMaXN0ZW5lciIsInF1ZXJ5IiwicXVlcnlLZXkiLCJlbXB0eSIsIm5vb3AiLCJ1c2VRdWVyeVN1YnNjcmlwdGlvbiIsInF1ZXJ5Q2xpZW50IiwicXVlcnlDYWNoZVN1YnNjcmlwdGlvbiIsInVzZVJlZiIsIm11dGF0aW9uQ2FjaGVTdWJzY3JpcHRpb24iLCJ1c2VFZmZlY3QiLCJxdWVyeUNhY2hlIiwiZ2V0UXVlcnlDYWNoZSIsInF1ZXJ5TGlzdGVuZXIiLCJnZXRBbGwiLCJmb3JFYWNoIiwiY3VycmVudCIsInN1YnNjcmliZSIsImNhbGwiLCJtdXRhdGlvbkNhY2hlIiwiZ2V0TXV0YXRpb25DYWNoZSIsIm11dGF0aW9uTGlzdGVuZXIiLCJERVZUT09MU19JTlZBTElEQVRFX1FVRVJZX0FDVElPTiIsImludmFsaWRhdGVRdWVyaWVzIiwicCIsImsiLCJDIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/devtools-internal/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/devtools-shared/dist/index.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@refinedev/devtools-shared/dist/index.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DevToolsContext: () => (/* binding */ p),\n/* harmony export */   DevToolsContextProvider: () => (/* binding */ D),\n/* harmony export */   DevtoolsEvent: () => (/* binding */ c),\n/* harmony export */   hooksByScope: () => (/* binding */ L),\n/* harmony export */   receive: () => (/* binding */ _),\n/* harmony export */   scopes: () => (/* binding */ T),\n/* harmony export */   send: () => (/* binding */ d)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ DevToolsContext,DevToolsContextProvider,DevtoolsEvent,hooksByScope,receive,scopes,send auto */ var c = ((t)=>(t.RELOAD = \"devtools:reload\", t.DEVTOOLS_INIT = \"devtools:init\", t.DEVTOOLS_ALREADY_CONNECTED = \"devtools:already-connected\", t.ACTIVITY = \"devtools:send-activity\", t.DEVTOOLS_ACTIVITY_UPDATE = \"devtools:activity-update\", t.DEVTOOLS_CONNECTED_APP = \"devtools:connected-app\", t.DEVTOOLS_DISCONNECTED_APP = \"devtools:disconnected-app\", t.DEVTOOLS_HIGHLIGHT_IN_MONITOR = \"devtools:highlight-in-monitor\", t.DEVTOOLS_HIGHLIGHT_IN_MONITOR_ACTION = \"devtools:highlight-in-monitor-action\", t.DEVTOOLS_LOGIN_SUCCESS = \"devtools:login-success\", t.DEVTOOLS_DISPLAY_LOGIN_FAILURE = \"devtools:display-login-failure\", t.DEVTOOLS_LOGIN_FAILURE = \"devtools:login-failure\", t.DEVTOOLS_RELOAD_AFTER_LOGIN = \"devtools:reload-after-login\", t.DEVTOOLS_INVALIDATE_QUERY = \"devtools:invalidate-query\", t.DEVTOOLS_INVALIDATE_QUERY_ACTION = \"devtools:invalidate-query-action\", t))(c || {});\nvar T = {\n    useCan: \"access-control\",\n    useLog: \"audit-log\",\n    useLogList: \"audit-log\",\n    useCreate: \"data\",\n    useCreateMany: \"data\",\n    useCustom: \"data\",\n    useCustomMutation: \"data\",\n    useDelete: \"data\",\n    useDeleteMany: \"data\",\n    useInfiniteList: \"data\",\n    useList: \"data\",\n    useMany: \"data\",\n    useOne: \"data\",\n    useUpdate: \"data\",\n    useUpdateMany: \"data\",\n    useForgotPassword: \"auth\",\n    useGetIdentity: \"auth\",\n    useIsAuthenticated: \"auth\",\n    useLogin: \"auth\",\n    useLogout: \"auth\",\n    useOnError: \"auth\",\n    usePermissions: \"auth\",\n    useRegister: \"auth\",\n    useUpdatePassword: \"auth\"\n}, L = Object.entries(T).reduce((e, [o, s])=>(e[s] || (e[s] = []), e[s].push(o), e), {});\n\nasync function d(e, o, s) {\n    if (e.readyState !== e.OPEN) {\n        await new Promise((n)=>{\n            let r = ()=>{\n                e.send(JSON.stringify({\n                    event: o,\n                    payload: s\n                })), n(), e.removeEventListener(\"open\", r);\n            };\n            e.addEventListener(\"open\", r);\n        });\n        return;\n    }\n    e.send(JSON.stringify({\n        event: o,\n        payload: s\n    }));\n}\nvar p = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    __devtools: !1,\n    httpUrl: \"http://localhost:5001\",\n    wsUrl: \"ws://localhost:5001\",\n    ws: null\n}), D = ({ __devtools: e, url: o = [\n    \"http://localhost:5001\",\n    \"ws://localhost:5001\"\n], children: s })=>{\n    let n = Array.isArray(o) ? o[0] : o, r = Array.isArray(o) ? o[1] : o.replace(/http(s)?:\\/\\//, \"ws$1://\"), [i, y] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n        __devtools: e ?? !1,\n        httpUrl: n,\n        wsUrl: r,\n        ws: null\n    }), [O, v] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        let l = null, a = new WebSocket(i.wsUrl);\n        return a.addEventListener(\"open\", ()=>{\n            i.__devtools || (l = setTimeout(()=>{\n                d(a, \"devtools:init\", {\n                    url: window.location.origin\n                });\n            }, 300));\n        }), v(a), ()=>{\n            l && clearTimeout(l), a.readyState === WebSocket.CONNECTING ? a.addEventListener(\"open\", ()=>{\n                a.close(1e3, window.location.origin);\n            }) : a.close(1e3, window.location.origin);\n        };\n    }, []);\n    let E = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n            ...i,\n            ws: O\n        }), [\n        i,\n        O\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(p.Provider, {\n        value: E\n    }, s);\n};\nfunction _(e, o, s) {\n    let n = (r)=>{\n        let { event: i, payload: y } = JSON.parse(r.data);\n        o === i && s(y);\n    };\n    return e.addEventListener(\"message\", n), ()=>{\n        e.removeEventListener(\"message\", n);\n    };\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/devtools-shared/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/devtools/dist/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@refinedev/devtools/dist/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DevtoolsPanel: () => (/* binding */ xe),\n/* harmony export */   DevtoolsProvider: () => (/* binding */ ye)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @refinedev/devtools-shared */ \"(ssr)/./node_modules/@refinedev/devtools-shared/dist/index.mjs\");\n/* harmony import */ var _aliemir_dom_to_fiber_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aliemir/dom-to-fiber-utils */ \"(ssr)/./node_modules/@aliemir/dom-to-fiber-utils/dist/index.mjs\");\n/* harmony import */ var lodash_es_debounce_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es/debounce.js */ \"(ssr)/./node_modules/lodash-es/debounce.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* __next_internal_client_entry_do_not_use__ DevtoolsPanel,DevtoolsProvider auto */ \n\n\n\n\n\nvar ee = (e)=>e ? e.child : null, te = (e)=>{\n    let t = e;\n    for(; t;){\n        let r = (0,_aliemir_dom_to_fiber_utils__WEBPACK_IMPORTED_MODULE_1__.getElementFromFiber)(t);\n        if (r && r instanceof HTMLElement) return r;\n        t = ee(t);\n    }\n    return null;\n}, oe = (e)=>{\n    let t = e;\n    for(; t;){\n        let r = (0,_aliemir_dom_to_fiber_utils__WEBPACK_IMPORTED_MODULE_1__.getElementFromFiber)(t);\n        if (r && r instanceof HTMLElement) return r;\n        t = (0,_aliemir_dom_to_fiber_utils__WEBPACK_IMPORTED_MODULE_1__.getParentOfFiber)(t);\n    }\n    return null;\n}, ne = (e)=>{\n    let t = te(e);\n    return t ? [\n        t,\n        \"child\"\n    ] : (t = oe(e), t ? [\n        t,\n        \"parent\"\n    ] : [\n        document.body,\n        \"body\"\n    ]);\n}, re = (e, t)=>{\n    let r = e, n = null, i = null, o = !1;\n    for(; !o && r;)n = (0,_aliemir_dom_to_fiber_utils__WEBPACK_IMPORTED_MODULE_1__.getFirstFiberHasName)(r), i = (0,_aliemir_dom_to_fiber_utils__WEBPACK_IMPORTED_MODULE_1__.getFirstStateNodeFiber)(n), o = t.includes((0,_aliemir_dom_to_fiber_utils__WEBPACK_IMPORTED_MODULE_1__.getNameFromFiber)(n) ?? \"\"), o || (r = (0,_aliemir_dom_to_fiber_utils__WEBPACK_IMPORTED_MODULE_1__.getParentOfFiber)(r));\n    return i && n ? {\n        stateNode: i,\n        nameFiber: n\n    } : {\n        stateNode: null,\n        nameFiber: null\n    };\n}, O = (e)=>e.filter((t)=>t.element.offsetWidth > 0 && t.element.offsetHeight > 0), V = (e)=>{\n    let t = [];\n    return e.forEach((r)=>{\n        t.find((i)=>i.element === r.element && i.name === r.name) || t.push(r);\n    }), t;\n}, D = (e, t)=>{\n    var o;\n    if (!e) return [];\n    let r = [], n = (0,_aliemir_dom_to_fiber_utils__WEBPACK_IMPORTED_MODULE_1__.getFiberFromElement)(e), i = re(n, t);\n    if (i.nameFiber) {\n        let [s] = ne(i.nameFiber), c = (0,_aliemir_dom_to_fiber_utils__WEBPACK_IMPORTED_MODULE_1__.getNameFromFiber)(i.nameFiber);\n        s && c && r.push({\n            element: s,\n            name: c\n        });\n    }\n    for(let s = 0; s < ((o = e == null ? void 0 : e.children) == null ? void 0 : o.length); s++)r.push(...D(e.children[s], t));\n    return r;\n};\nvar B = (e)=>{\n    let { httpUrl: t } = react__WEBPACK_IMPORTED_MODULE_0__.useContext(_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_2__.DevToolsContext), [r, n] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]), i = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(async ()=>(await (await fetch(`${t}/api/unique-trace-items`)).json()).data, [\n        t\n    ]), o = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(async ()=>{\n        let s = await i(), c = D(document.body, s), a = O(c), d = V(a);\n        n(d);\n    }, [\n        i\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        e && o();\n    }, [\n        e,\n        o\n    ]), {\n        selectableElements: r\n    };\n};\n\nvar b = ({ children: e })=>(react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        let t = document.createElement(\"style\");\n        return t.innerHTML = e, document.head.appendChild(t), ()=>{\n            document.head.removeChild(t);\n        };\n    }, [\n        e\n    ]), null);\n\n\n\n\nvar U = (e)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        viewBox: \"0 0 16 16\",\n        fill: \"none\",\n        ...e\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"#0FBDBD\",\n        fillRule: \"evenodd\",\n        d: \"M9 1a1 1 0 0 0-2 0v2.1A5.006 5.006 0 0 0 3.1 7H1a1 1 0 0 0 0 2h2.1A5.006 5.006 0 0 0 7 12.9V15a1 1 0 1 0 2 0v-2.1A5.006 5.006 0 0 0 12.9 9H15a1 1 0 1 0 0-2h-2.1A5.006 5.006 0 0 0 9 3.1V1Zm2 7a3 3 0 1 0-6 0 3 3 0 0 0 6 0Z\",\n        clipRule: \"evenodd\"\n    })), z = (e)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        viewBox: \"0 0 16 16\",\n        fill: \"none\",\n        ...e\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"#14141F\",\n        fillRule: \"evenodd\",\n        d: \"M9 1a1 1 0 0 0-2 0v2.1A5.006 5.006 0 0 0 3.1 7H1a1 1 0 0 0 0 2h2.1A5.006 5.006 0 0 0 7 12.9V15a1 1 0 1 0 2 0v-2.1A5.006 5.006 0 0 0 12.9 9H15a1 1 0 1 0 0-2h-2.1A5.006 5.006 0 0 0 9 3.1V1Zm2 7a3 3 0 1 0-6 0 3 3 0 0 0 6 0Z\",\n        clipRule: \"evenodd\"\n    }));\nvar M = 22, k = (e, t)=>{\n    let { top: r, left: n, width: i, height: o } = e.getBoundingClientRect(), { scrollLeft: s, scrollTop: c } = t.documentElement, a = n + s - Math.max(0, M - i) / 2, d = r + c - Math.max(0, M - o) / 2;\n    return {\n        left: a,\n        top: d,\n        width: Math.max(M, i),\n        height: Math.max(M, o)\n    };\n}, ae = ({ element: e, name: t, onSelect: r })=>{\n    let [n] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>k(e, document)), i = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        let s = (0,lodash_es_debounce_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(()=>{\n            var d;\n            let a = k(e, document);\n            [\n                \"left\",\n                \"top\",\n                \"width\",\n                \"height\"\n            ].forEach((g)=>{\n                var l;\n                (l = i.current) == null || l.style.setProperty(g, `${a[g]}px`);\n            }), (d = i.current) == null || d.style.setProperty(\"opacity\", \"1\");\n        }, 200, {\n            leading: !1,\n            trailing: !0\n        }), c = (0,lodash_es_debounce_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(()=>{\n            var a;\n            (a = i.current) == null || a.style.setProperty(\"opacity\", \"0\");\n        }, 200, {\n            leading: !0,\n            trailing: !1\n        });\n        return document.addEventListener(\"scroll\", s), document.addEventListener(\"scroll\", c), ()=>{\n            document.removeEventListener(\"scroll\", s), document.removeEventListener(\"scroll\", c);\n        };\n    }, [\n        e\n    ]);\n    let o = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        let s = {\n            width: 22,\n            height: 22\n        }, c = t.length * 7.5, a = {\n            width: s.width + c,\n            height: s.height\n        }, d = 4;\n        return n.top - a.height > 0 && n.left + a.width < window.innerWidth && n.width > a.width ? {\n            left: d / 2,\n            top: a.height * -1 - d\n        } : n.height >= a.height * 1.5 && n.width >= a.width * 1.5 ? {\n            left: 0 + d,\n            top: 0 + d\n        } : n.left - a.width > 0 ? {\n            right: n.width + d,\n            top: 0 - 1\n        } : n.left + n.width + a.width < window.innerWidth ? {\n            left: n.width + d,\n            top: 0 - 1\n        } : n.top + n.height + a.height < document.documentElement.scrollHeight ? {\n            left: 0 - 1,\n            top: n.height + d\n        } : {\n            left: 0,\n            top: 0\n        };\n    }, [\n        n,\n        t.length\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        type: \"button\",\n        className: \"selector-xray-box\",\n        onClick: (s)=>{\n            s == null || s.preventDefault(), s == null || s.stopPropagation(), r(t);\n        },\n        ref: i,\n        style: {\n            position: \"absolute\",\n            ...n\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            position: \"absolute\",\n            ...o\n        },\n        className: \"selector-xray-info\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"selector-xray-info-icon\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(z, {\n        width: 12,\n        height: 12,\n        style: {\n            pointerEvents: \"none\"\n        }\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"selector-xray-info-title\"\n    }, ` ${t}`)));\n}, W = ({ elements: e, onSelect: t })=>{\n    let [r, n] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!r) {\n            let i = document.createElement(\"div\");\n            return i.id = \"selector-box-root\", document.body.appendChild(i), n(i), ()=>{\n                document.body.removeChild(i), n(null);\n            };\n        }\n        return ()=>0;\n    }, []), r ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_3__.createPortal)(e.map((i, o)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ae, {\n            key: `selector-element-${o}-${i.name}`,\n            ...i,\n            onSelect: t\n        })), r), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(b, null, `\n          .selector-xray-box {\n            display: flex;\n            margin: 0;\n            padding: 0;\n            appearance: none;\n            z-index: 9999;\n            border: 2px dashed #47EBEB;\n            border-radius: 6px;\n            background: rgba(71, 235, 235, 0.01);\n            transition: opacity 0.2s ease-in-out;\n            cursor: crosshair;\n          }\n        \n          .selector-xray-info {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n      \n            z-index: 10;\n      \n            padding: 3px 0;\n            min-width: 22px;\n            height: 22px;\n      \n            color: #14141F;\n            background: #47EBEB;\n      \n            font-size: 12px;\n            line-height: 16px;\n            font-family: monospace;\n            border-radius: 11px;\n          }\n      \n          .selector-xray-info-icon {\n            display: flex;\n            min-width: 22px;\n            justify-content: center;\n            align-items: center;\n            flex-shrink: 0;\n          }\n      \n          .selector-xray-info-title {\n            display: block;\n            max-width: 0;\n            overflow: hidden;\n            transition-property: max-width, padding-right;\n            transition-duration: 0.2s;\n            transition-timing-function: ease-in-out;\n            transition-delay: 0.1s;\n          }\n      \n          .selector-xray-box:hover .selector-xray-info-title {\n            max-width: 200px;\n            padding-right: 8px;\n          }\n          .selector-xray-box:hover .selector-xray-info-title {\n            z-index: 90;\n          }\n        `)) : null;\n};\nvar Y = ({ active: e, setActive: t, onHighlight: r, icon: n, style: i })=>{\n    let { selectableElements: o } = B(e);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: i\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        role: \"button\",\n        title: \"Element Selector\",\n        className: \"refine-devtools-selector-button\",\n        onClick: (c)=>{\n            var a;\n            c.preventDefault(), c.stopPropagation(), (a = document == null ? void 0 : document.activeElement) == null || a.blur(), t((d)=>!d);\n        }\n    }, n), e && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(W, {\n        elements: o,\n        onSelect: (c)=>{\n            r(c), t(!1);\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(b, null, `\n        .refine-devtools-selector-button {\n          padding: 0;\n          margin: 0;\n          height: 100%;\n          width: 100%;\n          transform: rotate(0deg);\n          transition: transform 0.2s ease-in-out;\n          line-height: 1;\n        }\n\n        .refine-devtools-selector-button:hover {\n          transform: rotate(180deg);\n        }\n    `));\n};\n\nvar $ = (e)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 157,\n        height: 25,\n        viewBox: \"0 0 157 25\",\n        fill: \"none\",\n        ...e\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"#1D1E30\",\n        d: \"M17 1h123v24H17z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"#1D1E30\",\n        d: \"M6.265 9.205A12 12 0 0 1 17.649 1H25v24H1L6.265 9.205ZM150.735 9.205A12 12 0 0 0 139.351 1H132v24h24l-5.265-15.795Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        d: \"M25 14.333A1.333 1.333 0 1 1 25 17a1.333 1.333 0 0 1 0-2.667Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M23.211 20.578a4 4 0 0 0 3.578 0l4-2A4 4 0 0 0 33 15v-4a4 4 0 0 0-2.211-3.578l-4-2a4 4 0 0 0-3.578 0l-4 2A4 4 0 0 0 17 11v4a4 4 0 0 0 2.211 3.578l4 2Zm-.878-4.911a2.667 2.667 0 0 0 5.334 0v-5.334a2.667 2.667 0 0 0-5.334 0v5.334Z\",\n        clipRule: \"evenodd\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"#CFD7E2\",\n        d: \"M42.152 17a.287.287 0 0 1-.192-.072.287.287 0 0 1-.072-.192V9.032c0-.072.024-.132.072-.18a.264.264 0 0 1 .192-.084h4.2c.288 0 .56.056.816.168a2.135 2.135 0 0 1 1.14 1.128c.112.256.168.532.168.828v3.984c0 .296-.056.572-.168.828a2.135 2.135 0 0 1-1.14 1.128 2.014 2.014 0 0 1-.816.168h-4.2Zm1.38-1.644h2.82a.455.455 0 0 0 .336-.132.497.497 0 0 0 .132-.348v-3.984a.455.455 0 0 0-.132-.336.436.436 0 0 0-.336-.144h-2.82v4.944Zm13.18-5.196a.244.244 0 0 1-.253.252h-4.44v1.656h4.02c.072 0 .132.024.18.072a.227.227 0 0 1 .084.18v1.128a.264.264 0 0 1-.084.192.244.244 0 0 1-.18.072h-4.02v1.644h4.44c.072 0 .132.028.18.084a.244.244 0 0 1 .072.18v1.116a.287.287 0 0 1-.072.192.244.244 0 0 1-.18.072h-5.832a.244.244 0 0 1-.18-.072.287.287 0 0 1-.072-.192V9.032c0-.072.024-.132.072-.18a.227.227 0 0 1 .18-.084h5.832c.072 0 .132.028.18.084a.244.244 0 0 1 .072.18v1.128ZM63.014 17h-2.232a.387.387 0 0 1-.216-.072.356.356 0 0 1-.144-.168l-1.716-4.296a.853.853 0 0 1-.072-.24 1.783 1.783 0 0 1-.024-.264V9.032c0-.072.024-.132.072-.18a.227.227 0 0 1 .18-.084h1.128c.072 0 .132.028.18.084a.227.227 0 0 1 .084.18v2.616c0 .072.008.156.024.252s.04.176.072.24l1.284 3.216h.528l1.284-3.216a.853.853 0 0 0 .072-.24c.016-.096.024-.18.024-.252V9.032c0-.072.024-.132.072-.18a.264.264 0 0 1 .192-.084h1.128c.072 0 .132.028.18.084a.244.244 0 0 1 .072.18v2.928c0 .072-.008.16-.024.264a.853.853 0 0 1-.072.24l-1.716 4.296a.356.356 0 0 1-.144.168.387.387 0 0 1-.216.072ZM73.29 8.768c.072 0 .132.028.18.084a.227.227 0 0 1 .084.18v1.128a.227.227 0 0 1-.084.18.244.244 0 0 1-.18.072h-2.208v6.324a.264.264 0 0 1-.084.192.244.244 0 0 1-.18.072H69.69a.244.244 0 0 1-.18-.072.287.287 0 0 1-.072-.192v-6.324H67.23a.287.287 0 0 1-.192-.072.244.244 0 0 1-.072-.18V9.032c0-.072.024-.132.072-.18a.264.264 0 0 1 .192-.084h6.06Zm6.507.012c.296 0 .572.056.828.168a2.171 2.171 0 0 1 1.128 1.128c.112.256.168.528.168.816v3.996c0 .288-.056.56-.168.816a2.171 2.171 0 0 1-1.128 1.128 2.043 2.043 0 0 1-.828.168h-2.34c-.296 0-.572-.056-.828-.168a2.171 2.171 0 0 1-1.128-1.128 2.014 2.014 0 0 1-.168-.816v-3.996c0-.288.056-.56.168-.816a2.171 2.171 0 0 1 1.128-1.128c.256-.112.532-.168.828-.168h2.34Zm.48 2.112a.436.436 0 0 0-.144-.336.455.455 0 0 0-.336-.132h-2.34a.497.497 0 0 0-.348.132.455.455 0 0 0-.132.336v3.996c0 .136.044.248.132.336a.497.497 0 0 0 .348.132h2.34a.455.455 0 0 0 .336-.132.436.436 0 0 0 .144-.336v-3.996Zm7.888-2.112c.295 0 .572.056.828.168a2.171 2.171 0 0 1 1.128 1.128c.112.256.168.528.168.816v3.996c0 .288-.056.56-.168.816a2.171 2.171 0 0 1-1.128 1.128 2.043 2.043 0 0 1-.828.168h-2.34c-.297 0-.573-.056-.829-.168a2.171 2.171 0 0 1-1.127-1.128 2.014 2.014 0 0 1-.168-.816v-3.996c0-.288.056-.56.168-.816a2.171 2.171 0 0 1 1.127-1.128c.257-.112.532-.168.829-.168h2.34Zm.48 2.112a.436.436 0 0 0-.144-.336.455.455 0 0 0-.337-.132h-2.34a.497.497 0 0 0-.347.132.455.455 0 0 0-.133.336v3.996c0 .136.044.248.133.336a.497.497 0 0 0 .347.132h2.34a.455.455 0 0 0 .337-.132.436.436 0 0 0 .143-.336v-3.996ZM98.294 17H92.68a.287.287 0 0 1-.192-.072.287.287 0 0 1-.072-.192V9.032c0-.072.024-.132.072-.18a.264.264 0 0 1 .192-.084h1.116c.072 0 .132.028.18.084a.227.227 0 0 1 .084.18v6.324h4.236c.072 0 .132.028.18.084a.244.244 0 0 1 .072.18v1.116a.287.287 0 0 1-.072.192.244.244 0 0 1-.18.072Zm7.336-5.76a.287.287 0 0 1-.192-.072.287.287 0 0 1-.072-.192v-.084a.455.455 0 0 0-.132-.336.436.436 0 0 0-.336-.144h-2.352a.46.46 0 0 0-.336.144.455.455 0 0 0-.132.336v.696c0 .136.044.252.132.348a.482.482 0 0 0 .336.132h2.352c.288 0 .56.056.816.168a2.171 2.171 0 0 1 1.128 1.128c.112.256.168.528.168.816v.696c0 .296-.056.572-.168.828a2.171 2.171 0 0 1-1.128 1.128 2.014 2.014 0 0 1-.816.168h-2.352c-.288 0-.56-.056-.816-.168a2.171 2.171 0 0 1-1.128-1.128 2.043 2.043 0 0 1-.168-.828v-.084c0-.072.024-.132.072-.18a.264.264 0 0 1 .192-.084h1.116c.072 0 .132.028.18.084a.227.227 0 0 1 .084.18v.084c0 .136.044.252.132.348a.482.482 0 0 0 .336.132h2.352a.455.455 0 0 0 .336-.132.497.497 0 0 0 .132-.348v-.696a.455.455 0 0 0-.132-.336.455.455 0 0 0-.336-.132h-2.352c-.288 0-.56-.056-.816-.168a2.171 2.171 0 0 1-1.128-1.128 2.099 2.099 0 0 1-.168-.828v-.696c0-.296.056-.572.168-.828a2.171 2.171 0 0 1 1.128-1.128c.256-.112.528-.168.816-.168h2.352c.288 0 .56.056.816.168a2.171 2.171 0 0 1 1.128 1.128c.112.256.168.532.168.828v.084a.287.287 0 0 1-.072.192.244.244 0 0 1-.18.072h-1.128Z\"\n    })));\nvar G = ({ onClick: e, onSelectorHighlight: t, selectorActive: r, setSelectorActive: n })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        role: \"button\",\n        className: \"devtools-selector-pin-box\",\n        onClick: e\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement($, null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Y, {\n        style: {\n            position: \"absolute\",\n            top: 5,\n            right: 18,\n            width: \"16px\",\n            height: \"16px\"\n        },\n        icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(U, {\n            width: 16,\n            height: 16,\n            style: {\n                pointerEvents: \"none\"\n            }\n        }),\n        onHighlight: t,\n        active: r,\n        setActive: n\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(b, null, `\n            .devtools-selector-pin-box {\n              z-index: 9999;\n              position: relative;\n              user-select: none;\n              -webkit-user-select: none;\n              background: none;\n              border: none;\n              padding: 0;\n              margin: 0;\n              appearance: none;\n              padding-right: 1px;\n              display: flex;\n              align-items: center;\n              justify-content: center;\n              cursor: pointer;\n              color: #6C7793;\n              transition: color 0.1s ease-in-out;\n            }\n\n            .devtools-selector-pin-box:hover {\n              color: #0FBDBD;\n            }\n          `));\n\nvar X = (e)=>e ? \"scaleX(1) translateY(0)\" : \"scaleX(0) translateY(25vw)\";\nvar ce = ()=> false ? 0 : 1007.9999999999999, de = ()=> false ? 0 : 630;\nvar H = (e)=>{\n    switch(e){\n        case \"left\":\n            return {\n                left: \"calc(50px + 10px)\",\n                top: \"50%\",\n                transform: \"translateY(-50%)\"\n            };\n        case \"right\":\n            return {\n                right: \"calc(50px + 10px)\",\n                top: \"50%\",\n                transform: \"translateY(-50%)\"\n            };\n        case \"top\":\n            return {\n                left: \"50%\",\n                top: \"calc(50px + 10px)\",\n                transform: \"translateX(-50%)\"\n            };\n        case \"bottom\":\n            return {\n                left: \"50%\",\n                bottom: \"calc(50px + 10px)\",\n                transform: \"translateX(-50%)\"\n            };\n    }\n}, C = (e)=>{\n    switch(e){\n        case \"left\":\n        case \"right\":\n            return -70 + ( false ? 0 : 1440) - 10;\n        case \"top\":\n        case \"bottom\":\n            return -10 + ( false ? 0 : 1440) - 10;\n    }\n}, I = (e)=>{\n    switch(e){\n        case \"left\":\n        case \"right\":\n            return -10 + ( false ? 0 : 900) - 10;\n        case \"top\":\n        case \"bottom\":\n            return -70 + ( false ? 0 : 900) - 10;\n    }\n}, R = (e, t)=>{\n    let r = {\n        width: ce(),\n        height: de()\n    }, n = C(e), i = I(e), o = Math.min(n, (t ?? r).width), s = Math.min(i, (t ?? r).height);\n    return {\n        width: o,\n        height: s\n    };\n}, v = (e)=>{\n    let t = Math.round(e);\n    return t % 2 === 0 ? t : t + 1;\n};\n\nvar F = (e)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        width: 10,\n        height: 26,\n        viewBox: \"0 0 10 26\",\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        ...e\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"rect\", {\n        x: .5,\n        y: .5,\n        width: 9,\n        height: 25,\n        rx: 4.5,\n        fill: \"#1D1E30\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M7 5C7 6.10457 6.10457 7 5 7C3.89543 7 3 6.10457 3 5C3 3.89543 3.89543 3 5 3C6.10457 3 7 3.89543 7 5Z\",\n        fill: \"#303450\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M7 13C7 14.1046 6.10457 15 5 15C3.89543 15 3 14.1046 3 13C3 11.8954 3.89543 11 5 11C6.10457 11 7 11.8954 7 13Z\",\n        fill: \"#303450\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M7 21C7 22.1046 6.10457 23 5 23C3.89543 23 3 22.1046 3 21C3 19.8954 3.89543 19 5 19C6.10457 19 7 19.8954 7 21Z\",\n        fill: \"#303450\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"rect\", {\n        x: .5,\n        y: .5,\n        width: 9,\n        height: 25,\n        rx: 4.5,\n        stroke: \"#303450\"\n    }));\nvar K = ({ placement: e, visible: t, children: r })=>{\n    let [n, i] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), [o, s] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null), [c, a] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null), [d, g] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>{\n        let l = R(e);\n        return {\n            width: v(l.width),\n            height: v(l.height)\n        };\n    });\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        let l = ()=>{\n            g((x)=>{\n                let f = R(e, x);\n                return {\n                    width: v(f.width),\n                    height: v(f.height)\n                };\n            });\n        };\n        return l(), window.addEventListener(\"resize\", l), ()=>{\n            window.removeEventListener(\"resize\", l);\n        };\n    }, [\n        e\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        let l = ()=>{\n            s(null);\n        };\n        if (o !== null) return window.addEventListener(\"mouseup\", l), ()=>{\n            window.removeEventListener(\"mouseup\", l);\n        };\n    }, [\n        o\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        let l = document.body.style.cursor;\n        return o != null && o.includes(\"x\") ? document.body.style.cursor = \"col-resize\" : o != null && o.includes(\"y\") && (document.body.style.cursor = \"row-resize\"), ()=>{\n            document.body.style.cursor = l;\n        };\n    }, [\n        o\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        let l = (x)=>{\n            if ((o == null ? void 0 : o[1]) === \"x\") {\n                let f = x.clientX - ((c == null ? void 0 : c.x) ?? x.clientX), p = d.width + (o === \"lx\" ? -f : f) * 2;\n                g((y)=>({\n                        ...y,\n                        width: v(Math.min(C(e), Math.max(640, p)))\n                    }));\n            } else if ((o == null ? void 0 : o[1]) === \"y\") {\n                let f = x.clientY - ((c == null ? void 0 : c.y) ?? x.clientY), p = d.height + (o === \"ty\" ? -f : f) * 1;\n                g((y)=>({\n                        ...y,\n                        height: v(Math.min(I(e), Math.max(360, p)))\n                    }));\n            }\n        };\n        if (o !== null) return window.addEventListener(\"mousemove\", l), ()=>{\n            window.removeEventListener(\"mousemove\", l);\n        };\n    }, [\n        o,\n        e\n    ]), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            position: \"absolute\",\n            borderRadius: \"8px\",\n            boxShadow: \"0 0 10px rgba(0, 0, 0, 0.5)\",\n            border: \"1px solid rgba(0, 0, 0, 0.5)\",\n            transitionProperty: \"transform, opacity\",\n            transitionTimingFunction: \"ease-in-out\",\n            transitionDuration: \"0.2s\",\n            ...H(e),\n            opacity: t ? 1 : 0,\n            transform: `${H(e).transform} ${X(t ?? !1)}`,\n            ...d\n        },\n        onMouseEnter: ()=>{\n            i(!0);\n        },\n        onMouseLeave: ()=>{\n            i(!1);\n        }\n    }, r({\n        resizing: o\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            position: \"absolute\",\n            left: 0,\n            top: \"50%\",\n            width: \"10px\",\n            height: \"26px\",\n            transform: \"translateY(-13px) translateX(-5px)\",\n            cursor: \"col-resize\",\n            transition: \"opacity ease-in-out 0.2s\",\n            pointerEvents: n || o ? \"auto\" : \"none\",\n            opacity: n || o ? 1 : 0\n        },\n        onMouseDown: (l)=>{\n            s(\"lx\"), a({\n                x: l.clientX,\n                y: l.clientY\n            }), l.preventDefault();\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(F, null)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            position: \"absolute\",\n            right: 0,\n            top: \"50%\",\n            width: \"10px\",\n            height: \"26px\",\n            transform: \"translateY(-13px) translateX(5px)\",\n            cursor: \"col-resize\",\n            transition: \"opacity ease-in-out 0.2s\",\n            pointerEvents: n || o ? \"auto\" : \"none\",\n            opacity: n || o ? 1 : 0\n        },\n        onMouseDown: (l)=>{\n            s(\"rx\"), a({\n                x: l.clientX,\n                y: l.clientY\n            }), l.preventDefault();\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(F, null)), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            position: \"absolute\",\n            left: \"50%\",\n            top: 0,\n            width: \"26px\",\n            height: \"10px\",\n            transform: \"translateY(-5px) translateX(-13px)\",\n            cursor: \"row-resize\",\n            transition: \"opacity ease-in-out 0.2s\",\n            pointerEvents: n || o ? \"auto\" : \"none\",\n            opacity: n || o ? 1 : 0\n        },\n        onMouseDown: (l)=>{\n            s(\"ty\"), a({\n                x: l.clientX,\n                y: l.clientY\n            }), l.preventDefault();\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(F, {\n        style: {\n            transform: \"rotate(90deg)\",\n            transformOrigin: \"13px 13px\"\n        }\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            position: \"absolute\",\n            left: \"50%\",\n            bottom: 0,\n            width: \"26px\",\n            height: \"10px\",\n            transform: \"translateY(5px) translateX(-13px)\",\n            cursor: \"row-resize\",\n            transition: \"opacity ease-in-out 0.2s\",\n            pointerEvents: n || o ? \"auto\" : \"none\",\n            opacity: n || o ? 1 : 0\n        },\n        onMouseDown: (l)=>{\n            s(\"by\"), a({\n                x: l.clientX,\n                y: l.clientY\n            }), l.preventDefault();\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(F, {\n        style: {\n            transform: \"rotate(90deg)\",\n            transformOrigin: \"13px 13px\"\n        }\n    }))));\n};\n\nvar ge = 1500, xe =  false ? 0 : ()=>{\n    let [e, t] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), [r, n] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), [i] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\"bottom\"), { httpUrl: o, ws: s } = react__WEBPACK_IMPORTED_MODULE_0__.useContext(_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_2__.DevToolsContext), [c, a] = react__WEBPACK_IMPORTED_MODULE_0__.useState(0), [d, g] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), [l, x] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\"loading\"), f = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((p)=>{\n        s && (0,_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_2__.send)(s, _refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_2__.DevtoolsEvent.DEVTOOLS_HIGHLIGHT_IN_MONITOR, {\n            name: p\n        }), n(!0);\n    }, [\n        s\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        d && n(!1);\n    }, [\n        d\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n         false && 0;\n    }, []), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (e) {\n            a(window.innerWidth);\n            let p = ()=>{\n                a(window.innerWidth);\n            };\n            return window.addEventListener(\"resize\", p), ()=>{\n                window.removeEventListener(\"resize\", p);\n            };\n        }\n        return ()=>{};\n    }, [\n        e\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (l !== \"loaded\") {\n            let p = (y)=>{\n                y.data.type === \"refine-devtools-iframe-loaded\" && x(\"loaded\");\n            };\n            return window.addEventListener(\"message\", p), ()=>{\n                window.removeEventListener(\"message\", p);\n            };\n        }\n        return ()=>0;\n    }, []), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        let p;\n        return l === \"loading\" && (p = window.setTimeout(()=>{\n            x(\"failed\"), p && clearInterval(p);\n        }, ge)), ()=>{\n            typeof p < \"u\" && clearInterval(p);\n        };\n    }, [\n        l\n    ]), e ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            position: \"fixed\",\n            left: `${Math.round(c / 2)}px`,\n            transform: \"translateX(-50%)\",\n            bottom: 0,\n            zIndex: 99999\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(G, {\n        onClick: ()=>{\n            n((p)=>!p), g(!1);\n        },\n        onSelectorHighlight: f,\n        selectorActive: d,\n        setSelectorActive: g\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(K, {\n        visible: r,\n        placement: i\n    }, ({ resizing: p })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"iframe\", {\n            allow: \"clipboard-write;\",\n            src: o,\n            srcDoc: o ? l === \"failed\" ? ve : void 0 : Ee,\n            style: {\n                width: \"100%\",\n                height: \"100%\",\n                border: \"none\",\n                borderRadius: \"7px\",\n                pointerEvents: p ? \"none\" : \"auto\",\n                background: \"#14141F\"\n            }\n        }))) : null;\n}, Ee = `\n      <html style=\"height:100%;padding:0;margin:0;background:#14141F;\">\n        <body style=\"background:#14141F;display:flex;justify-content:center;height:100%;padding:24px;margin:0;align-items:center;box-sizing:border-box;\">\n          <h1 style=\"font-family:ui-monospace,monospace;font-weight:400;color:#CFD7E2;text-align:center;font-size:24px;\">Could not connect to the devtools server.</h1>\n        </body>\n      </html>\n      `, ve = `\n      <html style=\"height:100%;padding:0;margin:0;background:#14141F;\">\n        <body style=\"background:#14141F;display:flex;flex-direction:column;justify-content:center;height:100%;padding:24px;margin:0;align-items:center;box-sizing:border-box;\">\n          <h1 style=\"max-width:480px;min-width:480px;font-family:ui-monospace,monospace;font-weight:400;color:#CFD7E2;text-align:left;font-size:24px;margin-bottom:12px;line-height:24px;\">Devtools Server is unreachable.</h1>\n          <p style=\"max-width:480px;font-family:ui-monospace,monospace;font-weight:400;color:#6C7793;text-align:left;font-size:16px;line-height:32px;\">Please make sure Refine Devtools is running and <code style=\"background:#303450;color:#A3ADC2;padding:3px 6px;border-radius:4px;\">&lt;DevtoolsProvider /&gt;</code> has valid <code style=\"background:#303450;color:#A3ADC2;padding:3px 6px;border-radius:4px;\">url</code> prop. Environment variables may not always be available in browser depending on your project setup.</p>\n        </body>\n      </html>\n      `;\n\n\nvar j = ()=>{\n    let t = (typeof process < \"u\" && \"env\" in process ? process.env.REFINE_DEVTOOLS_PORT || process.env.NEXT_PUBLIC_REFINE_DEVTOOLS_PORT || process.env.REACT_APP_REFINE_DEVTOOLS_PORT :  false ? 0 : null) || 5001;\n    return [\n        `http://localhost:${t}`,\n        `ws://localhost:${t}`\n    ];\n};\nvar ye =  false ? 0 : ({ children: e, url: t = j() })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_2__.DevToolsContextProvider, {\n        url: t\n    }, e);\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/devtools/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/kbar/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@refinedev/kbar/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KBAR_LISTBOX: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.KBAR_LISTBOX),\n/* harmony export */   KBarAnimator: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.KBarAnimator),\n/* harmony export */   KBarContext: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.KBarContext),\n/* harmony export */   KBarPortal: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.KBarPortal),\n/* harmony export */   KBarPositioner: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.KBarPositioner),\n/* harmony export */   KBarProvider: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.KBarProvider),\n/* harmony export */   KBarResults: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.KBarResults),\n/* harmony export */   KBarSearch: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.KBarSearch),\n/* harmony export */   NO_GROUP: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.NO_GROUP),\n/* harmony export */   Priority: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.Priority),\n/* harmony export */   RefineKbar: () => (/* binding */ O),\n/* harmony export */   RefineKbarPropsContext: () => (/* binding */ w),\n/* harmony export */   RefineKbarProvider: () => (/* binding */ ge),\n/* harmony export */   VisualState: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.VisualState),\n/* harmony export */   createAction: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.createAction),\n/* harmony export */   getListboxItemId: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.getListboxItemId),\n/* harmony export */   useKBar: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.useKBar),\n/* harmony export */   useMatches: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.useMatches),\n/* harmony export */   useRefineKbar: () => (/* binding */ I),\n/* harmony export */   useRegisterActions: () => (/* reexport safe */ kbar__WEBPACK_IMPORTED_MODULE_1__.useRegisterActions)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var kbar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! kbar */ \"(ssr)/./node_modules/kbar/lib/index.js\");\n/* harmony import */ var _refinedev_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @refinedev/core */ \"(ssr)/./node_modules/@refinedev/core/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ KBAR_LISTBOX,KBarAnimator,KBarContext,KBarPortal,KBarPositioner,KBarProvider,KBarResults,KBarSearch,NO_GROUP,Priority,RefineKbar,RefineKbarPropsContext,RefineKbarProvider,VisualState,createAction,getListboxItemId,useKBar,useMatches,useRefineKbar,useRegisterActions auto */ var nt = Object.defineProperty;\nvar r = (n, e)=>nt(n, \"name\", {\n        value: e,\n        configurable: !0\n    });\n\n\n\n\n\n\nvar g = r((n)=>n.replace(/\\w\\S*/g, (e)=>e.charAt(0).toUpperCase() + e.slice(1).toLowerCase()), \"capitalize\");\n\nvar I = r(()=>{\n    let n = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)(), { resource: e, resources: p, id: c, action: y } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResource)(), l = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)(), d = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useGetToPath)(), b = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useGo)(), { mutate: H } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useDelete)(), { push: K, list: Pt, create: wt, show: Tt, edit: kt } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useNavigation)(), V = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useUserFriendlyName)(), $ = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(kbar__WEBPACK_IMPORTED_MODULE_1__.KBarContext), { can: a } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useCanWithoutCache)(), [B, j] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        r(async ()=>await Promise.all(q().flatMap((i)=>F(i))), \"preaparedActions\")().then((i)=>j(i.flatMap((m)=>m)));\n    }, [\n        p,\n        c,\n        e,\n        y\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        B.length === 0 && $.query.setVisualState(kbar__WEBPACK_IMPORTED_MODULE_1__.VisualState.hidden);\n    }, [\n        B\n    ]);\n    let q = r(()=>{\n        let t = [\n            ...p\n        ], i = t == null ? void 0 : t.findIndex((m)=>(m.identifier ?? (m == null ? void 0 : m.name)) === ((e == null ? void 0 : e.identifier) ?? (e == null ? void 0 : e.name)));\n        if (i > 0) {\n            let m = t[i];\n            t.splice(i, 1), t.splice(0, 0, m);\n        }\n        return t;\n    }, \"moveActionToFirst\"), F = r(async (t)=>{\n        var L, E, z, N, M, U;\n        let { name: i, label: m, list: _, create: T, canCreate: Q, canEdit: X, canShow: J, icon: Y, show: k, canDelete: Z, edit: D, route: Dt } = t, tt = ((L = t == null ? void 0 : t.meta) == null ? void 0 : L.label) ?? ((E = t == null ? void 0 : t.options) == null ? void 0 : E.label) ?? m, h = ((z = t == null ? void 0 : t.meta) == null ? void 0 : z.icon) ?? ((N = t == null ? void 0 : t.options) == null ? void 0 : N.icon) ?? Y, et = ((M = t == null ? void 0 : t.meta) == null ? void 0 : M.canDelete) ?? ((U = t == null ? void 0 : t.options) == null ? void 0 : U.canDelete) ?? Z, A = tt ?? n(`${t.name}.${t.name}`, V(t.name, \"plural\")), x = [];\n        if (_ && (e !== void 0 && (e == null ? void 0 : e.name) !== i || y !== void 0 && (e == null ? void 0 : e.name) === i)) {\n            let { can: f } = await (a == null ? void 0 : a({\n                resource: i,\n                action: \"list\",\n                params: {\n                    id: c,\n                    resource: t\n                }\n            })) || {\n                can: !0\n            };\n            f && x.push((0,kbar__WEBPACK_IMPORTED_MODULE_1__.createAction)({\n                name: n(\"actions.list\", g(\"list\")),\n                section: A,\n                icon: h,\n                perform: ()=>{\n                    let o = d({\n                        resource: t,\n                        action: \"list\",\n                        legacy: l === \"legacy\"\n                    });\n                    o && (l === \"legacy\" ? K(o) : b({\n                        to: o\n                    }));\n                }\n            }));\n        }\n        if ((Q || T) && T && (y !== \"create\" || (e == null ? void 0 : e.name) !== i)) {\n            let { can: f } = await (a == null ? void 0 : a({\n                resource: i,\n                action: \"create\",\n                params: {\n                    resource: t\n                }\n            })) || {\n                can: !0\n            };\n            f && x.push((0,kbar__WEBPACK_IMPORTED_MODULE_1__.createAction)({\n                name: n(\"actions.create\", g(\"create\")),\n                section: A,\n                icon: h,\n                keywords: \"new\",\n                perform: ()=>{\n                    let o = d({\n                        resource: t,\n                        action: \"create\",\n                        legacy: l === \"legacy\"\n                    });\n                    o && (l === \"legacy\" ? K(o) : b({\n                        to: o\n                    }));\n                }\n            }));\n        }\n        if ((e == null ? void 0 : e.name) === i && c) {\n            if ((J || k) && k && y !== \"show\") {\n                let { can: f } = await (a == null ? void 0 : a({\n                    resource: i,\n                    action: \"show\",\n                    params: {\n                        id: c,\n                        resource: t\n                    }\n                })) || {\n                    can: !0\n                };\n                f && x.push((0,kbar__WEBPACK_IMPORTED_MODULE_1__.createAction)({\n                    name: n(\"actions.show\", g(\"show\")),\n                    section: A,\n                    icon: h,\n                    perform: ()=>{\n                        let o = d({\n                            resource: t,\n                            action: \"show\",\n                            legacy: l === \"legacy\",\n                            meta: {\n                                id: c\n                            }\n                        });\n                        o && (l === \"legacy\" ? K(o) : b({\n                            to: o\n                        }));\n                    }\n                }));\n            }\n            if ((X || D) && D && y !== \"edit\") {\n                let { can: f } = await (a == null ? void 0 : a({\n                    resource: i,\n                    action: \"edit\",\n                    params: {\n                        id: c,\n                        resource: t\n                    }\n                })) || {\n                    can: !0\n                };\n                f && x.push((0,kbar__WEBPACK_IMPORTED_MODULE_1__.createAction)({\n                    name: n(\"actions.edit\", g(\"edit\")),\n                    section: A,\n                    icon: h,\n                    perform: ()=>{\n                        let o = d({\n                            resource: t,\n                            action: \"edit\",\n                            legacy: l === \"legacy\",\n                            meta: {\n                                id: c\n                            }\n                        });\n                        o && (l === \"legacy\" ? K(o) : b({\n                            to: o\n                        }));\n                    }\n                }));\n            }\n            if (et) {\n                let { can: f } = await (a == null ? void 0 : a({\n                    resource: i,\n                    action: \"delete\",\n                    params: {\n                        id: c,\n                        resource: t\n                    }\n                })) || {\n                    can: !0\n                };\n                f && x.push({\n                    id: \"delete\",\n                    name: n(\"actions.delete\", g(\"delete\")),\n                    section: A,\n                    icon: h\n                }, (0,kbar__WEBPACK_IMPORTED_MODULE_1__.createAction)({\n                    name: n(\"buttons.delete\", g(\"delete\")),\n                    section: n(\"buttons.confirm\", \"Are you sure?\"),\n                    parent: \"delete\",\n                    perform: ()=>{\n                        H({\n                            resource: t.name,\n                            id: c\n                        }, {\n                            onSuccess: ()=>{\n                                let o = d({\n                                    resource: t,\n                                    action: \"list\",\n                                    legacy: l === \"legacy\"\n                                });\n                                o && (l === \"legacy\" ? K(o) : b({\n                                    to: o\n                                }));\n                            }\n                        });\n                    }\n                }), (0,kbar__WEBPACK_IMPORTED_MODULE_1__.createAction)({\n                    name: n(\"buttons.cancel\", \"Cancel\"),\n                    parent: \"delete\",\n                    perform: ()=>null\n                }));\n            }\n        }\n        return x;\n    }, \"createActionWithResource\");\n    (0,kbar__WEBPACK_IMPORTED_MODULE_1__.useRegisterActions)(B, [\n        B\n    ]);\n}, \"useRefineKbar\");\n\n\nvar S = r(()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(kbar__WEBPACK_IMPORTED_MODULE_1__.KBarPortal, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(kbar__WEBPACK_IMPORTED_MODULE_1__.KBarPositioner, {\n        style: {\n            opacity: 1,\n            transition: \"background 0.35s cubic-bezier(0.4, 0, 0.2, 1) 0s\",\n            backdropFilter: \"saturate(180%) blur(1px)\",\n            background: \"rgba(0, 0, 0, 0.1)\",\n            zIndex: \"9999\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(kbar__WEBPACK_IMPORTED_MODULE_1__.KBarAnimator, {\n        style: {\n            maxWidth: \"600px\",\n            width: \"100%\",\n            background: \"white\",\n            color: \"black\",\n            borderRadius: \"8px\",\n            overflow: \"hidden\",\n            boxShadow: \"0px 4px 4px rgba(0, 0, 0, 0.25)\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(kbar__WEBPACK_IMPORTED_MODULE_1__.KBarSearch, {\n        style: {\n            padding: \"12px 16px\",\n            fontSize: \"16px\",\n            width: \"100%\",\n            boxSizing: \"border-box\",\n            outline: \"none\",\n            border: \"none\",\n            background: \"rgb(252 252 252)\",\n            color: \"black\"\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(v, null)))), \"CommandBar\");\n\n\nvar Bt = {\n    padding: \"8px 16px\",\n    fontSize: \"14px\",\n    textTransform: \"uppercase\",\n    fontWeight: \"bold\",\n    opacity: .5\n}, v = r(()=>{\n    let { results: n, rootActionId: e } = (0,kbar__WEBPACK_IMPORTED_MODULE_1__.useMatches)();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(kbar__WEBPACK_IMPORTED_MODULE_1__.KBarResults, {\n        items: n,\n        onRender: ({ item: p, active: c })=>typeof p == \"string\" ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n                style: Bt\n            }, p) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(C, {\n                action: p,\n                active: c,\n                currentRootActionId: e\n            })\n    });\n}, \"RenderResults\");\n\nvar C = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ action: n, active: e, currentRootActionId: p }, c)=>{\n    var l;\n    let y = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        if (!p) return n.ancestors;\n        let d = n.ancestors.findIndex((b)=>b.id === p);\n        return n.ancestors.slice(d + 1);\n    }, [\n        n.ancestors,\n        p\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: c,\n        style: {\n            padding: \"12px 16px\",\n            background: e ? \"rgba(0 0 0 / 0.05)\" : \"transparent\",\n            borderLeft: `2px solid ${e ? \"rgb(28 28 29)\" : \"transparent\"}`,\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            cursor: \"pointer\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            gap: \"8px\",\n            alignItems: \"center\",\n            fontSize: 14\n        }\n    }, n.icon && n.icon, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, y.length > 0 && y.map((d)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n            key: d.id\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n            style: {\n                opacity: .5,\n                marginRight: 8\n            }\n        }, d.name), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n            style: {\n                marginRight: 8\n            }\n        }, \"›\"))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: n.name.toLocaleUpperCase() === \"DELETE\" ? \"red\" : \"black\"\n        }\n    }, n.name)), n.subtitle && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            fontSize: 12\n        }\n    }, n.subtitle))), (l = n.shortcut) != null && l.length ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        \"aria-hidden\": !0,\n        style: {\n            display: \"grid\",\n            gridAutoFlow: \"column\",\n            gap: \"4px\"\n        }\n    }, n.shortcut.map((d)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"kbd\", {\n            key: d,\n            style: {\n                padding: \"4px 6px\",\n                background: \"rgba(0 0 0 / .1)\",\n                borderRadius: \"4px\",\n                fontSize: 14\n            }\n        }, d))) : null);\n});\nC.displayName = \"ResultItem\";\n\nvar O = r(({ commandBarProps: n })=>{\n    let e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(w);\n    I();\n    let p = {\n        ...e,\n        ...n\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(S, {\n        ...p\n    });\n}, \"RefineKbar\");\nvar w = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({}), ge = r(({ children: n, commandBarProps: e })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(w.Provider, {\n        value: e ?? {}\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(kbar__WEBPACK_IMPORTED_MODULE_1__.KBarProvider, null, n)), \"RefineKbarProvider\");\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/kbar/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/mui/dist/index.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@refinedev/mui/dist/index.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthPage: () => (/* binding */ AuthPage),\n/* harmony export */   AutoSaveIndicator: () => (/* binding */ AutoSaveIndicator),\n/* harmony export */   BooleanField: () => (/* binding */ BooleanField),\n/* harmony export */   Breadcrumb: () => (/* binding */ Breadcrumb),\n/* harmony export */   CircularDeterminate: () => (/* binding */ CircularDeterminate),\n/* harmony export */   CloneButton: () => (/* binding */ CloneButton),\n/* harmony export */   Create: () => (/* binding */ Create),\n/* harmony export */   CreateButton: () => (/* binding */ CreateButton),\n/* harmony export */   DarkTheme: () => (/* binding */ DarkTheme),\n/* harmony export */   DateField: () => (/* binding */ DateField),\n/* harmony export */   DeleteButton: () => (/* binding */ DeleteButton),\n/* harmony export */   Edit: () => (/* binding */ Edit),\n/* harmony export */   EditButton: () => (/* binding */ EditButton),\n/* harmony export */   EmailField: () => (/* binding */ EmailField),\n/* harmony export */   ErrorComponent: () => (/* binding */ ErrorComponent),\n/* harmony export */   ExportButton: () => (/* binding */ ExportButton),\n/* harmony export */   FileField: () => (/* binding */ FileField),\n/* harmony export */   HamburgerMenu: () => (/* binding */ HamburgerMenu),\n/* harmony export */   ImportButton: () => (/* binding */ ImportButton),\n/* harmony export */   LightTheme: () => (/* binding */ LightTheme),\n/* harmony export */   List: () => (/* binding */ List2),\n/* harmony export */   ListButton: () => (/* binding */ ListButton),\n/* harmony export */   MarkdownField: () => (/* binding */ MarkdownField),\n/* harmony export */   NotistackSnackbarContent: () => (/* reexport safe */ notistack__WEBPACK_IMPORTED_MODULE_0__.SnackbarContent),\n/* harmony export */   NumberField: () => (/* binding */ NumberField),\n/* harmony export */   RefineSnackbarProvider: () => (/* binding */ RefineSnackbarProvider),\n/* harmony export */   RefineThemes: () => (/* binding */ RefineThemes),\n/* harmony export */   RefreshButton: () => (/* binding */ RefreshButton),\n/* harmony export */   SaveButton: () => (/* binding */ SaveButton),\n/* harmony export */   Show: () => (/* binding */ Show),\n/* harmony export */   ShowButton: () => (/* binding */ ShowButton),\n/* harmony export */   SnackbarProvider: () => (/* reexport safe */ notistack__WEBPACK_IMPORTED_MODULE_0__.SnackbarProvider),\n/* harmony export */   TagField: () => (/* binding */ TagField),\n/* harmony export */   TextFieldComponent: () => (/* binding */ TextField5),\n/* harmony export */   ThemedHeaderV2: () => (/* binding */ ThemedHeaderV2),\n/* harmony export */   ThemedLayoutContext: () => (/* binding */ ThemedLayoutContext),\n/* harmony export */   ThemedLayoutContextProvider: () => (/* binding */ ThemedLayoutContextProvider),\n/* harmony export */   ThemedLayoutV2: () => (/* binding */ ThemedLayoutV2),\n/* harmony export */   ThemedSiderV2: () => (/* binding */ ThemedSiderV2),\n/* harmony export */   ThemedTitleV2: () => (/* binding */ ThemedTitleV2),\n/* harmony export */   UrlField: () => (/* binding */ UrlField),\n/* harmony export */   useAutocomplete: () => (/* binding */ useAutocomplete),\n/* harmony export */   useDataGrid: () => (/* binding */ useDataGrid),\n/* harmony export */   useNotificationProvider: () => (/* binding */ useNotificationProvider),\n/* harmony export */   useSnackbar: () => (/* reexport safe */ notistack__WEBPACK_IMPORTED_MODULE_0__.useSnackbar),\n/* harmony export */   useThemedLayoutContext: () => (/* binding */ useThemedLayoutContext),\n/* harmony export */   withSnackbar: () => (/* reexport safe */ notistack__WEBPACK_IMPORTED_MODULE_0__.withSnackbar)\n/* harmony export */ });\n/* harmony import */ var notistack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! notistack */ \"(ssr)/./node_modules/notistack/dist/notistack.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _mui_material_Box__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @mui/material/Box */ \"(ssr)/./node_modules/@mui/material/Box/Box.js\");\n/* harmony import */ var _mui_material_Drawer__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @mui/material/Drawer */ \"(ssr)/./node_modules/@mui/material/Drawer/Drawer.js\");\n/* harmony import */ var _mui_material_List__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @mui/material/List */ \"(ssr)/./node_modules/@mui/material/List/List.js\");\n/* harmony import */ var _mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @mui/material/ListItemButton */ \"(ssr)/./node_modules/@mui/material/ListItemButton/ListItemButton.js\");\n/* harmony import */ var _mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @mui/material/ListItemIcon */ \"(ssr)/./node_modules/@mui/material/ListItemIcon/ListItemIcon.js\");\n/* harmony import */ var _mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @mui/material/ListItemText */ \"(ssr)/./node_modules/@mui/material/ListItemText/ListItemText.js\");\n/* harmony import */ var _mui_material_Collapse__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @mui/material/Collapse */ \"(ssr)/./node_modules/@mui/material/Collapse/Collapse.js\");\n/* harmony import */ var _mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @mui/material/Tooltip */ \"(ssr)/./node_modules/@mui/material/Tooltip/Tooltip.js\");\n/* harmony import */ var _mui_material_IconButton__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @mui/material/IconButton */ \"(ssr)/./node_modules/@mui/material/IconButton/IconButton.js\");\n/* harmony import */ var _mui_material_Paper__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @mui/material/Paper */ \"(ssr)/./node_modules/@mui/material/Paper/Paper.js\");\n/* harmony import */ var _mui_icons_material_esm_ListOutlined__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @mui/icons-material/esm/ListOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/ListOutlined.js\");\n/* harmony import */ var _mui_icons_material_esm_Logout__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @mui/icons-material/esm/Logout */ \"(ssr)/./node_modules/@mui/icons-material/esm/Logout.js\");\n/* harmony import */ var _mui_icons_material_esm_ExpandLess__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @mui/icons-material/esm/ExpandLess */ \"(ssr)/./node_modules/@mui/icons-material/esm/ExpandLess.js\");\n/* harmony import */ var _mui_icons_material_esm_ExpandMore__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @mui/icons-material/esm/ExpandMore */ \"(ssr)/./node_modules/@mui/icons-material/esm/ExpandMore.js\");\n/* harmony import */ var _mui_icons_material_esm_ChevronLeft__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @mui/icons-material/esm/ChevronLeft */ \"(ssr)/./node_modules/@mui/icons-material/esm/ChevronLeft.js\");\n/* harmony import */ var _mui_icons_material_esm_Dashboard__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @mui/icons-material/esm/Dashboard */ \"(ssr)/./node_modules/@mui/icons-material/esm/Dashboard.js\");\n/* harmony import */ var _refinedev_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @refinedev/core */ \"(ssr)/./node_modules/@refinedev/core/dist/index.mjs\");\n/* harmony import */ var lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es/isEqual.js */ \"(ssr)/./node_modules/lodash-es/isEqual.js\");\n/* harmony import */ var lodash_es_unionWith_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es/unionWith.js */ \"(ssr)/./node_modules/lodash-es/unionWith.js\");\n/* harmony import */ var lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash-es/differenceWith.js */ \"(ssr)/./node_modules/lodash-es/differenceWith.js\");\n/* harmony import */ var _mui_x_data_grid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @mui/x-data-grid */ \"(ssr)/./node_modules/@mui/x-data-grid/models/gridFilterItem.js\");\n/* harmony import */ var _mui_material_AppBar__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @mui/material/AppBar */ \"(ssr)/./node_modules/@mui/material/AppBar/AppBar.js\");\n/* harmony import */ var _mui_material_Stack__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @mui/material/Stack */ \"(ssr)/./node_modules/@mui/material/Stack/Stack.js\");\n/* harmony import */ var _mui_material_Toolbar__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @mui/material/Toolbar */ \"(ssr)/./node_modules/@mui/material/Toolbar/Toolbar.js\");\n/* harmony import */ var _mui_material_Typography__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @mui/material/Typography */ \"(ssr)/./node_modules/@mui/material/Typography/Typography.js\");\n/* harmony import */ var _mui_material_Avatar__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @mui/material/Avatar */ \"(ssr)/./node_modules/@mui/material/Avatar/Avatar.js\");\n/* harmony import */ var _mui_icons_material_esm_Menu__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @mui/icons-material/esm/Menu */ \"(ssr)/./node_modules/@mui/icons-material/esm/Menu.js\");\n/* harmony import */ var _mui_material_Link__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @mui/material/Link */ \"(ssr)/./node_modules/@mui/material/Link/Link.js\");\n/* harmony import */ var _mui_material_SvgIcon__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @mui/material/SvgIcon */ \"(ssr)/./node_modules/@mui/material/SvgIcon/SvgIcon.js\");\n/* harmony import */ var _mui_material_Button__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! @mui/material/Button */ \"(ssr)/./node_modules/@mui/material/Button/Button.js\");\n/* harmony import */ var _mui_material_Grid2__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @mui/material/Grid2 */ \"(ssr)/./node_modules/@mui/material/Grid2/Grid2.js\");\n/* harmony import */ var _mui_icons_material_esm_Info__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! @mui/icons-material/esm/Info */ \"(ssr)/./node_modules/@mui/icons-material/esm/Info.js\");\n/* harmony import */ var _refinedev_react_hook_form__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! @refinedev/react-hook-form */ \"(ssr)/./node_modules/@refinedev/react-hook-form/dist/index.mjs\");\n/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! react-hook-form */ \"(ssr)/./node_modules/react-hook-form/dist/index.esm.mjs\");\n/* harmony import */ var _mui_material_TextField__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! @mui/material/TextField */ \"(ssr)/./node_modules/@mui/material/TextField/TextField.js\");\n/* harmony import */ var _mui_material_Container__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! @mui/material/Container */ \"(ssr)/./node_modules/@mui/material/Container/Container.js\");\n/* harmony import */ var _mui_material_Card__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! @mui/material/Card */ \"(ssr)/./node_modules/@mui/material/Card/Card.js\");\n/* harmony import */ var _mui_material_CardContent__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! @mui/material/CardContent */ \"(ssr)/./node_modules/@mui/material/CardContent/CardContent.js\");\n/* harmony import */ var _mui_material_Checkbox__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! @mui/material/Checkbox */ \"(ssr)/./node_modules/@mui/material/Checkbox/Checkbox.js\");\n/* harmony import */ var _mui_material_FormControlLabel__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! @mui/material/FormControlLabel */ \"(ssr)/./node_modules/@mui/material/FormControlLabel/FormControlLabel.js\");\n/* harmony import */ var _mui_material_Divider__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! @mui/material/Divider */ \"(ssr)/./node_modules/@mui/material/Divider/Divider.js\");\n/* harmony import */ var _mui_material_CardHeader__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! @mui/material/CardHeader */ \"(ssr)/./node_modules/@mui/material/CardHeader/CardHeader.js\");\n/* harmony import */ var _mui_material_CardActions__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! @mui/material/CardActions */ \"(ssr)/./node_modules/@mui/material/CardActions/CardActions.js\");\n/* harmony import */ var _mui_material_CircularProgress__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! @mui/material/CircularProgress */ \"(ssr)/./node_modules/@mui/material/CircularProgress/CircularProgress.js\");\n/* harmony import */ var _mui_system__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! @mui/system */ \"(ssr)/./node_modules/@mui/system/esm/colorManipulator/colorManipulator.js\");\n/* harmony import */ var _mui_icons_material_esm_ArrowBack__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! @mui/icons-material/esm/ArrowBack */ \"(ssr)/./node_modules/@mui/icons-material/esm/ArrowBack.js\");\n/* harmony import */ var _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! @refinedev/ui-types */ \"(ssr)/./node_modules/@refinedev/ui-types/dist/index.mjs\");\n/* harmony import */ var _mui_icons_material_esm_AddBoxOutlined__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! @mui/icons-material/esm/AddBoxOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/AddBoxOutlined.js\");\n/* harmony import */ var _mui_icons_material_esm_EditOutlined__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! @mui/icons-material/esm/EditOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/EditOutlined.js\");\n/* harmony import */ var _mui_material_Dialog__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! @mui/material/Dialog */ \"(ssr)/./node_modules/@mui/material/Dialog/Dialog.js\");\n/* harmony import */ var _mui_material_DialogActions__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! @mui/material/DialogActions */ \"(ssr)/./node_modules/@mui/material/DialogActions/DialogActions.js\");\n/* harmony import */ var _mui_material_DialogTitle__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! @mui/material/DialogTitle */ \"(ssr)/./node_modules/@mui/material/DialogTitle/DialogTitle.js\");\n/* harmony import */ var _mui_lab_LoadingButton__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! @mui/lab/LoadingButton */ \"(ssr)/./node_modules/@mui/lab/LoadingButton/LoadingButton.js\");\n/* harmony import */ var _mui_icons_material_esm_DeleteOutline__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! @mui/icons-material/esm/DeleteOutline */ \"(ssr)/./node_modules/@mui/icons-material/esm/DeleteOutline.js\");\n/* harmony import */ var _mui_icons_material_esm_RefreshOutlined__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! @mui/icons-material/esm/RefreshOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/RefreshOutlined.js\");\n/* harmony import */ var _mui_icons_material_esm_VisibilityOutlined__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! @mui/icons-material/esm/VisibilityOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/VisibilityOutlined.js\");\n/* harmony import */ var _mui_icons_material_esm_ImportExportOutlined__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! @mui/icons-material/esm/ImportExportOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/ImportExportOutlined.js\");\n/* harmony import */ var _mui_icons_material_esm_SaveOutlined__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! @mui/icons-material/esm/SaveOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/SaveOutlined.js\");\n/* harmony import */ var _mui_material_Chip__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! @mui/material/Chip */ \"(ssr)/./node_modules/@mui/material/Chip/Chip.js\");\n/* harmony import */ var _mui_icons_material_esm_CheckOutlined__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! @mui/icons-material/esm/CheckOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/CheckOutlined.js\");\n/* harmony import */ var _mui_icons_material_esm_CloseOutlined__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! @mui/icons-material/esm/CloseOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/CloseOutlined.js\");\n/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! dayjs */ \"(ssr)/./node_modules/dayjs/dayjs.min.js\");\n/* harmony import */ var dayjs_plugin_localizedFormat_js__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! dayjs/plugin/localizedFormat.js */ \"(ssr)/./node_modules/dayjs/plugin/localizedFormat.js\");\n/* harmony import */ var react_markdown__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! react-markdown */ \"(ssr)/./node_modules/react-markdown/src/react-markdown.js\");\n/* harmony import */ var remark_gfm__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! remark-gfm */ \"(ssr)/./node_modules/remark-gfm/index.js\");\n/* harmony import */ var _mui_material_Breadcrumbs__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! @mui/material/Breadcrumbs */ \"(ssr)/./node_modules/@mui/material/Breadcrumbs/Breadcrumbs.js\");\n/* harmony import */ var _mui_icons_material_esm_HomeOutlined__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! @mui/icons-material/esm/HomeOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/HomeOutlined.js\");\n/* harmony import */ var _mui_icons_material_esm_MoreHorizOutlined__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! @mui/icons-material/esm/MoreHorizOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/MoreHorizOutlined.js\");\n/* harmony import */ var _mui_icons_material_esm_SyncOutlined__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! @mui/icons-material/esm/SyncOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/SyncOutlined.js\");\n/* harmony import */ var _mui_icons_material_esm_TaskAltOutlined__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! @mui/icons-material/esm/TaskAltOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/TaskAltOutlined.js\");\n/* harmony import */ var _mui_icons_material_esm_ErrorOutlineOutlined__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! @mui/icons-material/esm/ErrorOutlineOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/ErrorOutlineOutlined.js\");\n/* harmony import */ var _mui_material_styles__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! @mui/material/styles */ \"(ssr)/./node_modules/@mui/material/styles/createTheme.js\");\n/* harmony import */ var _mui_icons_material_esm_UndoOutlined__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! @mui/icons-material/esm/UndoOutlined */ \"(ssr)/./node_modules/@mui/icons-material/esm/UndoOutlined.js\");\n/* harmony import */ var _mui_material_styles__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! @mui/material/styles */ \"(ssr)/./node_modules/@mui/material/styles/styled.js\");\n/* __next_internal_client_entry_do_not_use__ AuthPage,AutoSaveIndicator,BooleanField,Breadcrumb,CircularDeterminate,CloneButton,Create,CreateButton,DarkTheme,DateField,DeleteButton,Edit,EditButton,EmailField,ErrorComponent,ExportButton,FileField,HamburgerMenu,ImportButton,LightTheme,List,ListButton,MarkdownField,NotistackSnackbarContent,NumberField,RefineSnackbarProvider,RefineThemes,RefreshButton,SaveButton,Show,ShowButton,SnackbarProvider,TagField,TextFieldComponent,ThemedHeaderV2,ThemedLayoutContext,ThemedLayoutContextProvider,ThemedLayoutV2,ThemedSiderV2,ThemedTitleV2,UrlField,useAutocomplete,useDataGrid,useNotificationProvider,useSnackbar,useThemedLayoutContext,withSnackbar auto */ var __defProp = Object.defineProperty;\nvar __name = (target, value)=>__defProp(target, \"name\", {\n        value,\n        configurable: true\n    });\n// src/index.tsx\n\n// src/components/themedLayoutV2/index.tsx\n\n\n// src/contexts/themedLayoutContext/index.tsx\n\nvar ThemedLayoutContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext({\n    siderCollapsed: false,\n    mobileSiderOpen: false,\n    setSiderCollapsed: ()=>void 0,\n    setMobileSiderOpen: ()=>void 0\n});\nvar ThemedLayoutContextProvider = /* @__PURE__ */ __name(({ children, initialSiderCollapsed, onSiderCollapsed })=>{\n    const [siderCollapsed, setSiderCollapsedState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(initialSiderCollapsed ?? false);\n    const [mobileSiderOpen, setMobileSiderOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const setSiderCollapsed = /* @__PURE__ */ __name((collapsed)=>{\n        setSiderCollapsedState(collapsed);\n        if (onSiderCollapsed) {\n            onSiderCollapsed(collapsed);\n        }\n    }, \"setSiderCollapsed\");\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ThemedLayoutContext.Provider, {\n        value: {\n            siderCollapsed,\n            mobileSiderOpen,\n            setSiderCollapsed,\n            setMobileSiderOpen,\n            onSiderCollapsed\n        }\n    }, children);\n}, \"ThemedLayoutContextProvider\");\n// src/components/themedLayoutV2/sider/index.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// src/hooks/useAutocomplete/index.ts\n\n\n\nvar useAutocomplete = /* @__PURE__ */ __name((props)=>{\n    var _a, _b, _c, _d;\n    const { query, defaultValueQuery, onSearch, overtime } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useSelect)(props);\n    return {\n        autocompleteProps: {\n            options: props.selectedOptionsOrder === \"selected-first\" ? (0,lodash_es_unionWith_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(((_a = defaultValueQuery.data) == null ? void 0 : _a.data) || [], ((_b = query.data) == null ? void 0 : _b.data) || [], lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]) : (0,lodash_es_unionWith_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(((_c = query.data) == null ? void 0 : _c.data) || [], ((_d = defaultValueQuery.data) == null ? void 0 : _d.data) || [], lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]),\n            loading: query.isFetching || defaultValueQuery.isFetching,\n            onInputChange: (event, value)=>{\n                if ((event == null ? void 0 : event.type) === \"change\") {\n                    onSearch(value);\n                } else if ((event == null ? void 0 : event.type) === \"click\") {\n                    onSearch(\"\");\n                }\n            },\n            filterOptions: (x)=>x\n        },\n        onSearch,\n        query,\n        defaultValueQuery,\n        queryResult: query,\n        defaultValueQueryResult: defaultValueQuery,\n        overtime\n    };\n}, \"useAutocomplete\");\n// src/hooks/useDataGrid/index.ts\n\n\n\n\n// src/definitions/dataGrid/index.ts\n\nvar transformSortModelToCrudSorting = /* @__PURE__ */ __name((sortModel)=>{\n    const sorter = sortModel.map(({ field, sort })=>({\n            field,\n            order: sort || \"asc\"\n        }));\n    return sorter;\n}, \"transformSortModelToCrudSorting\");\nvar transformCrudSortingToSortModel = /* @__PURE__ */ __name((crudSorting)=>{\n    const sortModel = crudSorting.map(({ field, order })=>({\n            field,\n            sort: order\n        }));\n    return sortModel;\n}, \"transformCrudSortingToSortModel\");\nvar transformMuiOperatorToCrudOperator = /* @__PURE__ */ __name((operatorValue)=>{\n    if (!operatorValue) {\n        return \"eq\";\n    }\n    switch(operatorValue){\n        case \"equals\":\n        case \"is\":\n        case \"=\":\n            return \"eq\";\n        case \"!=\":\n        case \"not\":\n            return \"ne\";\n        case \"contains\":\n            return \"contains\";\n        case \"isAnyOf\":\n            return \"in\";\n        case \">\":\n        case \"after\":\n            return \"gt\";\n        case \">=\":\n        case \"onOrAfter\":\n            return \"gte\";\n        case \"<\":\n        case \"before\":\n            return \"lt\";\n        case \"<=\":\n        case \"onOrBefore\":\n            return \"lte\";\n        case \"startsWith\":\n            return \"startswith\";\n        case \"endsWith\":\n            return \"endswith\";\n        case \"isEmpty\":\n            return \"null\";\n        case \"isNotEmpty\":\n            return \"nnull\";\n        default:\n            return operatorValue;\n    }\n}, \"transformMuiOperatorToCrudOperator\");\nvar transformFilterModelToCrudFilters = /* @__PURE__ */ __name(({ items, logicOperator })=>{\n    const filters = items.map(({ field, value, operator })=>{\n        const filter = {\n            field,\n            value: [\n                \"isEmpty\",\n                \"isNotEmpty\"\n            ].includes(operator) ? true : value ?? \"\",\n            operator: transformMuiOperatorToCrudOperator(operator)\n        };\n        return filter;\n    });\n    if (logicOperator === _mui_x_data_grid__WEBPACK_IMPORTED_MODULE_5__.GridLogicOperator.Or) {\n        return [\n            {\n                operator: \"or\",\n                value: filters\n            }\n        ];\n    }\n    return filters;\n}, \"transformFilterModelToCrudFilters\");\nvar transformCrudOperatorToMuiOperator = /* @__PURE__ */ __name((operator, columnType)=>{\n    switch(columnType){\n        case \"number\":\n            switch(operator){\n                case \"eq\":\n                    return \"=\";\n                case \"ne\":\n                    return \"!=\";\n                case \"gt\":\n                    return \">\";\n                case \"gte\":\n                    return \">=\";\n                case \"lt\":\n                    return \"<\";\n                case \"lte\":\n                    return \"<=\";\n                case \"null\":\n                    return \"isEmpty\";\n                case \"nnull\":\n                    return \"isNotEmpty\";\n                case \"in\":\n                    return \"isAnyOf\";\n                default:\n                    return operator;\n            }\n        case \"singleSelect\":\n        case \"boolean\":\n            switch(operator){\n                case \"eq\":\n                    return \"is\";\n                default:\n                    return operator;\n            }\n        case void 0:\n        case \"string\":\n            switch(operator){\n                case \"eq\":\n                    return \"equals\";\n                case \"contains\":\n                    return \"contains\";\n                case \"null\":\n                    return \"isEmpty\";\n                case \"nnull\":\n                    return \"isNotEmpty\";\n                case \"startswith\":\n                    return \"startsWith\";\n                case \"endswith\":\n                    return \"endsWith\";\n                case \"in\":\n                    return \"isAnyOf\";\n                default:\n                    return operator;\n            }\n        case \"date\":\n        case \"dateTime\":\n            switch(operator){\n                case \"eq\":\n                    return \"is\";\n                case \"ne\":\n                    return \"not\";\n                case \"gt\":\n                    return \"after\";\n                case \"gte\":\n                    return \"onOrAfter\";\n                case \"lt\":\n                    return \"before\";\n                case \"lte\":\n                    return \"onOrBefore\";\n                case \"null\":\n                    return \"isEmpty\";\n                case \"nnull\":\n                    return \"isNotEmpty\";\n                default:\n                    return operator;\n            }\n        default:\n            return operator;\n    }\n}, \"transformCrudOperatorToMuiOperator\");\nvar transformCrudFiltersToFilterModel = /* @__PURE__ */ __name((crudFilters, columnsType)=>{\n    var _a;\n    const gridFilterItems = [];\n    const isExistOrFilter = crudFilters.some((filter)=>filter.operator === \"or\");\n    if (columnsType) {\n        if (isExistOrFilter) {\n            const orLogicalFilters = (_a = crudFilters.find((filter)=>filter.operator === \"or\")) == null ? void 0 : _a.value;\n            orLogicalFilters.map(({ field, value, operator })=>{\n                const columnType = columnsType[field];\n                gridFilterItems.push({\n                    field,\n                    operator: transformCrudOperatorToMuiOperator(operator, columnType),\n                    value: value === \"\" ? void 0 : value,\n                    id: field + operator\n                });\n            });\n        } else {\n            crudFilters.map(({ field, value, operator })=>{\n                const columnType = columnsType[field];\n                gridFilterItems.push({\n                    field,\n                    operator: transformCrudOperatorToMuiOperator(operator, columnType),\n                    value: value === \"\" ? void 0 : value,\n                    id: field + operator\n                });\n            });\n        }\n    }\n    return {\n        items: gridFilterItems,\n        // If there is \"or\" filter, default link operator is \"or\"\n        logicOperator: isExistOrFilter ? _mui_x_data_grid__WEBPACK_IMPORTED_MODULE_5__.GridLogicOperator.Or : _mui_x_data_grid__WEBPACK_IMPORTED_MODULE_5__.GridLogicOperator.And\n    };\n}, \"transformCrudFiltersToFilterModel\");\n// src/hooks/useDataGrid/index.ts\nfunction useDataGrid({ onSearch: onSearchProp, initialCurrent, initialPageSize = 25, pagination, hasPagination = true, initialSorter, permanentSorter, defaultSetFilterBehavior = \"replace\", initialFilter, permanentFilter, filters: filtersFromProp, sorters: sortersFromProp, syncWithLocation: syncWithLocationProp, resource: resourceFromProp, successNotification, errorNotification, queryOptions, liveMode: liveModeFromProp, onLiveEvent, liveParams, meta, metaData, dataProviderName, overtimeOptions, editable = false, updateMutationOptions } = {}) {\n    const liveMode = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLiveMode)(liveModeFromProp);\n    const columnsTypes = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    const { identifier } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResourceParams)({\n        resource: resourceFromProp\n    });\n    const { tableQueryResult, tableQuery, current, setCurrent, pageSize, setPageSize, filters, setFilters, sorters, setSorters, sorter, setSorter, pageCount, createLinkForSyncWithLocation, overtime } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTable)({\n        permanentSorter,\n        permanentFilter,\n        initialCurrent,\n        initialPageSize,\n        pagination,\n        hasPagination,\n        initialSorter,\n        initialFilter,\n        filters: filtersFromProp,\n        sorters: sortersFromProp,\n        syncWithLocation: syncWithLocationProp,\n        defaultSetFilterBehavior,\n        resource: resourceFromProp,\n        successNotification,\n        errorNotification,\n        queryOptions,\n        liveMode: liveModeFromProp,\n        onLiveEvent,\n        liveParams,\n        meta: (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(meta, metaData),\n        metaData: (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(meta, metaData),\n        dataProviderName,\n        overtimeOptions\n    });\n    const [muiCrudFilters, setMuiCrudFilters] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(filters);\n    const { data, isFetched, isLoading } = tableQueryResult;\n    const isServerSideFilteringEnabled = ((filtersFromProp == null ? void 0 : filtersFromProp.mode) || \"server\") === \"server\";\n    const isServerSideSortingEnabled = ((sortersFromProp == null ? void 0 : sortersFromProp.mode) || \"server\") === \"server\";\n    const hasPaginationString = hasPagination === false ? \"off\" : \"server\";\n    const isPaginationEnabled = ((pagination == null ? void 0 : pagination.mode) ?? hasPaginationString) !== \"off\";\n    const preferredPermanentSorters = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(sortersFromProp == null ? void 0 : sortersFromProp.permanent, permanentSorter) ?? [];\n    const preferredPermanentFilters = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(filtersFromProp == null ? void 0 : filtersFromProp.permanent, permanentFilter) ?? [];\n    const handlePageChange = /* @__PURE__ */ __name((page)=>{\n        if (isPaginationEnabled) {\n            setCurrent(page + 1);\n        }\n    }, \"handlePageChange\");\n    const handlePageSizeChange = /* @__PURE__ */ __name((pageSize2)=>{\n        if (isPaginationEnabled) {\n            setPageSize(pageSize2);\n        }\n    }, \"handlePageSizeChange\");\n    const handleSortModelChange = /* @__PURE__ */ __name((sortModel)=>{\n        const crudSorting = transformSortModelToCrudSorting(sortModel);\n        setSorters(crudSorting);\n    }, \"handleSortModelChange\");\n    const handleFilterModelChange = /* @__PURE__ */ __name((filterModel)=>{\n        const crudFilters = transformFilterModelToCrudFilters(filterModel);\n        setMuiCrudFilters(crudFilters);\n        setFilters(crudFilters.filter((f)=>f.value !== \"\"));\n        if (isPaginationEnabled) {\n            setCurrent(1);\n        }\n    }, \"handleFilterModelChange\");\n    const search = /* @__PURE__ */ __name(async (value)=>{\n        if (onSearchProp) {\n            const searchFilters = await onSearchProp(value);\n            setMuiCrudFilters(searchFilters);\n            setFilters(searchFilters.filter((f)=>f.value !== \"\"));\n            if (isPaginationEnabled) {\n                setCurrent(1);\n            }\n        }\n    }, \"search\");\n    const dataGridPaginationValues = /* @__PURE__ */ __name(()=>{\n        if (isPaginationEnabled) {\n            return {\n                paginationMode: \"server\",\n                paginationModel: {\n                    page: current - 1,\n                    pageSize\n                },\n                onPaginationModelChange: (model)=>{\n                    handlePageChange(model.page);\n                    handlePageSizeChange(model.pageSize);\n                }\n            };\n        }\n        return {\n            paginationMode: \"client\"\n        };\n    }, \"dataGridPaginationValues\");\n    const { mutate } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useUpdate)({\n        mutationOptions: updateMutationOptions\n    });\n    const processRowUpdate = /* @__PURE__ */ __name(async (newRow, oldRow)=>{\n        if (!editable) {\n            return Promise.resolve(oldRow);\n        }\n        if (!identifier) {\n            return Promise.reject(new Error(\"Resource is not defined\"));\n        }\n        return new Promise((resolve, reject)=>{\n            mutate({\n                resource: identifier,\n                id: newRow.id,\n                values: newRow\n            }, {\n                onError: (error)=>{\n                    reject(error);\n                },\n                onSuccess: (data2)=>{\n                    resolve(newRow);\n                }\n            });\n        });\n    }, \"processRowUpdate\");\n    return {\n        tableQueryResult,\n        tableQuery,\n        dataGridProps: {\n            disableRowSelectionOnClick: true,\n            rows: (data == null ? void 0 : data.data) || [],\n            loading: liveMode === \"auto\" ? isLoading : !isFetched,\n            rowCount: (data == null ? void 0 : data.total) || 0,\n            ...dataGridPaginationValues(),\n            sortingMode: isServerSideSortingEnabled ? \"server\" : \"client\",\n            sortModel: transformCrudSortingToSortModel((0,lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(sorters, preferredPermanentSorters, lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])),\n            onSortModelChange: handleSortModelChange,\n            filterMode: isServerSideFilteringEnabled ? \"server\" : \"client\",\n            filterModel: transformCrudFiltersToFilterModel((0,lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(muiCrudFilters, preferredPermanentFilters, lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]), columnsTypes.current),\n            onFilterModelChange: handleFilterModelChange,\n            onStateChange: (state)=>{\n                const newColumnsTypes = Object.fromEntries(Object.entries(state.columns.lookup).map(([key, value])=>{\n                    return [\n                        key,\n                        value.type\n                    ];\n                }));\n                const isStateChanged = !(0,lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(newColumnsTypes, columnsTypes);\n                if (isStateChanged) {\n                    columnsTypes.current = newColumnsTypes;\n                }\n            },\n            processRowUpdate: editable ? processRowUpdate : void 0\n        },\n        current,\n        setCurrent,\n        pageSize,\n        setPageSize,\n        pageCount,\n        sorters,\n        setSorters,\n        sorter,\n        setSorter,\n        filters,\n        setFilters,\n        search,\n        createLinkForSyncWithLocation,\n        overtime\n    };\n}\n__name(useDataGrid, \"useDataGrid\");\n// src/hooks/useThemedLayoutContext/index.ts\n\nvar useThemedLayoutContext = /* @__PURE__ */ __name(()=>{\n    const { mobileSiderOpen, siderCollapsed, setMobileSiderOpen, setSiderCollapsed } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ThemedLayoutContext);\n    return {\n        mobileSiderOpen,\n        siderCollapsed,\n        setMobileSiderOpen,\n        setSiderCollapsed\n    };\n}, \"useThemedLayoutContext\");\n// src/components/themedLayoutV2/sider/index.tsx\nvar ThemedSiderV2 = /* @__PURE__ */ __name(({ Title: TitleFromProps, render, meta, activeItemDisabled = false })=>{\n    const { siderCollapsed, setSiderCollapsed, mobileSiderOpen, setMobileSiderOpen } = useThemedLayoutContext();\n    const drawerWidth = /* @__PURE__ */ __name(()=>{\n        if (siderCollapsed) return 56;\n        return 240;\n    }, \"drawerWidth\");\n    const t = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const Link4 = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)();\n    const { Link: LegacyLink } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)();\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link4;\n    const { hasDashboard } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)();\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const { menuItems, selectedKey, defaultOpenKeys } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useMenu)({\n        meta\n    });\n    const isExistAuthentication = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useIsExistAuthentication)();\n    const TitleFromContext = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTitle)();\n    const authProvider = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)();\n    const { warnWhen, setWarnWhen } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useWarnAboutChange)();\n    const { mutate: mutateLogout } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLogout)({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)\n    });\n    const [open, setOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(()=>{\n        setOpen((previous)=>{\n            const previousKeys = Object.keys(previous);\n            const previousOpenKeys = previousKeys.filter((key)=>previous[key]);\n            const uniqueKeys = /* @__PURE__ */ new Set([\n                ...previousOpenKeys,\n                ...defaultOpenKeys\n            ]);\n            const uniqueKeysRecord = Object.fromEntries(Array.from(uniqueKeys.values()).map((key)=>[\n                    key,\n                    true\n                ]));\n            return uniqueKeysRecord;\n        });\n    }, [\n        defaultOpenKeys\n    ]);\n    const RenderToTitle = TitleFromProps ?? TitleFromContext ?? ThemedTitleV2;\n    const handleClick = /* @__PURE__ */ __name((key)=>{\n        setOpen({\n            ...open,\n            [key]: !open[key]\n        });\n    }, \"handleClick\");\n    const renderTreeView = /* @__PURE__ */ __name((tree, selectedKey2)=>{\n        return tree.map((item)=>{\n            const { icon, label, route, name, children, parentName, meta: meta2, options } = item;\n            const isOpen = open[item.key || \"\"] || false;\n            const isSelected = item.key === selectedKey2;\n            const isNested = !((0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(meta2 == null ? void 0 : meta2.parent, options == null ? void 0 : options.parent, parentName) === void 0);\n            if (children.length > 0) {\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.CanAccess, {\n                    key: item.key,\n                    resource: name,\n                    action: \"list\",\n                    params: {\n                        resource: item\n                    }\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n                    key: item.key\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                    title: label ?? name,\n                    placement: \"right\",\n                    disableHoverListener: !siderCollapsed,\n                    arrow: true\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                    onClick: ()=>{\n                        if (siderCollapsed) {\n                            setSiderCollapsed(false);\n                            if (!isOpen) {\n                                handleClick(item.key || \"\");\n                            }\n                        } else {\n                            handleClick(item.key || \"\");\n                        }\n                    },\n                    sx: {\n                        pl: isNested ? 4 : 2,\n                        justifyContent: \"center\"\n                    }\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                    sx: {\n                        justifyContent: \"center\",\n                        minWidth: \"24px\",\n                        transition: \"margin-right 0.3s\",\n                        marginRight: siderCollapsed ? \"0px\" : \"12px\",\n                        color: \"currentColor\"\n                    }\n                }, icon ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ListOutlined__WEBPACK_IMPORTED_MODULE_10__[\"default\"], null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n                    primary: label,\n                    primaryTypographyProps: {\n                        noWrap: true,\n                        fontSize: \"14px\"\n                    }\n                }), isOpen ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ExpandLess__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n                    sx: {\n                        color: \"text.icon\"\n                    }\n                }) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ExpandMore__WEBPACK_IMPORTED_MODULE_13__[\"default\"], {\n                    sx: {\n                        color: \"text.icon\"\n                    }\n                }))), !siderCollapsed && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Collapse__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n                    in: open[item.key || \"\"],\n                    timeout: \"auto\",\n                    unmountOnExit: true\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_List__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n                    component: \"div\",\n                    disablePadding: true\n                }, renderTreeView(children, selectedKey2)))));\n            }\n            const linkStyle = activeItemDisabled && isSelected ? {\n                pointerEvents: \"none\"\n            } : {};\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.CanAccess, {\n                key: item.key,\n                resource: name,\n                action: \"list\",\n                params: {\n                    resource: item\n                }\n            }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                title: label ?? name,\n                placement: \"right\",\n                disableHoverListener: !siderCollapsed,\n                arrow: true\n            }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n                component: ActiveLink,\n                to: route,\n                selected: isSelected,\n                style: linkStyle,\n                onClick: ()=>{\n                    setMobileSiderOpen(false);\n                },\n                sx: {\n                    pl: isNested ? 4 : 2,\n                    py: isNested ? 1.25 : 1,\n                    justifyContent: \"center\",\n                    color: isSelected ? \"primary.main\" : \"text.primary\"\n                }\n            }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n                sx: {\n                    justifyContent: \"center\",\n                    transition: \"margin-right 0.3s\",\n                    marginRight: siderCollapsed ? \"0px\" : \"12px\",\n                    minWidth: \"24px\",\n                    color: \"currentColor\"\n                }\n            }, icon ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ListOutlined__WEBPACK_IMPORTED_MODULE_10__[\"default\"], null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n                primary: label,\n                primaryTypographyProps: {\n                    noWrap: true,\n                    fontSize: \"14px\"\n                }\n            }))));\n        });\n    }, \"renderTreeView\");\n    const dashboard = hasDashboard ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.CanAccess, {\n        resource: \"dashboard\",\n        action: \"list\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        title: translate(\"dashboard.title\", \"Dashboard\"),\n        placement: \"right\",\n        disableHoverListener: !siderCollapsed,\n        arrow: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n        component: ActiveLink,\n        to: \"/\",\n        selected: selectedKey === \"/\",\n        onClick: ()=>{\n            setMobileSiderOpen(false);\n        },\n        sx: {\n            pl: 2,\n            py: 1,\n            justifyContent: \"center\",\n            color: selectedKey === \"/\" ? \"primary.main\" : \"text.primary\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n        sx: {\n            justifyContent: \"center\",\n            minWidth: \"24px\",\n            transition: \"margin-right 0.3s\",\n            marginRight: siderCollapsed ? \"0px\" : \"12px\",\n            color: \"currentColor\",\n            fontSize: \"14px\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_Dashboard__WEBPACK_IMPORTED_MODULE_16__[\"default\"], null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n        primary: translate(\"dashboard.title\", \"Dashboard\"),\n        primaryTypographyProps: {\n            noWrap: true,\n            fontSize: \"14px\"\n        }\n    })))) : null;\n    const handleLogout = /* @__PURE__ */ __name(()=>{\n        if (warnWhen) {\n            const confirm = window.confirm(t(\"warnWhenUnsavedChanges\", \"Are you sure you want to leave? You have unsaved changes.\"));\n            if (confirm) {\n                setWarnWhen(false);\n                mutateLogout();\n            }\n        } else {\n            mutateLogout();\n        }\n    }, \"handleLogout\");\n    const logout = isExistAuthentication && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        title: t(\"buttons.logout\", \"Logout\"),\n        placement: \"right\",\n        disableHoverListener: !siderCollapsed,\n        arrow: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemButton__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {\n        key: \"logout\",\n        onClick: ()=>handleLogout(),\n        sx: {\n            justifyContent: \"center\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemIcon__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {\n        sx: {\n            justifyContent: \"center\",\n            minWidth: \"24px\",\n            transition: \"margin-right 0.3s\",\n            marginRight: siderCollapsed ? \"0px\" : \"12px\",\n            color: \"currentColor\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_Logout__WEBPACK_IMPORTED_MODULE_17__[\"default\"], null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_ListItemText__WEBPACK_IMPORTED_MODULE_11__[\"default\"], {\n        primary: t(\"buttons.logout\", \"Logout\"),\n        primaryTypographyProps: {\n            noWrap: true,\n            fontSize: \"14px\"\n        }\n    })));\n    const items = renderTreeView(menuItems, selectedKey);\n    const renderSider = /* @__PURE__ */ __name(()=>{\n        if (render) {\n            return render({\n                dashboard,\n                logout,\n                items,\n                collapsed: siderCollapsed\n            });\n        }\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, dashboard, items, logout);\n    }, \"renderSider\");\n    const drawer = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_List__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n        disablePadding: true,\n        sx: {\n            flexGrow: 1,\n            paddingTop: \"16px\"\n        }\n    }, renderSider());\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        sx: {\n            width: {\n                xs: drawerWidth()\n            },\n            display: {\n                xs: \"none\",\n                md: \"block\"\n            },\n            transition: \"width 0.3s ease\"\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        component: \"nav\",\n        sx: {\n            position: \"fixed\",\n            zIndex: 1101,\n            width: {\n                sm: drawerWidth()\n            },\n            display: \"flex\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Drawer__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {\n        variant: \"temporary\",\n        elevation: 2,\n        open: mobileSiderOpen,\n        onClose: ()=>setMobileSiderOpen(false),\n        ModalProps: {\n            keepMounted: true\n        },\n        sx: {\n            display: {\n                sm: \"block\",\n                md: \"none\"\n            }\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        sx: {\n            width: drawerWidth()\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        sx: {\n            height: 64,\n            display: \"flex\",\n            alignItems: \"center\",\n            paddingLeft: \"16px\",\n            fontSize: \"14px\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(RenderToTitle, {\n        collapsed: false\n    })), drawer)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Drawer__WEBPACK_IMPORTED_MODULE_19__[\"default\"], {\n        variant: \"permanent\",\n        sx: {\n            display: {\n                xs: \"none\",\n                md: \"block\"\n            },\n            \"& .MuiDrawer-paper\": {\n                width: drawerWidth(),\n                overflow: \"hidden\",\n                transition: \"width 200ms cubic-bezier(0.4, 0, 0.6, 1) 0ms\"\n            }\n        },\n        open: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Paper__WEBPACK_IMPORTED_MODULE_20__[\"default\"], {\n        elevation: 0,\n        sx: {\n            fontSize: \"14px\",\n            width: \"100%\",\n            height: 64,\n            display: \"flex\",\n            flexShrink: 0,\n            alignItems: \"center\",\n            justifyContent: siderCollapsed ? \"center\" : \"space-between\",\n            paddingLeft: siderCollapsed ? 0 : \"16px\",\n            paddingRight: siderCollapsed ? 0 : \"8px\",\n            variant: \"outlined\",\n            borderRadius: 0,\n            borderBottom: (theme)=>`1px solid ${theme.palette.action.focus}`\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(RenderToTitle, {\n        collapsed: siderCollapsed\n    }), !siderCollapsed && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_21__[\"default\"], {\n        size: \"small\",\n        onClick: ()=>setSiderCollapsed(true)\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ChevronLeft__WEBPACK_IMPORTED_MODULE_22__[\"default\"], null))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        sx: {\n            flexGrow: 1,\n            overflowX: \"hidden\",\n            overflowY: \"auto\"\n        }\n    }, drawer))));\n}, \"ThemedSiderV2\");\n// src/components/themedLayoutV2/header/index.tsx\n\n\n\n\n\n\n\n// src/components/themedLayoutV2/hamburgerMenu/index.tsx\n\n\n\nvar HamburgerIcon = /* @__PURE__ */ __name((props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_21__[\"default\"], {\n        color: \"inherit\",\n        \"aria-label\": \"open drawer\",\n        edge: \"start\",\n        ...props\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_Menu__WEBPACK_IMPORTED_MODULE_23__[\"default\"], null)), \"HamburgerIcon\");\nvar HamburgerMenu = /* @__PURE__ */ __name(()=>{\n    const { siderCollapsed, setSiderCollapsed, mobileSiderOpen, setMobileSiderOpen } = useThemedLayoutContext();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(HamburgerIcon, {\n        onClick: ()=>setSiderCollapsed(!siderCollapsed),\n        sx: {\n            mr: 2,\n            display: {\n                xs: \"none\",\n                md: \"flex\"\n            },\n            ...!siderCollapsed && {\n                display: \"none\"\n            }\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(HamburgerIcon, {\n        onClick: ()=>setMobileSiderOpen(!mobileSiderOpen),\n        sx: {\n            mr: 2,\n            display: {\n                xs: \"flex\",\n                md: \"none\"\n            },\n            ...mobileSiderOpen && {\n                display: \"none\"\n            }\n        }\n    }));\n}, \"HamburgerMenu\");\n// src/components/themedLayoutV2/header/index.tsx\nvar ThemedHeaderV2 = /* @__PURE__ */ __name(({ isSticky, sticky })=>{\n    const authProvider = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)();\n    const { data: user } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useGetIdentity)({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)\n    });\n    const prefferedSticky = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(sticky, isSticky) ?? true;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_AppBar__WEBPACK_IMPORTED_MODULE_24__[\"default\"], {\n        position: prefferedSticky ? \"sticky\" : \"relative\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Toolbar__WEBPACK_IMPORTED_MODULE_25__[\"default\"], null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(HamburgerMenu, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Stack__WEBPACK_IMPORTED_MODULE_26__[\"default\"], {\n        direction: \"row\",\n        width: \"100%\",\n        justifyContent: \"flex-end\",\n        alignItems: \"center\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Stack__WEBPACK_IMPORTED_MODULE_26__[\"default\"], {\n        direction: \"row\",\n        gap: \"16px\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n    }, (user == null ? void 0 : user.name) && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n        variant: \"subtitle2\"\n    }, user == null ? void 0 : user.name), (user == null ? void 0 : user.avatar) && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Avatar__WEBPACK_IMPORTED_MODULE_28__[\"default\"], {\n        src: user == null ? void 0 : user.avatar,\n        alt: user == null ? void 0 : user.name\n    })))));\n}, \"ThemedHeaderV2\");\n// src/components/themedLayoutV2/index.tsx\nvar ThemedLayoutV2 = /* @__PURE__ */ __name(({ Sider, Header, Title, Footer, OffLayoutArea, children, initialSiderCollapsed, onSiderCollapsed, childrenBoxProps = {}, containerBoxProps = {} })=>{\n    const SiderToRender = Sider ?? ThemedSiderV2;\n    const HeaderToRender = Header ?? ThemedHeaderV2;\n    const { sx: childrenSx, ...restChildrenProps } = childrenBoxProps;\n    const { sx: containerSx, ...restContainerProps } = containerBoxProps;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ThemedLayoutContextProvider, {\n        initialSiderCollapsed,\n        onSiderCollapsed\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        sx: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            ...containerSx\n        },\n        ...restContainerProps\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(SiderToRender, {\n        Title\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        sx: [\n            {\n                display: \"flex\",\n                flexDirection: \"column\",\n                flex: 1,\n                minWidth: \"1px\",\n                minHeight: \"1px\"\n            }\n        ]\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(HeaderToRender, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        component: \"main\",\n        sx: {\n            p: {\n                xs: 1,\n                md: 2,\n                lg: 3\n            },\n            flexGrow: 1,\n            bgcolor: (theme)=>theme.palette.background.default,\n            ...childrenSx\n        },\n        ...restChildrenProps\n    }, children), Footer && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Footer, null)), OffLayoutArea && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(OffLayoutArea, null)));\n}, \"ThemedLayoutV2\");\n// src/components/themedLayoutV2/title/index.tsx\n\n\n\n\n\nvar ThemedTitleV2 = /* @__PURE__ */ __name(({ collapsed, wrapperStyles, icon: iconFromProps, text: textFromProps })=>{\n    const { title: { icon: defaultIcon, text: defaultText } = {} } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineOptions)();\n    const icon = typeof iconFromProps === \"undefined\" ? defaultIcon : iconFromProps;\n    const text = typeof textFromProps === \"undefined\" ? defaultText : textFromProps;\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const Link4 = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)();\n    const { Link: LegacyLink } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)();\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link4;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_29__[\"default\"], {\n        to: \"/\",\n        component: ActiveLink,\n        underline: \"none\",\n        sx: {\n            display: \"flex\",\n            alignItems: \"center\",\n            gap: \"12px\",\n            ...wrapperStyles\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_SvgIcon__WEBPACK_IMPORTED_MODULE_30__[\"default\"], {\n        height: \"24px\",\n        width: \"24px\",\n        color: \"primary\"\n    }, icon), !collapsed && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n        variant: \"h6\",\n        fontWeight: 700,\n        color: \"text.primary\",\n        fontSize: \"inherit\",\n        textOverflow: \"ellipsis\",\n        overflow: \"hidden\"\n    }, text));\n}, \"ThemedTitleV2\");\n// src/components/pages/error/index.tsx\n\n\n\n\n\n\n\n\n\nvar ErrorComponent = /* @__PURE__ */ __name(()=>{\n    const [errorMessage, setErrorMessage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    const { push } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useNavigation)();\n    const go = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useGo)();\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const { resource, action } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResource)();\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (resource && action) {\n            setErrorMessage(translate(\"pages.error.info\", {\n                action,\n                resource: resource == null ? void 0 : resource.name\n            }, `You may have forgotten to add the \"${action}\" component to \"${resource == null ? void 0 : resource.name}\" resource.`));\n        }\n    }, [\n        action,\n        resource\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Grid2__WEBPACK_IMPORTED_MODULE_31__[\"default\"], {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        mt: 20\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Grid2__WEBPACK_IMPORTED_MODULE_31__[\"default\"], {\n        container: true,\n        direction: \"column\",\n        display: \"flex\",\n        alignItems: \"center\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n        variant: \"h1\"\n    }, \"404\"), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Stack__WEBPACK_IMPORTED_MODULE_26__[\"default\"], {\n        direction: \"row\",\n        spacing: \"2\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_27__[\"default\"], null, translate(\"pages.error.404\", \"Sorry, the page you visited does not exist.\")), errorMessage && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        title: errorMessage\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_Info__WEBPACK_IMPORTED_MODULE_32__[\"default\"], {}))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_33__[\"default\"], {\n        onClick: ()=>{\n            if (routerType === \"legacy\") {\n                push(\"/\");\n            } else {\n                go({\n                    to: \"/\"\n                });\n            }\n        }\n    }, translate(\"pages.error.backHome\", \"Back Home\"))));\n}, \"ErrorComponent\");\n// src/components/pages/auth/index.tsx\n\n// src/components/pages/auth/components/login/index.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// src/components/pages/auth/components/styles.ts\nvar layoutStyles = {};\nvar titleStyles = {\n    textAlign: \"center\",\n    fontSize: \"24px\",\n    marginBottom: \"24px\",\n    overflowWrap: \"break-word\",\n    hyphens: \"manual\",\n    textOverflow: \"unset\",\n    whiteSpace: \"pre-wrap\"\n};\n// src/components/pages/auth/components/login/index.tsx\nvar LoginPage = /* @__PURE__ */ __name(({ providers, registerLink, forgotPasswordLink, rememberMe, contentProps, wrapperProps, renderContent, formProps, title, hideForm, mutationVariables })=>{\n    var _a;\n    const { onSubmit, ...useFormProps } = formProps || {};\n    const methods = (0,_refinedev_react_hook_form__WEBPACK_IMPORTED_MODULE_34__.useForm)({\n        ...useFormProps\n    });\n    const { register, handleSubmit, formState: { errors } } = methods;\n    const authProvider = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)();\n    const { mutate: login, isLoading } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLogin)({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)\n    });\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const Link4 = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)();\n    const { Link: LegacyLink } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)();\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link4;\n    const PageTitle = title === false ? null : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            marginBottom: \"32px\",\n            fontSize: \"20px\"\n        }\n    }, title ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ThemedTitleV2, {\n        collapsed: false,\n        wrapperStyles: {\n            gap: \"8px\"\n        }\n    }));\n    const renderProviders = /* @__PURE__ */ __name(()=>{\n        if (providers && providers.length > 0) {\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Stack__WEBPACK_IMPORTED_MODULE_26__[\"default\"], {\n                spacing: 1\n            }, providers.map((provider)=>{\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_33__[\"default\"], {\n                    key: provider.name,\n                    variant: \"outlined\",\n                    fullWidth: true,\n                    sx: {\n                        color: \"primary.light\",\n                        borderColor: \"primary.light\",\n                        textTransform: \"none\"\n                    },\n                    onClick: ()=>login({\n                            ...mutationVariables,\n                            providerName: provider.name\n                        }),\n                    startIcon: provider.icon\n                }, provider.label);\n            })), !hideForm && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Divider__WEBPACK_IMPORTED_MODULE_35__[\"default\"], {\n                sx: {\n                    fontSize: \"12px\",\n                    marginY: \"16px\"\n                }\n            }, translate(\"pages.login.divider\", \"or\")));\n        }\n        return null;\n    }, \"renderProviders\");\n    const Content = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Card__WEBPACK_IMPORTED_MODULE_36__[\"default\"], {\n        ...contentProps ?? {}\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardContent__WEBPACK_IMPORTED_MODULE_37__[\"default\"], {\n        sx: {\n            p: \"32px\",\n            \"&:last-child\": {\n                pb: \"32px\"\n            }\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n        component: \"h1\",\n        variant: \"h5\",\n        align: \"center\",\n        style: titleStyles,\n        color: \"primary\",\n        fontWeight: 700\n    }, translate(\"pages.login.title\", \"Sign in to your account\")), renderProviders(), !hideForm && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        component: \"form\",\n        onSubmit: handleSubmit((data)=>{\n            if (onSubmit) {\n                return onSubmit(data);\n            }\n            return login({\n                ...mutationVariables,\n                ...data\n            });\n        })\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_TextField__WEBPACK_IMPORTED_MODULE_38__[\"default\"], {\n        ...register(\"email\", {\n            required: translate(\"pages.login.errors.requiredEmail\", \"Email is required\")\n        }),\n        id: \"email\",\n        margin: \"normal\",\n        fullWidth: true,\n        label: translate(\"pages.login.fields.email\", \"Email\"),\n        error: !!errors.email,\n        name: \"email\",\n        type: \"email\",\n        autoComplete: \"email\",\n        sx: {\n            mt: 0\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_TextField__WEBPACK_IMPORTED_MODULE_38__[\"default\"], {\n        ...register(\"password\", {\n            required: translate(\"pages.login.errors.requiredPassword\", \"Password is required\")\n        }),\n        id: \"password\",\n        margin: \"normal\",\n        fullWidth: true,\n        name: \"password\",\n        label: translate(\"pages.login.fields.password\", \"Password\"),\n        helperText: (_a = errors == null ? void 0 : errors.password) == null ? void 0 : _a.message,\n        error: !!errors.password,\n        type: \"password\",\n        placeholder: \"●●●●●●●●\",\n        autoComplete: \"current-password\",\n        sx: {\n            mb: 0\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        component: \"div\",\n        sx: {\n            mt: \"24px\",\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\"\n        }\n    }, rememberMe ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_FormControlLabel__WEBPACK_IMPORTED_MODULE_39__[\"default\"], {\n        sx: {\n            span: {\n                fontSize: \"14px\",\n                color: \"text.secondary\"\n            }\n        },\n        color: \"secondary\",\n        control: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Checkbox__WEBPACK_IMPORTED_MODULE_40__[\"default\"], {\n            size: \"small\",\n            id: \"remember\",\n            ...register(\"remember\")\n        }),\n        label: translate(\"pages.login.buttons.rememberMe\", \"Remember me\")\n    }), forgotPasswordLink ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_29__[\"default\"], {\n        variant: \"body2\",\n        color: \"primary\",\n        fontSize: \"12px\",\n        component: ActiveLink,\n        underline: \"none\",\n        to: \"/forgot-password\"\n    }, translate(\"pages.login.buttons.forgotPassword\", \"Forgot password?\"))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_33__[\"default\"], {\n        type: \"submit\",\n        fullWidth: true,\n        variant: \"contained\",\n        disabled: isLoading,\n        sx: {\n            mt: \"24px\"\n        }\n    }, translate(\"pages.login.signin\", \"Sign in\"))), registerLink ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        sx: {\n            mt: \"24px\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n        textAlign: \"center\",\n        variant: \"body2\",\n        component: \"span\",\n        fontSize: \"12px\"\n    }, translate(\"pages.login.buttons.noAccount\", \"Don’t have an account?\")), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_29__[\"default\"], {\n        ml: \"4px\",\n        fontSize: \"12px\",\n        variant: \"body2\",\n        color: \"primary\",\n        component: ActiveLink,\n        underline: \"none\",\n        to: \"/register\",\n        fontWeight: \"bold\"\n    }, translate(\"pages.login.signup\", \"Sign up\")))));\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react_hook_form__WEBPACK_IMPORTED_MODULE_41__.FormProvider, {\n        ...methods\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        component: \"div\",\n        style: layoutStyles,\n        ...wrapperProps ?? {}\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Container__WEBPACK_IMPORTED_MODULE_42__[\"default\"], {\n        component: \"main\",\n        sx: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: hideForm ? \"flex-start\" : \"center\",\n            alignItems: \"center\",\n            minHeight: \"100dvh\",\n            padding: \"16px\",\n            width: \"100%\",\n            maxWidth: \"400px\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        sx: {\n            width: \"100%\",\n            maxWidth: \"400px\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            paddingTop: hideForm ? \"15dvh\" : 0\n        }\n    }, renderContent ? renderContent(Content, PageTitle) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, PageTitle, Content)))));\n}, \"LoginPage\");\n// src/components/pages/auth/components/register/index.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar RegisterPage = /* @__PURE__ */ __name(({ loginLink, wrapperProps, contentProps, renderContent, providers, formProps, title, hideForm, mutationVariables })=>{\n    const { onSubmit, ...useFormProps } = formProps || {};\n    const { register, handleSubmit, formState: { errors } } = (0,_refinedev_react_hook_form__WEBPACK_IMPORTED_MODULE_34__.useForm)({\n        ...useFormProps\n    });\n    const authProvider = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)();\n    const { mutate: registerMutate, isLoading } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRegister)({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)\n    });\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const Link4 = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)();\n    const { Link: LegacyLink } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)();\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link4;\n    const PageTitle = title === false ? null : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            marginBottom: \"32px\",\n            fontSize: \"20px\"\n        }\n    }, title ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ThemedTitleV2, {\n        collapsed: false,\n        wrapperStyles: {\n            gap: \"8px\"\n        }\n    }));\n    const renderProviders = /* @__PURE__ */ __name(()=>{\n        if (providers && providers.length > 0) {\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Stack__WEBPACK_IMPORTED_MODULE_26__[\"default\"], {\n                spacing: 1\n            }, providers.map((provider)=>{\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_33__[\"default\"], {\n                    key: provider.name,\n                    color: \"secondary\",\n                    fullWidth: true,\n                    variant: \"outlined\",\n                    sx: {\n                        color: \"primary.light\",\n                        borderColor: \"primary.light\",\n                        textTransform: \"none\"\n                    },\n                    onClick: ()=>registerMutate({\n                            ...mutationVariables,\n                            providerName: provider.name\n                        }),\n                    startIcon: provider.icon\n                }, provider.label);\n            })), !hideForm && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Divider__WEBPACK_IMPORTED_MODULE_35__[\"default\"], {\n                sx: {\n                    fontSize: \"12px\",\n                    marginY: \"16px\"\n                }\n            }, translate(\"pages.register.divider\", translate(\"pages.login.divider\", \"or\"))));\n        }\n        return null;\n    }, \"renderProviders\");\n    const Content = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Card__WEBPACK_IMPORTED_MODULE_36__[\"default\"], {\n        ...contentProps ?? {}\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardContent__WEBPACK_IMPORTED_MODULE_37__[\"default\"], {\n        sx: {\n            p: \"32px\",\n            \"&:last-child\": {\n                pb: \"32px\"\n            }\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n        component: \"h1\",\n        variant: \"h5\",\n        align: \"center\",\n        style: titleStyles,\n        color: \"primary\",\n        fontWeight: 700\n    }, translate(\"pages.register.title\", \"Sign up for your account\")), renderProviders(), !hideForm && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        component: \"form\",\n        onSubmit: handleSubmit((data)=>{\n            if (onSubmit) {\n                return onSubmit(data);\n            }\n            return registerMutate({\n                ...mutationVariables,\n                ...data\n            });\n        })\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_TextField__WEBPACK_IMPORTED_MODULE_38__[\"default\"], {\n        ...register(\"email\", {\n            required: translate(\"pages.register.errors.requiredEmail\", \"Email is required\"),\n            pattern: {\n                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                message: translate(\"pages.register.errors.validEmail\", \"Invalid email address\")\n            }\n        }),\n        id: \"email\",\n        margin: \"normal\",\n        fullWidth: true,\n        label: translate(\"pages.register.email\", \"Email\"),\n        error: !!errors.email,\n        helperText: errors[\"email\"] ? errors[\"email\"].message : \"\",\n        name: \"email\",\n        autoComplete: \"email\",\n        sx: {\n            mt: 0\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_TextField__WEBPACK_IMPORTED_MODULE_38__[\"default\"], {\n        ...register(\"password\", {\n            required: translate(\"pages.register.errors.requiredPassword\", \"Password is required\")\n        }),\n        id: \"password\",\n        margin: \"normal\",\n        fullWidth: true,\n        name: \"password\",\n        label: translate(\"pages.register.fields.password\", \"Password\"),\n        helperText: errors[\"password\"] ? errors[\"password\"].message : \"\",\n        error: !!errors.password,\n        type: \"password\",\n        placeholder: \"●●●●●●●●\",\n        autoComplete: \"current-password\",\n        sx: {\n            mb: 0\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_33__[\"default\"], {\n        type: \"submit\",\n        fullWidth: true,\n        variant: \"contained\",\n        disabled: isLoading,\n        sx: {\n            mt: \"24px\"\n        }\n    }, translate(\"pages.register.signup\", \"Sign up\"))), loginLink ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n        alignItems: \"center\",\n        sx: {\n            mt: \"24px\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n        variant: \"body2\",\n        component: \"span\",\n        fontSize: \"12px\"\n    }, translate(\"pages.register.buttons.haveAccount\", translate(\"pages.login.buttons.haveAccount\", \"Have an account?\"))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_29__[\"default\"], {\n        ml: \"4px\",\n        variant: \"body2\",\n        color: \"primary\",\n        component: ActiveLink,\n        underline: \"none\",\n        to: \"/login\",\n        fontSize: \"12px\",\n        fontWeight: \"bold\"\n    }, translate(\"pages.register.signin\", translate(\"pages.login.signin\", \"Sign in\"))))));\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        component: \"div\",\n        style: layoutStyles,\n        ...wrapperProps ?? {}\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Container__WEBPACK_IMPORTED_MODULE_42__[\"default\"], {\n        component: \"main\",\n        sx: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: hideForm ? \"flex-start\" : \"center\",\n            alignItems: \"center\",\n            minHeight: \"100dvh\",\n            padding: \"16px\",\n            width: \"100%\",\n            maxWidth: \"400px\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        sx: {\n            width: \"100%\",\n            maxWidth: \"400px\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            paddingTop: hideForm ? \"15dvh\" : 0\n        }\n    }, renderContent ? renderContent(Content, PageTitle) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, PageTitle, Content))));\n}, \"RegisterPage\");\n// src/components/pages/auth/components/forgotPassword/index.tsx\n\n\n\n\n\n\n\n\n\n\n\nvar ForgotPasswordPage = /* @__PURE__ */ __name(({ loginLink, wrapperProps, contentProps, renderContent, formProps, title, mutationVariables })=>{\n    const { onSubmit, ...useFormProps } = formProps || {};\n    const { register, handleSubmit, formState: { errors } } = (0,_refinedev_react_hook_form__WEBPACK_IMPORTED_MODULE_34__.useForm)({\n        ...useFormProps\n    });\n    const { mutate, isLoading } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useForgotPassword)();\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const Link4 = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)();\n    const { Link: LegacyLink } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)();\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : Link4;\n    const PageTitle = title === false ? null : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            marginBottom: \"32px\",\n            fontSize: \"20px\"\n        }\n    }, title ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ThemedTitleV2, {\n        collapsed: false,\n        wrapperStyles: {\n            gap: \"8px\"\n        }\n    }));\n    const Content = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Card__WEBPACK_IMPORTED_MODULE_36__[\"default\"], {\n        ...contentProps ?? {}\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardContent__WEBPACK_IMPORTED_MODULE_37__[\"default\"], {\n        sx: {\n            p: \"32px\",\n            \"&:last-child\": {\n                pb: \"32px\"\n            }\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n        component: \"h1\",\n        variant: \"h5\",\n        align: \"center\",\n        style: titleStyles,\n        color: \"primary\",\n        fontWeight: 700\n    }, translate(\"pages.forgotPassword.title\", \"Forgot your password?\")), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        component: \"form\",\n        onSubmit: handleSubmit((data)=>{\n            if (onSubmit) {\n                return onSubmit(data);\n            }\n            return mutate({\n                ...mutationVariables,\n                ...data\n            });\n        })\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_TextField__WEBPACK_IMPORTED_MODULE_38__[\"default\"], {\n        ...register(\"email\", {\n            required: translate(\"pages.forgotPassword.errors.requiredEmail\", \"Email is required\"),\n            pattern: {\n                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                message: translate(\"pages.register.errors.validEmail\", \"Invalid email address\")\n            }\n        }),\n        id: \"email\",\n        margin: \"normal\",\n        fullWidth: true,\n        label: translate(\"pages.forgotPassword.fields.email\", \"Email\"),\n        name: \"email\",\n        type: \"email\",\n        error: !!errors.email,\n        autoComplete: \"email\",\n        sx: {\n            m: 0\n        }\n    }), loginLink ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        textAlign: \"right\",\n        sx: {\n            mt: \"24px\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n        variant: \"body2\",\n        component: \"span\",\n        fontSize: \"12px\"\n    }, translate(\"pages.forgotPassword.buttons.haveAccount\", translate(\"pages.register.buttons.haveAccount\", \"Have an account? \"))), \" \", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_29__[\"default\"], {\n        variant: \"body2\",\n        component: ActiveLink,\n        underline: \"none\",\n        to: \"/login\",\n        fontWeight: \"bold\",\n        fontSize: \"12px\",\n        color: \"primary.light\"\n    }, translate(\"pages.forgotPassword.signin\", translate(\"pages.login.signin\", \"Sign in\")))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_33__[\"default\"], {\n        type: \"submit\",\n        fullWidth: true,\n        variant: \"contained\",\n        sx: {\n            mt: \"24px\"\n        },\n        disabled: isLoading\n    }, translate(\"pages.forgotPassword.buttons.submit\", \"Send reset instructions\")))));\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        component: \"div\",\n        style: layoutStyles,\n        ...wrapperProps ?? {}\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Container__WEBPACK_IMPORTED_MODULE_42__[\"default\"], {\n        component: \"main\",\n        maxWidth: \"xs\",\n        sx: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minHeight: \"100dvh\",\n            padding: \"16px\",\n            width: \"100%\",\n            maxWidth: \"400px\"\n        }\n    }, renderContent ? renderContent(Content, PageTitle) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, PageTitle, Content))));\n}, \"ForgotPasswordPage\");\n// src/components/pages/auth/components/updatePassword/index.tsx\n\n\n\n\n\n\n\n\n\n\n\nvar UpdatePasswordPage = /* @__PURE__ */ __name(({ wrapperProps, contentProps, renderContent, formProps, title = void 0, mutationVariables })=>{\n    var _a, _b;\n    const { onSubmit, ...useFormProps } = formProps || {};\n    const { register, watch, handleSubmit, formState: { errors } } = (0,_refinedev_react_hook_form__WEBPACK_IMPORTED_MODULE_34__.useForm)({\n        ...useFormProps\n    });\n    const authProvider = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)();\n    const { mutate: update, isLoading } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useUpdatePassword)({\n        v3LegacyAuthProviderCompatible: Boolean(authProvider == null ? void 0 : authProvider.isLegacy)\n    });\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const PageTitle = title === false ? null : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            marginBottom: \"32px\",\n            fontSize: \"20px\"\n        }\n    }, title ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ThemedTitleV2, {\n        collapsed: false,\n        wrapperStyles: {\n            gap: \"8px\"\n        }\n    }));\n    const Content = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Card__WEBPACK_IMPORTED_MODULE_36__[\"default\"], {\n        ...contentProps ?? {}\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardContent__WEBPACK_IMPORTED_MODULE_37__[\"default\"], {\n        sx: {\n            p: \"32px\",\n            \"&:last-child\": {\n                pb: \"32px\"\n            }\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n        component: \"h1\",\n        variant: \"h5\",\n        align: \"center\",\n        style: titleStyles,\n        color: \"primary\",\n        fontWeight: 700\n    }, translate(\"pages.updatePassword.title\", \"Set New Password\")), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        component: \"form\",\n        onSubmit: handleSubmit((data)=>{\n            if (onSubmit) {\n                return onSubmit(data);\n            }\n            return update({\n                ...mutationVariables,\n                ...data\n            });\n        })\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_TextField__WEBPACK_IMPORTED_MODULE_38__[\"default\"], {\n        ...register(\"password\", {\n            required: translate(\"pages.updatePassword.errors.requiredPassword\", \"Password required\")\n        }),\n        id: \"password\",\n        margin: \"normal\",\n        fullWidth: true,\n        name: \"password\",\n        label: translate(\"pages.updatePassword.fields.password\", \"New Password\"),\n        helperText: (_a = errors == null ? void 0 : errors.password) == null ? void 0 : _a.message,\n        error: !!(errors == null ? void 0 : errors.password),\n        type: \"password\",\n        placeholder: \"●●●●●●●●\",\n        autoComplete: \"current-password\",\n        sx: {\n            m: 0\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_TextField__WEBPACK_IMPORTED_MODULE_38__[\"default\"], {\n        ...register(\"confirmPassword\", {\n            required: translate(\"pages.updatePassword.errors.requiredConfirmPassword\", \"Confirm Password is required\"),\n            validate: (value)=>{\n                if (watch(\"password\") !== value) {\n                    return translate(\"pages.updatePassword.errors.confirmPasswordNotMatch\", \"Passwords do not match\");\n                }\n                return true;\n            }\n        }),\n        id: \"confirmPassword\",\n        margin: \"normal\",\n        fullWidth: true,\n        name: \"confirmPassword\",\n        label: translate(\"pages.updatePassword.fields.confirmPassword\", \"Confirm New Password\"),\n        helperText: (_b = errors == null ? void 0 : errors.confirmPassword) == null ? void 0 : _b.message,\n        error: !!(errors == null ? void 0 : errors.confirmPassword),\n        type: \"password\",\n        placeholder: \"●●●●●●●●\",\n        autoComplete: \"current-confirm-password\",\n        sx: {\n            mb: 0\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_33__[\"default\"], {\n        type: \"submit\",\n        fullWidth: true,\n        variant: \"contained\",\n        sx: {\n            mt: \"24px\"\n        },\n        disabled: isLoading\n    }, translate(\"pages.updatePassword.buttons.submit\", \"Update\")))));\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        component: \"div\",\n        style: layoutStyles,\n        ...wrapperProps ?? {}\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Container__WEBPACK_IMPORTED_MODULE_42__[\"default\"], {\n        component: \"main\",\n        maxWidth: \"xs\",\n        sx: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minHeight: \"100dvh\",\n            padding: \"16px\",\n            width: \"100%\",\n            maxWidth: \"400px\"\n        }\n    }, renderContent ? renderContent(Content, PageTitle) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, PageTitle, Content))));\n}, \"UpdatePasswordPage\");\n// src/components/pages/auth/index.tsx\nvar AuthPage = /* @__PURE__ */ __name((props)=>{\n    const { type } = props;\n    const renderView = /* @__PURE__ */ __name(()=>{\n        switch(type){\n            case \"register\":\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(RegisterPage, {\n                    ...props\n                });\n            case \"forgotPassword\":\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ForgotPasswordPage, {\n                    ...props\n                });\n            case \"updatePassword\":\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(UpdatePasswordPage, {\n                    ...props\n                });\n            default:\n                return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(LoginPage, {\n                    ...props\n                });\n        }\n    }, \"renderView\");\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, renderView());\n}, \"AuthPage\");\n// src/components/crud/create/index.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar Create = /* @__PURE__ */ __name(({ title, children, saveButtonProps: saveButtonPropsFromProps, resource: resourceFromProps, isLoading = false, breadcrumb: breadcrumbFromProps, wrapperProps, headerProps, contentProps, headerButtonProps, headerButtons, footerButtonProps, footerButtons, goBack: goBackFromProps })=>{\n    var _a, _b;\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const { options: { breadcrumb: globalBreadcrumb } = {} } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)();\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const back = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useBack)();\n    const { goBack } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useNavigation)();\n    const getUserFriendlyName = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useUserFriendlyName)();\n    const { resource, action, identifier } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResource)(resourceFromProps);\n    const breadcrumb = typeof breadcrumbFromProps === \"undefined\" ? globalBreadcrumb : breadcrumbFromProps;\n    const breadcrumbComponent = typeof breadcrumb !== \"undefined\" ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, breadcrumb) ?? void 0 : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Breadcrumb, null);\n    const saveButtonProps = {\n        ...isLoading ? {\n            disabled: true\n        } : {},\n        ...saveButtonPropsFromProps\n    };\n    const defaultFooterButtons = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(SaveButton, {\n        ...saveButtonProps\n    });\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Card__WEBPACK_IMPORTED_MODULE_36__[\"default\"], {\n        ...wrapperProps ?? {},\n        sx: {\n            position: \"relative\",\n            ...wrapperProps == null ? void 0 : wrapperProps.sx\n        }\n    }, isLoading && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        sx: {\n            position: \"absolute\",\n            inset: 0,\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            zIndex: (theme)=>theme.zIndex.drawer + 1,\n            // this is needed to support custom themes, dark mode etc.\n            bgcolor: (theme)=>(0,_mui_system__WEBPACK_IMPORTED_MODULE_44__.alpha)(theme.palette.background.paper, 0.4)\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CircularProgress__WEBPACK_IMPORTED_MODULE_45__[\"default\"], null)), breadcrumbComponent, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardHeader__WEBPACK_IMPORTED_MODULE_46__[\"default\"], {\n        sx: {\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            \".MuiCardHeader-action\": {\n                margin: 0,\n                alignSelf: \"center\"\n            }\n        },\n        title: title ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n            variant: \"h5\",\n            className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_43__.RefinePageHeaderClassNames.Title\n        }, translate(`${identifier}.titles.create`, `Create ${getUserFriendlyName(((_a = resource == null ? void 0 : resource.meta) == null ? void 0 : _a.label) ?? ((_b = resource == null ? void 0 : resource.options) == null ? void 0 : _b.label) ?? (resource == null ? void 0 : resource.label) ?? identifier, \"singular\")}`)),\n        avatar: typeof goBackFromProps !== \"undefined\" ? goBackFromProps : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_21__[\"default\"], {\n            onClick: action !== \"list\" || typeof action !== \"undefined\" ? routerType === \"legacy\" ? goBack : back : void 0\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ArrowBack__WEBPACK_IMPORTED_MODULE_47__[\"default\"], null)),\n        action: headerButtons ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n            display: \"flex\",\n            gap: \"16px\",\n            ...headerButtonProps ?? {}\n        }, headerButtons ? typeof headerButtons === \"function\" ? headerButtons({\n            defaultButtons: null\n        }) : headerButtons : null) : void 0,\n        ...headerProps ?? {}\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardContent__WEBPACK_IMPORTED_MODULE_37__[\"default\"], {\n        ...contentProps ?? {}\n    }, children), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardActions__WEBPACK_IMPORTED_MODULE_48__[\"default\"], {\n        sx: {\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            gap: \"16px\",\n            padding: \"16px\"\n        },\n        ...footerButtonProps ?? {}\n    }, footerButtons ? typeof footerButtons === \"function\" ? footerButtons({\n        defaultButtons: defaultFooterButtons,\n        saveButtonProps\n    }) : footerButtons : defaultFooterButtons));\n}, \"Create\");\n// src/components/crud/edit/index.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar Edit = /* @__PURE__ */ __name(({ title, saveButtonProps: saveButtonPropsFromProps, mutationMode: mutationModeProp, recordItemId, children, deleteButtonProps: deleteButtonPropsFromProps, canDelete, resource: resourceFromProps, isLoading = false, breadcrumb: breadcrumbFromProps, dataProviderName, wrapperProps, headerProps, contentProps, headerButtonProps, headerButtons, footerButtonProps, footerButtons, goBack: goBackFromProps, autoSaveProps })=>{\n    var _a, _b, _c;\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const { options: { breadcrumb: globalBreadcrumb } = {} } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)();\n    const { mutationMode: mutationModeContext } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useMutationMode)();\n    const mutationMode = mutationModeProp ?? mutationModeContext;\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const back = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useBack)();\n    const go = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useGo)();\n    const { goBack, list: legacyGoList } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useNavigation)();\n    const getUserFriendlyName = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useUserFriendlyName)();\n    const { resource, action, id: idFromParams, identifier } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResource)(resourceFromProps);\n    const goListPath = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useToPath)({\n        resource,\n        action: \"list\"\n    });\n    const id = recordItemId ?? idFromParams;\n    const breadcrumb = typeof breadcrumbFromProps === \"undefined\" ? globalBreadcrumb : breadcrumbFromProps;\n    const hasList = (resource == null ? void 0 : resource.list) && !recordItemId;\n    const isDeleteButtonVisible = canDelete ?? ((((_a = resource == null ? void 0 : resource.meta) == null ? void 0 : _a.canDelete) ?? (resource == null ? void 0 : resource.canDelete)) || deleteButtonPropsFromProps);\n    const breadcrumbComponent = typeof breadcrumb !== \"undefined\" ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, breadcrumb) ?? void 0 : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Breadcrumb, null);\n    const listButtonProps = hasList ? {\n        ...isLoading ? {\n            disabled: true\n        } : {},\n        resource: routerType === \"legacy\" ? resource == null ? void 0 : resource.route : identifier\n    } : void 0;\n    const refreshButtonProps = {\n        ...isLoading ? {\n            disabled: true\n        } : {},\n        resource: routerType === \"legacy\" ? resource == null ? void 0 : resource.route : identifier,\n        recordItemId: id,\n        dataProviderName\n    };\n    const defaultHeaderButtons = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"center\"\n    }, autoSaveProps && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(AutoSaveIndicator, {\n        ...autoSaveProps\n    }), hasList && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ListButton, {\n        ...listButtonProps\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(RefreshButton, {\n        ...refreshButtonProps\n    }));\n    const deleteButtonProps = isDeleteButtonVisible ? {\n        ...isLoading ? {\n            disabled: true\n        } : {},\n        resource: routerType === \"legacy\" ? resource == null ? void 0 : resource.route : identifier,\n        mutationMode,\n        variant: \"outlined\",\n        onSuccess: ()=>{\n            if (routerType === \"legacy\") {\n                legacyGoList((resource == null ? void 0 : resource.route) ?? (resource == null ? void 0 : resource.name) ?? \"\");\n            } else {\n                go({\n                    to: goListPath\n                });\n            }\n        },\n        recordItemId: id,\n        dataProviderName,\n        ...deleteButtonPropsFromProps\n    } : void 0;\n    const saveButtonProps = {\n        ...isLoading ? {\n            disabled: true\n        } : {},\n        ...saveButtonPropsFromProps\n    };\n    const defaultFooterButtons = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, isDeleteButtonVisible && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(DeleteButton, {\n        ...deleteButtonProps\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(SaveButton, {\n        ...saveButtonProps\n    }));\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Card__WEBPACK_IMPORTED_MODULE_36__[\"default\"], {\n        ...wrapperProps ?? {},\n        sx: {\n            position: \"relative\",\n            ...wrapperProps == null ? void 0 : wrapperProps.sx\n        }\n    }, isLoading && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        sx: {\n            position: \"absolute\",\n            inset: 0,\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            zIndex: (theme)=>theme.zIndex.drawer + 1,\n            // this is needed to support custom themes, dark mode etc.\n            bgcolor: (theme)=>(0,_mui_system__WEBPACK_IMPORTED_MODULE_44__.alpha)(theme.palette.background.paper, 0.4)\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CircularProgress__WEBPACK_IMPORTED_MODULE_45__[\"default\"], null)), breadcrumbComponent, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardHeader__WEBPACK_IMPORTED_MODULE_46__[\"default\"], {\n        sx: {\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            \".MuiCardHeader-action\": {\n                margin: 0,\n                alignSelf: \"center\"\n            }\n        },\n        title: title ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n            variant: \"h5\",\n            className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_43__.RefinePageHeaderClassNames.Title\n        }, translate(`${identifier}.titles.edit`, `Edit ${getUserFriendlyName(((_b = resource == null ? void 0 : resource.meta) == null ? void 0 : _b.label) ?? ((_c = resource == null ? void 0 : resource.options) == null ? void 0 : _c.label) ?? (resource == null ? void 0 : resource.label) ?? identifier, \"singular\")}`)),\n        avatar: typeof goBackFromProps !== \"undefined\" ? goBackFromProps : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_21__[\"default\"], {\n            onClick: action !== \"list\" && typeof action !== \"undefined\" ? routerType === \"legacy\" ? goBack : back : void 0\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ArrowBack__WEBPACK_IMPORTED_MODULE_47__[\"default\"], null)),\n        action: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n            display: \"flex\",\n            gap: \"16px\",\n            ...headerButtonProps ?? {}\n        }, headerButtons ? typeof headerButtons === \"function\" ? headerButtons({\n            defaultButtons: defaultHeaderButtons,\n            listButtonProps,\n            refreshButtonProps\n        }) : headerButtons : defaultHeaderButtons),\n        ...headerProps ?? {}\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardContent__WEBPACK_IMPORTED_MODULE_37__[\"default\"], {\n        ...contentProps ?? {}\n    }, children), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardActions__WEBPACK_IMPORTED_MODULE_48__[\"default\"], {\n        sx: {\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            gap: \"16px\",\n            padding: \"16px\"\n        },\n        ...footerButtonProps ?? {}\n    }, footerButtons ? typeof footerButtons === \"function\" ? footerButtons({\n        defaultButtons: defaultFooterButtons,\n        deleteButtonProps,\n        saveButtonProps\n    }) : footerButtons : defaultFooterButtons));\n}, \"Edit\");\n// src/components/crud/list/index.tsx\n\n\n\n\n\n\n\n\nvar List2 = /* @__PURE__ */ __name(({ title, canCreate, children, createButtonProps: createButtonPropsFromProps, resource: resourceFromProps, breadcrumb: breadcrumbFromProps, wrapperProps, headerProps, contentProps, headerButtonProps, headerButtons })=>{\n    var _a, _b;\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const { options: { breadcrumb: globalBreadcrumb } = {} } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)();\n    const getUserFriendlyName = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useUserFriendlyName)();\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const { resource, identifier } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResource)(resourceFromProps);\n    const isCreateButtonVisible = canCreate ?? (((resource == null ? void 0 : resource.canCreate) ?? !!(resource == null ? void 0 : resource.create)) || createButtonPropsFromProps);\n    const breadcrumb = typeof breadcrumbFromProps === \"undefined\" ? globalBreadcrumb : breadcrumbFromProps;\n    const breadcrumbComponent = typeof breadcrumb !== \"undefined\" ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, breadcrumb) ?? void 0 : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Breadcrumb, null);\n    const createButtonProps = isCreateButtonVisible ? {\n        resource: routerType === \"legacy\" ? resource == null ? void 0 : resource.route : identifier,\n        ...createButtonPropsFromProps\n    } : void 0;\n    const defaultHeaderButtons = isCreateButtonVisible ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(CreateButton, {\n        ...createButtonProps\n    }) : null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Card__WEBPACK_IMPORTED_MODULE_36__[\"default\"], {\n        ...wrapperProps ?? {}\n    }, breadcrumbComponent, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardHeader__WEBPACK_IMPORTED_MODULE_46__[\"default\"], {\n        sx: {\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            \".MuiCardHeader-action\": {\n                margin: 0,\n                alignSelf: \"center\"\n            }\n        },\n        title: title ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n            variant: \"h5\",\n            className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_43__.RefinePageHeaderClassNames.Title\n        }, translate(`${identifier}.titles.list`, getUserFriendlyName(((_a = resource == null ? void 0 : resource.meta) == null ? void 0 : _a.label) ?? ((_b = resource == null ? void 0 : resource.options) == null ? void 0 : _b.label) ?? (resource == null ? void 0 : resource.label) ?? identifier, \"plural\"))),\n        action: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n            display: \"flex\",\n            gap: \"16px\",\n            ...headerButtonProps\n        }, headerButtons ? typeof headerButtons === \"function\" ? headerButtons({\n            defaultButtons: defaultHeaderButtons,\n            createButtonProps\n        }) : headerButtons : defaultHeaderButtons),\n        ...headerProps ?? {}\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardContent__WEBPACK_IMPORTED_MODULE_37__[\"default\"], {\n        ...contentProps ?? {}\n    }, children));\n}, \"List\");\n// src/components/crud/show/index.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar Show = /* @__PURE__ */ __name(({ title, canEdit, canDelete, isLoading = false, children, resource: resourceFromProps, recordItemId, breadcrumb: breadcrumbFromProps, dataProviderName, wrapperProps, headerProps, contentProps, headerButtonProps, headerButtons, footerButtonProps, footerButtons, goBack: goBackFromProps })=>{\n    var _a, _b, _c;\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    const { options: { breadcrumb: globalBreadcrumb } = {} } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)();\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const back = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useBack)();\n    const go = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useGo)();\n    const { goBack, list: legacyGoList } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useNavigation)();\n    const getUserFriendlyName = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useUserFriendlyName)();\n    const { resource, action, id: idFromParams, identifier } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResource)(resourceFromProps);\n    const goListPath = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useToPath)({\n        resource,\n        action: \"list\"\n    });\n    const id = recordItemId ?? idFromParams;\n    const breadcrumb = typeof breadcrumbFromProps === \"undefined\" ? globalBreadcrumb : breadcrumbFromProps;\n    const hasList = (resource == null ? void 0 : resource.list) && !recordItemId;\n    const hasDelete = canDelete ?? ((_a = resource == null ? void 0 : resource.meta) == null ? void 0 : _a.canDelete) ?? (resource == null ? void 0 : resource.canDelete);\n    const isDeleteButtonVisible = hasDelete && typeof id !== \"undefined\";\n    const isEditButtonVisible = canEdit ?? (resource == null ? void 0 : resource.canEdit) ?? !!(resource == null ? void 0 : resource.edit);\n    const breadcrumbComponent = typeof breadcrumb !== \"undefined\" ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, breadcrumb) ?? void 0 : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Breadcrumb, null);\n    const listButtonProps = hasList ? {\n        ...isLoading ? {\n            disabled: true\n        } : {},\n        resource: routerType === \"legacy\" ? resource == null ? void 0 : resource.route : identifier\n    } : void 0;\n    const editButtonProps = isEditButtonVisible ? {\n        ...isLoading ? {\n            disabled: true\n        } : {},\n        resource: routerType === \"legacy\" ? resource == null ? void 0 : resource.route : identifier,\n        recordItemId: id\n    } : void 0;\n    const deleteButtonProps = isDeleteButtonVisible ? {\n        ...isLoading ? {\n            disabled: true\n        } : {},\n        resource: routerType === \"legacy\" ? resource == null ? void 0 : resource.route : identifier,\n        recordItemId: id,\n        onSuccess: ()=>{\n            if (routerType === \"legacy\") {\n                legacyGoList((resource == null ? void 0 : resource.route) ?? (resource == null ? void 0 : resource.name) ?? \"\");\n            } else {\n                go({\n                    to: goListPath\n                });\n            }\n        },\n        dataProviderName\n    } : void 0;\n    const refreshButtonProps = {\n        ...isLoading ? {\n            disabled: true\n        } : {},\n        resource: routerType === \"legacy\" ? resource == null ? void 0 : resource.route : identifier,\n        recordItemId: id,\n        dataProviderName\n    };\n    const defaultHeaderButtons = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, hasList && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ListButton, {\n        ...listButtonProps\n    }), isEditButtonVisible && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(EditButton, {\n        ...editButtonProps\n    }), isDeleteButtonVisible && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(DeleteButton, {\n        ...deleteButtonProps\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(RefreshButton, {\n        ...refreshButtonProps\n    }));\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Card__WEBPACK_IMPORTED_MODULE_36__[\"default\"], {\n        ...wrapperProps ?? {},\n        sx: {\n            position: \"relative\",\n            ...wrapperProps == null ? void 0 : wrapperProps.sx\n        }\n    }, isLoading && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        sx: {\n            position: \"absolute\",\n            inset: 0,\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            zIndex: (theme)=>theme.zIndex.drawer + 1,\n            // this is needed to support custom themes, dark mode etc.\n            bgcolor: (theme)=>(0,_mui_system__WEBPACK_IMPORTED_MODULE_44__.alpha)(theme.palette.background.paper, 0.4)\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CircularProgress__WEBPACK_IMPORTED_MODULE_45__[\"default\"], null)), breadcrumbComponent, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardHeader__WEBPACK_IMPORTED_MODULE_46__[\"default\"], {\n        sx: {\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            \".MuiCardHeader-action\": {\n                margin: 0,\n                alignSelf: \"center\"\n            }\n        },\n        title: title ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n            variant: \"h5\",\n            className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_43__.RefinePageHeaderClassNames.Title\n        }, translate(`${identifier}.titles.show`, `Show ${getUserFriendlyName(((_b = resource == null ? void 0 : resource.meta) == null ? void 0 : _b.label) ?? ((_c = resource == null ? void 0 : resource.options) == null ? void 0 : _c.label) ?? (resource == null ? void 0 : resource.label) ?? identifier, \"singular\")}`)),\n        avatar: typeof goBackFromProps !== \"undefined\" ? goBackFromProps : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_21__[\"default\"], {\n            onClick: action !== \"list\" && typeof action !== \"undefined\" ? routerType === \"legacy\" ? goBack : back : void 0\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ArrowBack__WEBPACK_IMPORTED_MODULE_47__[\"default\"], null)),\n        action: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n            display: \"flex\",\n            gap: \"16px\",\n            ...headerButtonProps ?? {}\n        }, headerButtons ? typeof headerButtons === \"function\" ? headerButtons({\n            defaultButtons: defaultHeaderButtons,\n            deleteButtonProps,\n            editButtonProps,\n            listButtonProps,\n            refreshButtonProps\n        }) : headerButtons : defaultHeaderButtons),\n        ...headerProps ?? {}\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardContent__WEBPACK_IMPORTED_MODULE_37__[\"default\"], {\n        ...contentProps ?? {}\n    }, children), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CardActions__WEBPACK_IMPORTED_MODULE_48__[\"default\"], {\n        sx: {\n            padding: \"16px\"\n        },\n        ...footerButtonProps ?? {}\n    }, footerButtons ? typeof footerButtons === \"function\" ? footerButtons({\n        defaultButtons: null\n    }) : footerButtons : null));\n}, \"Show\");\n// src/components/buttons/create/index.tsx\n\n\n\n\n\nvar CreateButton = /* @__PURE__ */ __name(({ resource: resourceNameFromProps, resourceNameOrRouteName, hideText = false, accessControl, svgIconProps, meta, children, onClick, ...props })=>{\n    const { to, label, title, disabled, hidden, LinkComponent } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useCreateButton)({\n        resource: resourceNameFromProps ?? resourceNameOrRouteName,\n        meta,\n        accessControl\n    });\n    const isDisabled = disabled || props.disabled;\n    const isHidden = hidden || props.hidden;\n    if (isHidden) return null;\n    const { sx, ...restProps } = props;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(LinkComponent, {\n        to,\n        replace: false,\n        onClick: (e)=>{\n            if (isDisabled) {\n                e.preventDefault();\n                return;\n            }\n            if (onClick) {\n                e.preventDefault();\n                onClick(e);\n            }\n        },\n        style: {\n            textDecoration: \"none\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_33__[\"default\"], {\n        disabled: isDisabled,\n        startIcon: !hideText && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_AddBoxOutlined__WEBPACK_IMPORTED_MODULE_49__[\"default\"], {\n            ...svgIconProps\n        }),\n        title,\n        variant: \"contained\",\n        sx: {\n            minWidth: 0,\n            ...sx\n        },\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_43__.RefineButtonClassNames.CreateButton,\n        ...restProps\n    }, hideText ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_AddBoxOutlined__WEBPACK_IMPORTED_MODULE_49__[\"default\"], {\n        fontSize: \"small\",\n        ...svgIconProps\n    }) : children ?? label));\n}, \"CreateButton\");\n// src/components/buttons/edit/index.tsx\n\n\n\n\n\nvar EditButton = /* @__PURE__ */ __name(({ resource: resourceNameFromProps, resourceNameOrRouteName, recordItemId, hideText = false, accessControl, svgIconProps, meta, children, onClick, ...rest })=>{\n    const { to, label, title, hidden, disabled, LinkComponent } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useEditButton)({\n        resource: resourceNameFromProps ?? resourceNameOrRouteName,\n        id: recordItemId,\n        accessControl,\n        meta\n    });\n    const isDisabled = disabled || rest.disabled;\n    const isHidden = hidden || rest.hidden;\n    if (isHidden) return null;\n    const { sx, ...restProps } = rest;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(LinkComponent, {\n        to,\n        replace: false,\n        onClick: (e)=>{\n            if (isDisabled) {\n                e.preventDefault();\n                return;\n            }\n            if (onClick) {\n                e.preventDefault();\n                onClick(e);\n            }\n        },\n        style: {\n            textDecoration: \"none\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_33__[\"default\"], {\n        disabled: isDisabled,\n        startIcon: !hideText && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_EditOutlined__WEBPACK_IMPORTED_MODULE_50__[\"default\"], {\n            sx: {\n                selfAlign: \"center\"\n            },\n            ...svgIconProps\n        }),\n        title,\n        sx: {\n            minWidth: 0,\n            ...sx\n        },\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_43__.RefineButtonClassNames.EditButton,\n        ...restProps\n    }, hideText ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_EditOutlined__WEBPACK_IMPORTED_MODULE_50__[\"default\"], {\n        fontSize: \"small\",\n        ...svgIconProps\n    }) : children ?? label));\n}, \"EditButton\");\n// src/components/buttons/delete/index.tsx\n\n\n\n\n\n\n\n\n\nvar DeleteButton = /* @__PURE__ */ __name(({ resource: resourceNameFromProps, resourceNameOrRouteName, recordItemId, onSuccess, mutationMode, children, successNotification, errorNotification, hideText = false, accessControl, meta, metaData, dataProviderName, confirmTitle, confirmOkText, confirmCancelText, svgIconProps, invalidates, ...rest })=>{\n    const { onConfirm, title, label, hidden, disabled, loading, confirmTitle: defaultConfirmTitle, confirmOkLabel, cancelLabel } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useDeleteButton)({\n        resource: resourceNameFromProps ?? resourceNameOrRouteName,\n        id: recordItemId,\n        dataProviderName,\n        mutationMode,\n        accessControl,\n        invalidates,\n        onSuccess,\n        meta,\n        successNotification,\n        errorNotification\n    });\n    const [open, setOpen] = react__WEBPACK_IMPORTED_MODULE_1__.useState(false);\n    const { sx, ...restProps } = rest;\n    const isDisabled = disabled || rest.disabled;\n    const isHidden = hidden || rest.hidden;\n    if (isHidden) return null;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_lab_LoadingButton__WEBPACK_IMPORTED_MODULE_51__[\"default\"], {\n        color: \"error\",\n        onClick: ()=>setOpen(true),\n        disabled: isDisabled,\n        loading,\n        startIcon: !hideText && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_DeleteOutline__WEBPACK_IMPORTED_MODULE_52__[\"default\"], {\n            ...svgIconProps\n        }),\n        title,\n        sx: {\n            minWidth: 0,\n            ...sx\n        },\n        loadingPosition: hideText ? \"center\" : \"start\",\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_43__.RefineButtonClassNames.DeleteButton,\n        ...restProps\n    }, hideText ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_DeleteOutline__WEBPACK_IMPORTED_MODULE_52__[\"default\"], {\n        fontSize: \"small\",\n        ...svgIconProps\n    }) : children ?? label), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Dialog__WEBPACK_IMPORTED_MODULE_53__[\"default\"], {\n        open,\n        onClose: ()=>setOpen(false),\n        \"aria-labelledby\": \"alert-dialog-title\",\n        \"aria-describedby\": \"alert-dialog-description\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_DialogTitle__WEBPACK_IMPORTED_MODULE_54__[\"default\"], {\n        id: \"alert-dialog-title\"\n    }, confirmTitle ?? defaultConfirmTitle), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_DialogActions__WEBPACK_IMPORTED_MODULE_55__[\"default\"], {\n        sx: {\n            justifyContent: \"center\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_33__[\"default\"], {\n        onClick: ()=>setOpen(false)\n    }, confirmCancelText ?? cancelLabel), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_33__[\"default\"], {\n        color: \"error\",\n        onClick: ()=>{\n            onConfirm();\n            setOpen(false);\n        },\n        autoFocus: true\n    }, confirmOkText ?? confirmOkLabel))));\n}, \"DeleteButton\");\n// src/components/buttons/refresh/index.tsx\n\n\n\n\n\nvar RefreshButton = /* @__PURE__ */ __name(({ resource: resourceNameFromProps, resourceNameOrRouteName, recordItemId, hideText = false, dataProviderName, svgIconProps, children, onClick, meta: _meta, metaData: _metaData, ...rest })=>{\n    const { onClick: onRefresh, loading, label } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefreshButton)({\n        resource: resourceNameFromProps ?? resourceNameOrRouteName,\n        id: recordItemId,\n        dataProviderName\n    });\n    const { sx, ...restProps } = rest;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_lab_LoadingButton__WEBPACK_IMPORTED_MODULE_51__[\"default\"], {\n        startIcon: !hideText && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_RefreshOutlined__WEBPACK_IMPORTED_MODULE_56__[\"default\"], {\n            ...svgIconProps\n        }),\n        loading,\n        loadingPosition: hideText ? \"center\" : \"start\",\n        onClick: onClick ? onClick : onRefresh,\n        sx: {\n            minWidth: 0,\n            ...sx\n        },\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_43__.RefineButtonClassNames.RefreshButton,\n        ...restProps\n    }, hideText ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_RefreshOutlined__WEBPACK_IMPORTED_MODULE_56__[\"default\"], {\n        fontSize: \"small\",\n        ...svgIconProps\n    }) : children ?? label);\n}, \"RefreshButton\");\n// src/components/buttons/show/index.tsx\n\n\n\n\n\nvar ShowButton = /* @__PURE__ */ __name(({ resource: resourceNameFromProps, resourceNameOrRouteName, recordItemId, hideText = false, accessControl, svgIconProps, meta, children, onClick, ...rest })=>{\n    const { to, label, title, hidden, disabled, LinkComponent } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useShowButton)({\n        resource: resourceNameFromProps ?? resourceNameOrRouteName,\n        id: recordItemId,\n        accessControl,\n        meta\n    });\n    const isDisabled = disabled || rest.disabled;\n    const isHidden = hidden || rest.hidden;\n    if (isHidden) return null;\n    const { sx, ...restProps } = rest;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(LinkComponent, {\n        to,\n        replace: false,\n        onClick: (e)=>{\n            if (isDisabled) {\n                e.preventDefault();\n                return;\n            }\n            if (onClick) {\n                e.preventDefault();\n                onClick(e);\n            }\n        },\n        style: {\n            textDecoration: \"none\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_33__[\"default\"], {\n        disabled: isDisabled,\n        startIcon: !hideText && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_VisibilityOutlined__WEBPACK_IMPORTED_MODULE_57__[\"default\"], {\n            ...svgIconProps\n        }),\n        title,\n        sx: {\n            minWidth: 0,\n            ...sx\n        },\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_43__.RefineButtonClassNames.ShowButton,\n        ...restProps\n    }, hideText ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_VisibilityOutlined__WEBPACK_IMPORTED_MODULE_57__[\"default\"], {\n        fontSize: \"small\",\n        ...svgIconProps\n    }) : children ?? label));\n}, \"ShowButton\");\n// src/components/buttons/list/index.tsx\n\n\n\n\n\nvar ListButton = /* @__PURE__ */ __name(({ resource: resourceNameFromProps, resourceNameOrRouteName, hideText = false, accessControl, svgIconProps, meta, children, onClick, ...rest })=>{\n    const { to, label, title, hidden, disabled, LinkComponent } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useListButton)({\n        resource: resourceNameFromProps ?? resourceNameOrRouteName,\n        meta,\n        accessControl\n    });\n    const isDisabled = disabled || rest.disabled;\n    const isHidden = hidden || rest.hidden;\n    if (isHidden) return null;\n    const { sx, ...restProps } = rest;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(LinkComponent, {\n        to,\n        replace: false,\n        onClick: (e)=>{\n            if (isDisabled) {\n                e.preventDefault();\n                return;\n            }\n            if (onClick) {\n                e.preventDefault();\n                onClick(e);\n            }\n        },\n        style: {\n            textDecoration: \"none\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_33__[\"default\"], {\n        disabled: isDisabled,\n        startIcon: !hideText && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ListOutlined__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n            ...svgIconProps\n        }),\n        title,\n        sx: {\n            minWidth: 0,\n            ...sx\n        },\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_43__.RefineButtonClassNames.ListButton,\n        ...restProps\n    }, hideText ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ListOutlined__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n        fontSize: \"small\",\n        ...svgIconProps\n    }) : children ?? label));\n}, \"ListButton\");\n// src/components/buttons/export/index.tsx\n\n\n\n\n\nvar ExportButton = /* @__PURE__ */ __name(({ hideText = false, children, loading = false, svgIconProps, ...rest })=>{\n    const { label } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useExportButton)();\n    const { sx, ...restProps } = rest;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_lab_LoadingButton__WEBPACK_IMPORTED_MODULE_51__[\"default\"], {\n        ...rest,\n        loading,\n        startIcon: !hideText && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ImportExportOutlined__WEBPACK_IMPORTED_MODULE_58__[\"default\"], {\n            ...svgIconProps\n        }),\n        loadingPosition: hideText ? \"center\" : \"start\",\n        sx: {\n            minWidth: 0,\n            ...sx\n        },\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_43__.RefineButtonClassNames.ExportButton,\n        ...restProps\n    }, hideText ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ImportExportOutlined__WEBPACK_IMPORTED_MODULE_58__[\"default\"], {\n        fontSize: \"small\",\n        ...svgIconProps\n    }) : children ?? label);\n}, \"ExportButton\");\n// src/components/buttons/save/index.tsx\n\n\n\n\n\nvar SaveButton = /* @__PURE__ */ __name(({ hideText = false, svgIconProps, children, ...rest })=>{\n    const { label } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useSaveButton)();\n    const { sx, ...restProps } = rest;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_lab_LoadingButton__WEBPACK_IMPORTED_MODULE_51__[\"default\"], {\n        startIcon: !hideText && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_SaveOutlined__WEBPACK_IMPORTED_MODULE_59__[\"default\"], {\n            ...svgIconProps\n        }),\n        sx: {\n            minWidth: 0,\n            ...sx\n        },\n        variant: \"contained\",\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_43__.RefineButtonClassNames.SaveButton,\n        ...restProps\n    }, hideText ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_SaveOutlined__WEBPACK_IMPORTED_MODULE_59__[\"default\"], {\n        fontSize: \"small\",\n        ...svgIconProps\n    }) : children ?? label);\n}, \"SaveButton\");\n// src/components/buttons/clone/index.tsx\n\n\n\n\n\nvar CloneButton = /* @__PURE__ */ __name(({ resource: resourceNameFromProps, resourceNameOrRouteName, recordItemId, hideText = false, accessControl, svgIconProps, meta, children, onClick, ...rest })=>{\n    const { to, label, title, hidden, disabled, LinkComponent } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useCloneButton)({\n        resource: resourceNameFromProps ?? resourceNameOrRouteName,\n        id: recordItemId,\n        meta,\n        accessControl\n    });\n    const isDisabled = disabled || rest.disabled;\n    const isHidden = hidden || rest.hidden;\n    if (isHidden) return null;\n    const { sx, ...restProps } = rest;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(LinkComponent, {\n        to,\n        replace: false,\n        onClick: (e)=>{\n            if (isDisabled) {\n                e.preventDefault();\n                return;\n            }\n            if (onClick) {\n                e.preventDefault();\n                onClick(e);\n            }\n        },\n        style: {\n            textDecoration: \"none\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Button__WEBPACK_IMPORTED_MODULE_33__[\"default\"], {\n        disabled: isDisabled,\n        startIcon: !hideText && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_AddBoxOutlined__WEBPACK_IMPORTED_MODULE_49__[\"default\"], {\n            ...svgIconProps\n        }),\n        title,\n        sx: {\n            minWidth: 0,\n            ...sx\n        },\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_43__.RefineButtonClassNames.CloneButton,\n        ...restProps\n    }, hideText ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_AddBoxOutlined__WEBPACK_IMPORTED_MODULE_49__[\"default\"], {\n        fontSize: \"small\",\n        ...svgIconProps\n    }) : children ?? label));\n}, \"CloneButton\");\n// src/components/buttons/import/index.tsx\n\n\n\n\n\nvar ImportButton = /* @__PURE__ */ __name(({ inputProps, hideText = false, loading = false, svgIconProps, children, ...rest })=>{\n    const { label } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useImportButton)();\n    const { sx, ...restProps } = rest;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"label\", {\n        htmlFor: \"contained-button-file\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"input\", {\n        ...inputProps,\n        id: \"contained-button-file\",\n        multiple: true,\n        hidden: true\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_lab_LoadingButton__WEBPACK_IMPORTED_MODULE_51__[\"default\"], {\n        component: \"span\",\n        startIcon: !hideText && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ImportExportOutlined__WEBPACK_IMPORTED_MODULE_58__[\"default\"], {\n            ...svgIconProps\n        }),\n        loadingPosition: hideText ? \"center\" : \"start\",\n        loading,\n        sx: {\n            minWidth: 0,\n            ...sx\n        },\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_43__.RefineButtonClassNames.ImportButton,\n        ...restProps\n    }, hideText ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ImportExportOutlined__WEBPACK_IMPORTED_MODULE_58__[\"default\"], {\n        fontSize: \"small\",\n        ...svgIconProps\n    }) : children ?? label));\n}, \"ImportButton\");\n// src/components/circularDeterminate/index.tsx\n\n\n\n\nvar CircularDeterminate = /* @__PURE__ */ __name(({ undoableTimeout, message })=>{\n    const [progress, setProgress] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(100);\n    const [timeCount, setTimeCount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(undoableTimeout);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const increaseProgress = 100 / undoableTimeout;\n        const timer = setInterval(()=>{\n            setTimeCount((prevProgress)=>prevProgress - 1);\n            setProgress((prevProgress)=>prevProgress - increaseProgress);\n        }, 1e3);\n        if (timeCount === 0) {\n            clearInterval(timer);\n        }\n        return ()=>{\n            clearInterval(timer);\n        };\n    }, [\n        timeCount\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        sx: {\n            position: \"relative\",\n            display: \"inline-flex\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_CircularProgress__WEBPACK_IMPORTED_MODULE_45__[\"default\"], {\n        color: \"inherit\",\n        variant: \"determinate\",\n        value: progress\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        sx: {\n            top: 0,\n            left: 0,\n            bottom: 0,\n            right: 0,\n            position: \"absolute\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n        component: \"div\"\n    }, timeCount))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        sx: {\n            marginLeft: \"10px\",\n            maxWidth: {\n                xs: \"150px\",\n                md: \"100%\"\n            }\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n        variant: \"subtitle2\"\n    }, message)));\n}, \"CircularDeterminate\");\n// src/components/fields/text/index.tsx\n\n\nvar TextField5 = /* @__PURE__ */ __name(({ value, ...rest })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n        variant: \"body2\",\n        ...rest\n    }, value);\n}, \"TextField\");\n// src/components/fields/tag/index.tsx\n\n\nvar TagField = /* @__PURE__ */ __name(({ value, ...rest })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Chip__WEBPACK_IMPORTED_MODULE_60__[\"default\"], {\n        label: value == null ? void 0 : value.toString(),\n        ...rest\n    });\n}, \"TagField\");\n// src/components/fields/email/index.tsx\n\n\n\nvar EmailField = /* @__PURE__ */ __name(({ value, ...rest })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n        variant: \"body2\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_29__[\"default\"], {\n        href: `mailto:${value}`,\n        ...rest\n    }, value));\n}, \"EmailField\");\n// src/components/fields/boolean/index.tsx\n\n\n\n\nvar BooleanField = /* @__PURE__ */ __name(({ value, valueLabelTrue = \"true\", valueLabelFalse = \"false\", trueIcon, falseIcon, svgIconProps, ...rest })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Tooltip__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        title: value ? valueLabelTrue : valueLabelFalse,\n        ...rest\n    }, value ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", null, trueIcon ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_CheckOutlined__WEBPACK_IMPORTED_MODULE_61__[\"default\"], {\n        ...svgIconProps\n    })) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", null, falseIcon ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_CloseOutlined__WEBPACK_IMPORTED_MODULE_62__[\"default\"], {\n        ...svgIconProps\n    })));\n}, \"BooleanField\");\n// src/components/fields/date/index.tsx\n\n\n\n\ndayjs__WEBPACK_IMPORTED_MODULE_63__.extend(dayjs_plugin_localizedFormat_js__WEBPACK_IMPORTED_MODULE_64__);\nvar defaultLocale = dayjs__WEBPACK_IMPORTED_MODULE_63__.locale();\nvar DateField = /* @__PURE__ */ __name(({ value, locales, format: dateFormat = \"L\", ...rest })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n        variant: \"body2\",\n        ...rest\n    }, value ? dayjs__WEBPACK_IMPORTED_MODULE_63__(value).locale(locales || defaultLocale).format(dateFormat) : \"\");\n}, \"DateField\");\n// src/components/fields/file/index.tsx\n\nvar FileField = /* @__PURE__ */ __name(({ title, src, ...rest })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(UrlField, {\n        value: src,\n        title,\n        ...rest\n    }, title ?? src);\n}, \"FileField\");\n// src/components/fields/url/index.tsx\n\n\n\nvar UrlField = /* @__PURE__ */ __name(({ children, value, ...rest })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n        variant: \"body2\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_29__[\"default\"], {\n        href: value,\n        ...rest\n    }, children ?? value));\n}, \"UrlField\");\n// src/components/fields/number/index.tsx\n\n\nfunction toLocaleStringSupportsOptions() {\n    return !!(typeof Intl === \"object\" && Intl && typeof Intl.NumberFormat === \"function\");\n}\n__name(toLocaleStringSupportsOptions, \"toLocaleStringSupportsOptions\");\nvar NumberField = /* @__PURE__ */ __name(({ value, locale, options, ...rest })=>{\n    const number = Number(value);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n        variant: \"body2\",\n        ...rest\n    }, toLocaleStringSupportsOptions() ? number.toLocaleString(locale, options) : number);\n}, \"NumberField\");\n// src/components/fields/markdown/index.tsx\n\n\n\nvar MarkdownField = /* @__PURE__ */ __name(({ value = \"\" })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react_markdown__WEBPACK_IMPORTED_MODULE_65__, {\n        remarkPlugins: [\n            remark_gfm__WEBPACK_IMPORTED_MODULE_66__\n        ]\n    }, value);\n}, \"MarkdownField\");\n// src/components/breadcrumb/index.tsx\n\n\n\n\n\n\n\nvar Breadcrumb = /* @__PURE__ */ __name(({ breadcrumbProps, showHome = true, hideIcons = false, meta, minItems = 2 })=>{\n    var _a, _b;\n    const { breadcrumbs } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useBreadcrumb)({\n        meta\n    });\n    const routerType = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)();\n    const NewLink = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)();\n    const { Link: LegacyLink } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)();\n    const ActiveLink = routerType === \"legacy\" ? LegacyLink : NewLink;\n    const { hasDashboard } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)();\n    const { resources } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResource)();\n    const rootRouteResource = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.matchResourceFromRoute)(\"/\", resources);\n    if (breadcrumbs.length < minItems) return null;\n    const LinkRouter = /* @__PURE__ */ __name((props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Link__WEBPACK_IMPORTED_MODULE_29__[\"default\"], {\n            ...props,\n            component: ActiveLink\n        }), \"LinkRouter\");\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Breadcrumbs__WEBPACK_IMPORTED_MODULE_67__[\"default\"], {\n        \"aria-label\": \"breadcrumb\",\n        sx: {\n            padding: 2,\n            ...(breadcrumbProps == null ? void 0 : breadcrumbProps.sx) ?? {}\n        },\n        ...breadcrumbProps\n    }, showHome && (hasDashboard || rootRouteResource.found) && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(LinkRouter, {\n        underline: \"hover\",\n        sx: {\n            display: \"flex\",\n            alignItems: \"center\"\n        },\n        color: \"inherit\",\n        to: \"/\"\n    }, ((_b = (_a = rootRouteResource == null ? void 0 : rootRouteResource.resource) == null ? void 0 : _a.meta) == null ? void 0 : _b.icon) ?? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_HomeOutlined__WEBPACK_IMPORTED_MODULE_68__[\"default\"], {\n        sx: {\n            fontSize: \"18px\"\n        }\n    })), breadcrumbs.map(({ label, icon, href })=>{\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Grid2__WEBPACK_IMPORTED_MODULE_31__[\"default\"], {\n            key: label,\n            sx: {\n                display: \"flex\",\n                alignItems: \"center\",\n                \"& .MuiSvgIcon-root\": {\n                    fontSize: \"16px\"\n                }\n            }\n        }, !hideIcons && icon, href ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(LinkRouter, {\n            underline: \"hover\",\n            sx: {\n                display: \"flex\",\n                alignItems: \"center\",\n                fontSize: \"14px\"\n            },\n            color: \"inherit\",\n            to: href,\n            variant: \"subtitle1\",\n            marginLeft: 0.5\n        }, label) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n            fontSize: \"14px\"\n        }, label));\n    }));\n}, \"Breadcrumb\");\n// src/components/autoSaveIndicator/index.tsx\n\n\n\n\n\n\n\nvar AutoSaveIndicator = /* @__PURE__ */ __name(({ status, elements: { success = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Message, {\n    translationKey: \"autoSave.success\",\n    defaultMessage: \"saved\",\n    icon: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_TaskAltOutlined__WEBPACK_IMPORTED_MODULE_69__[\"default\"], {\n        fontSize: \"small\"\n    })\n}), error = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Message, {\n    translationKey: \"autoSave.error\",\n    defaultMessage: \"auto save failure\",\n    icon: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_ErrorOutlineOutlined__WEBPACK_IMPORTED_MODULE_70__[\"default\"], {\n        fontSize: \"small\"\n    })\n}), loading = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Message, {\n    translationKey: \"autoSave.loading\",\n    defaultMessage: \"saving...\",\n    icon: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_SyncOutlined__WEBPACK_IMPORTED_MODULE_71__[\"default\"], {\n        fontSize: \"small\"\n    })\n}), idle = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Message, {\n    translationKey: \"autoSave.idle\",\n    defaultMessage: \"waiting for changes\",\n    icon: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_MoreHorizOutlined__WEBPACK_IMPORTED_MODULE_72__[\"default\"], {\n        fontSize: \"small\"\n    })\n}) } = {} })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.AutoSaveIndicator, {\n        status,\n        elements: {\n            success,\n            error,\n            loading,\n            idle\n        }\n    });\n}, \"AutoSaveIndicator\");\nvar Message = /* @__PURE__ */ __name(({ translationKey, defaultMessage, icon })=>{\n    const translate = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n        color: \"gray\",\n        fontSize: \"0.8rem\",\n        position: \"relative\",\n        display: \"flex\",\n        alignItems: \"center\",\n        flexWrap: \"wrap\",\n        marginRight: \".3rem\"\n    }, translate(translationKey, defaultMessage), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"span\", {\n        style: {\n            position: \"relative\",\n            top: \"3px\",\n            marginLeft: \"3px\"\n        }\n    }, icon));\n}, \"Message\");\n// src/theme/index.ts\n\n// src/theme/palette/lightPalette.ts\nvar lightPalette = {\n    mode: \"light\",\n    primary: {\n        main: \"#67be23\",\n        contrastText: \"#fff\"\n    },\n    secondary: {\n        main: \"#2A132E\",\n        contrastText: \"#fff\"\n    },\n    background: {\n        default: \"#f0f0f0\",\n        paper: \"#ffffff\"\n    },\n    success: {\n        main: \"#67be23\",\n        contrastText: \"#fff\"\n    },\n    error: {\n        main: \"#fa541c\",\n        contrastText: \"#fff\"\n    },\n    warning: {\n        main: \"#fa8c16\",\n        contrastText: \"#fff\"\n    },\n    info: {\n        main: \"#0b82f0\",\n        contrastText: \"#fff\"\n    },\n    divider: \"rgba(0,0,0,0)\",\n    text: {\n        primary: \"#626262\",\n        secondary: \"#9f9f9f\",\n        disabled: \"#c1c1c1\"\n    }\n};\n// src/theme/palette/darkPalette.ts\nvar darkPalette = {\n    mode: \"dark\",\n    primary: {\n        main: \"#67be23\",\n        contrastText: \"#fff\"\n    },\n    secondary: {\n        main: \"#2A132E\",\n        contrastText: \"#fff\"\n    },\n    background: {\n        default: \"#212121\",\n        paper: \"#242424\"\n    },\n    success: {\n        main: \"#67be23\",\n        contrastText: \"#fff\"\n    },\n    error: {\n        main: \"#ee2a1e\",\n        contrastText: \"#fff\"\n    },\n    warning: {\n        main: \"#fa8c16\",\n        contrastText: \"#fff\"\n    },\n    info: {\n        main: \"#1890ff\",\n        contrastText: \"#fff\"\n    },\n    divider: \"rgba(0,0,0,0)\",\n    text: {\n        primary: \"#fff\",\n        secondary: \"rgba(255,255,255,0.7)\",\n        disabled: \"#d1d1d1\"\n    }\n};\n// src/theme/typography.ts\nvar typography = {\n    fontFamily: [\n        \"Montserrat\",\n        \"-apple-system\",\n        \"BlinkMacSystemFont\",\n        '\"Segoe UI\"',\n        \"Roboto\",\n        '\"Helvetica Neue\"',\n        \"Arial\",\n        \"sans-serif\",\n        '\"Apple Color Emoji\"',\n        '\"Segoe UI Emoji\"',\n        '\"Segoe UI Symbol\"'\n    ].join(\",\")\n};\n// src/theme/palette/refinePalette.ts\nvar RefinePalettes = {\n    Blue: {\n        mode: \"light\",\n        primary: {\n            main: \"#1976D2\",\n            light: \"#4791db\",\n            dark: \"#115293\"\n        }\n    },\n    BlueDark: {\n        mode: \"dark\",\n        primary: {\n            main: \"#67b7f7\",\n            light: \"#85c5f8\",\n            dark: \"#4880ac\"\n        }\n    },\n    Purple: {\n        mode: \"light\",\n        primary: {\n            main: \"#7B1FA2\",\n            light: \"#954bb4\",\n            dark: \"#561571\"\n        }\n    },\n    PurpleDark: {\n        mode: \"dark\",\n        primary: {\n            main: \"#AB47BC\",\n            light: \"#bb6bc9\",\n            dark: \"#773183\"\n        }\n    },\n    Magenta: {\n        mode: \"light\",\n        primary: {\n            main: \"#C2185B\",\n            light: \"#ce467b\",\n            dark: \"#87103f\"\n        }\n    },\n    MagentaDark: {\n        mode: \"dark\",\n        primary: {\n            main: \"#EC407A\",\n            light: \"#ef6694\",\n            dark: \"#a52c55\"\n        }\n    },\n    Red: {\n        mode: \"light\",\n        primary: {\n            main: \"#D32F2F\",\n            light: \"#db5858\",\n            dark: \"#932020\"\n        }\n    },\n    RedDark: {\n        mode: \"dark\",\n        primary: {\n            main: \"#EF5350\",\n            light: \"#f27573\",\n            dark: \"#a73a38\"\n        }\n    },\n    Orange: {\n        mode: \"light\",\n        primary: {\n            main: \"#F57C00\",\n            light: \"#f79633\",\n            dark: \"#ab5600\"\n        }\n    },\n    OrangeDark: {\n        mode: \"dark\",\n        primary: {\n            main: \"#FFA726\",\n            light: \"#ffb851\",\n            dark: \"#b2741a\"\n        }\n    },\n    Yellow: {\n        mode: \"light\",\n        primary: {\n            main: \"#FFA000\",\n            light: \"#ffb333\",\n            dark: \"#b27000\"\n        }\n    },\n    YellowDark: {\n        mode: \"dark\",\n        primary: {\n            main: \"#FFCA28\",\n            light: \"#ffd453\",\n            dark: \"#E87040\"\n        }\n    },\n    Green: {\n        mode: \"light\",\n        primary: {\n            main: \"#689F38\",\n            light: \"#86b25f\",\n            dark: \"#486f27\"\n        }\n    },\n    GreenDark: {\n        mode: \"dark\",\n        primary: {\n            main: \"#9CCC65\",\n            light: \"#afd683\",\n            dark: \"#6d8e46\"\n        }\n    }\n};\n// src/theme/index.ts\nvar commonThemeProperties = {\n    shape: {\n        borderRadius: 6\n    },\n    typography: {\n        ...typography\n    }\n};\nvar LightTheme = (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_73__[\"default\"])({\n    ...commonThemeProperties,\n    palette: lightPalette,\n    components: {\n        MuiAppBar: {\n            styleOverrides: {\n                colorDefault: {\n                    backgroundColor: \"#fff\"\n                }\n            }\n        },\n        MuiPaper: {\n            styleOverrides: {\n                root: {\n                    backgroundImage: \"linear-gradient(rgba(255, 255, 255, 0.01), rgba(255, 255, 255, 0.01))\"\n                }\n            }\n        },\n        MuiTypography: {\n            styleOverrides: {\n                h5: {\n                    fontWeight: 800,\n                    lineHeight: \"2rem\"\n                }\n            }\n        }\n    }\n});\nvar DarkTheme = (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_73__[\"default\"])({\n    ...commonThemeProperties,\n    palette: darkPalette,\n    components: {\n        MuiPaper: {\n            styleOverrides: {\n                root: {\n                    backgroundImage: \"linear-gradient(rgba(255, 255, 255, 0.025), rgba(255, 255, 255, 0.025))\"\n                }\n            }\n        },\n        MuiAppBar: {\n            defaultProps: {\n                color: \"transparent\"\n            }\n        },\n        MuiTypography: {\n            styleOverrides: {\n                h5: {\n                    fontWeight: 800,\n                    lineHeight: \"2rem\"\n                }\n            }\n        }\n    }\n});\nvar RefineThemes = Object.keys(RefinePalettes).reduce((acc, key)=>{\n    const paletteName = key;\n    return {\n        ...acc,\n        [key]: (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_73__[\"default\"])({\n            palette: {\n                ...RefinePalettes[paletteName]\n            },\n            components: {\n                MuiButton: {\n                    styleOverrides: {\n                        root: ({ ownerState })=>({\n                                ...ownerState.variant === \"contained\" && ownerState.color === \"primary\" && {\n                                    color: \"#fff\"\n                                }\n                            })\n                    }\n                }\n            }\n        })\n    };\n}, {});\n// src/providers/notificationProvider/index.tsx\n\n\n\n\n\n\nvar useNotificationProvider = /* @__PURE__ */ __name(()=>{\n    const { closeSnackbar, enqueueSnackbar } = (0,notistack__WEBPACK_IMPORTED_MODULE_0__.useSnackbar)();\n    const notificationProvider = {\n        open: ({ message, type, undoableTimeout, key, cancelMutation, description })=>{\n            if (type === \"progress\") {\n                const action = /* @__PURE__ */ __name((key2)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_IconButton__WEBPACK_IMPORTED_MODULE_21__[\"default\"], {\n                        onClick: ()=>{\n                            cancelMutation == null ? void 0 : cancelMutation();\n                            closeSnackbar(key2);\n                        },\n                        color: \"inherit\"\n                    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_icons_material_esm_UndoOutlined__WEBPACK_IMPORTED_MODULE_74__[\"default\"], null)), \"action\");\n                enqueueSnackbar(/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(CircularDeterminate, {\n                    undoableTimeout: undoableTimeout ?? 0,\n                    message\n                })), {\n                    action,\n                    preventDuplicate: true,\n                    key,\n                    autoHideDuration: (undoableTimeout ?? 0) * 1e3\n                });\n            } else {\n                enqueueSnackbar(/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Box__WEBPACK_IMPORTED_MODULE_18__[\"default\"], null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n                    variant: \"subtitle2\",\n                    component: \"h6\"\n                }, description), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_mui_material_Typography__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n                    variant: \"caption\",\n                    component: \"p\"\n                }, message)), {\n                    key,\n                    variant: type\n                });\n            }\n        },\n        close: (key)=>{\n            closeSnackbar(key);\n        }\n    };\n    return notificationProvider;\n}, \"useNotificationProvider\");\n// src/providers/refineSnackbarProvider/index.tsx\n\n\n\nvar SnackbarProviderWithDefaultValues = /* @__PURE__ */ __name(({ anchorOrigin = {\n    vertical: \"top\",\n    horizontal: \"right\"\n}, disableWindowBlurListener = true, ...rest })=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(notistack__WEBPACK_IMPORTED_MODULE_0__.SnackbarProvider, {\n        anchorOrigin,\n        disableWindowBlurListener,\n        ...rest\n    });\n}, \"SnackbarProviderWithDefaultValues\");\nvar RefineSnackbarProvider = (0,_mui_material_styles__WEBPACK_IMPORTED_MODULE_75__[\"default\"])(SnackbarProviderWithDefaultValues)`\n&.SnackbarItem-contentRoot {\n    background-color: ${(props)=>props.theme.palette.background.default};\n    color: ${(props)=>props.theme.palette.primary.main};\n}\n&.SnackbarItem-variantSuccess {\n    background-color: ${(props)=>props.theme.palette.success.main};\n    color: ${(props)=>props.theme.palette.success.contrastText};\n}\n&.SnackbarItem-variantError {\n    background-color: ${(props)=>props.theme.palette.error.main};\n    color: ${(props)=>props.theme.palette.error.contrastText};\n}\n&.SnackbarItem-variantInfo {\n    background-color: ${(props)=>props.theme.palette.info.main};\n    color: ${(props)=>props.theme.palette.info.contrastText};\n}\n&.SnackbarItem-variantWarning {\n    background-color: ${(props)=>props.theme.palette.warning.main};\n    color: ${(props)=>props.theme.palette.warning.contrastText};\n}\n`;\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/mui/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/nextjs-router/dist/index.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@refinedev/nextjs-router/dist/index.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NavigateToResource: () => (/* binding */ v),\n/* harmony export */   RefineRoutes: () => (/* binding */ M),\n/* harmony export */   \"default\": () => (/* binding */ k),\n/* harmony export */   paramsFromCurrentPath: () => (/* binding */ P),\n/* harmony export */   parseTableParams: () => (/* binding */ H),\n/* harmony export */   stringifyConfig: () => (/* binding */ T)\n/* harmony export */ });\n/* harmony import */ var _refinedev_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @refinedev/core */ \"(ssr)/./node_modules/@refinedev/core/dist/index.mjs\");\n/* harmony import */ var next_navigation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/navigation.js */ \"(ssr)/./node_modules/next/dist/api/navigation.js\");\n/* harmony import */ var next_link_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/link.js */ \"(ssr)/./node_modules/next/dist/api/link.js\");\n/* harmony import */ var qs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! qs */ \"(ssr)/./node_modules/qs/lib/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ NavigateToResource,RefineRoutes,default,paramsFromCurrentPath,parseTableParams,stringifyConfig auto */ \n\n\n\n\nvar P = (e, r)=>{\n    let t = {}, o = r.replace(/^\\/|\\/$/g, \"\"), n = e.replace(/^\\/|\\/$/g, \"\"), s = o.split(\"/\"), a = n.split(\"/\");\n    return s.forEach((i, u)=>{\n        var p;\n        i.startsWith(\":\") && ((p = a[u]) == null ? void 0 : p.length) > 0 && (t[i.replace(\":\", \"\")] = a[u]);\n    }), t;\n};\nvar R = (e)=>{\n    if (typeof e > \"u\") return e;\n    let r = Number(e);\n    return `${r}` === e ? r : e;\n};\nvar T = {\n    addQueryPrefix: !0,\n    skipNulls: !0,\n    arrayFormat: \"indices\",\n    encode: !1,\n    encodeValuesOnly: !0\n}, k = {\n    go: ()=>{\n        let { push: e, replace: r } = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.useRouter)(), t = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.usePathname)(), o = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.useSearchParams)();\n        return react__WEBPACK_IMPORTED_MODULE_2__.useCallback(({ to: s, type: a, query: i, options: { keepQuery: u, keepHash: p } = {}, hash: c })=>{\n            let m = \"\";\n            p && typeof document < \"u\" && (m = document.location.hash), c && (m = `#${c.replace(/^#/, \"\")}`);\n            let d = {\n                ...u ? qs__WEBPACK_IMPORTED_MODULE_3__.parse(o.toString(), {\n                    ignoreQueryPrefix: !0\n                }) : {},\n                ...i\n            };\n            d.to && (d.to = encodeURIComponent(`${d.to}`));\n            let N = (t == null ? void 0 : t.split(\"?\")[0].split(\"#\")[0]) ?? \"\", S = s || N, $ = m.length > 1, z = Object.keys(d).length > 0, g = `${S}${z ? qs__WEBPACK_IMPORTED_MODULE_3__.stringify(d, T) : \"\"}${$ ? m : \"\"}`;\n            if (a === \"path\") return g;\n            a === \"replace\" ? r(g) : e(g);\n        }, [\n            o,\n            e,\n            r\n        ]);\n    },\n    back: ()=>{\n        let { back: e } = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.useRouter)();\n        return e;\n    },\n    parse: ()=>{\n        let e = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.usePathname)(), r = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.useSearchParams)(), { resources: t } = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(_refinedev_core__WEBPACK_IMPORTED_MODULE_4__.ResourceContext), { resource: o, action: n, matchedRoute: s } = react__WEBPACK_IMPORTED_MODULE_2__.useMemo(()=>e ? (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_4__.matchResourceFromRoute)(e, t) : {\n                found: !1\n            }, [\n            e,\n            t\n        ]), a = s && e ? P(e, s) : {}, i = a.id, u = react__WEBPACK_IMPORTED_MODULE_2__.useMemo(()=>{\n            let c = r.toString();\n            return qs__WEBPACK_IMPORTED_MODULE_3__.parse(c, {\n                ignoreQueryPrefix: !0\n            });\n        }, [\n            r\n        ]);\n        return react__WEBPACK_IMPORTED_MODULE_2__.useCallback(()=>{\n            let c = {\n                ...a,\n                ...u\n            };\n            return {\n                ...o && {\n                    resource: o\n                },\n                ...n && {\n                    action: n\n                },\n                ...i && {\n                    id: decodeURIComponent(i)\n                },\n                pathname: e || void 0,\n                params: {\n                    ...c,\n                    current: R(c.current),\n                    pageSize: R(c.pageSize),\n                    to: c.to ? decodeURIComponent(c.to) : void 0\n                }\n            };\n        }, [\n            e,\n            u,\n            a,\n            i,\n            o,\n            n\n        ]);\n    },\n    Link: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.forwardRef(function({ to: r, ...t }, o) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(next_link_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n            href: r,\n            ...t,\n            ref: o\n        });\n    })\n};\n\n\n\nvar M = ({ children: e })=>{\n    let { resource: r, action: t } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_4__.useResource)(), o = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.usePathname)(), n = r && t ? r[t] : void 0, s = typeof n == \"function\" ? n : typeof n == \"object\" ? n.component : void 0;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(react__WEBPACK_IMPORTED_MODULE_2__.Fragment, null, e ? e(s ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(s, null) : void 0, o ?? void 0) : s ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(s, null) : void 0);\n};\n\n\n\nvar v = ({ resource: e, meta: r })=>{\n    let t = react__WEBPACK_IMPORTED_MODULE_2__.useRef(!1), { replace: o } = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.useRouter)(), n = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_4__.useGetToPath)(), { resource: s, resources: a } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_4__.useResource)(e), i = react__WEBPACK_IMPORTED_MODULE_2__.useMemo(()=>s || a.find((u)=>u.list), [\n        s,\n        a\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_2__.useEffect(()=>{\n        if (i && !t.current) {\n            let u = n({\n                resource: i,\n                action: \"list\",\n                meta: r\n            });\n            u && o(u), t.current = !0;\n        }\n    }, [\n        i,\n        o,\n        r,\n        n\n    ]), null;\n};\n\nvar G = (e)=>{\n    let r = qs__WEBPACK_IMPORTED_MODULE_3__.parse(e, {\n        ignoreQueryPrefix: !0\n    }), t = {\n        ...r,\n        pagination: {\n            current: r.current,\n            pageSize: r.pageSize\n        }\n    };\n    return delete t.current, delete t.pageSize, t;\n}, H = G;\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/nextjs-router/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/react-hook-form/dist/index.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@refinedev/react-hook-form/dist/index.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useForm: () => (/* binding */ C),\n/* harmony export */   useModalForm: () => (/* binding */ xe),\n/* harmony export */   useStepsForm: () => (/* binding */ le)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var lodash_es_get_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es/get.js */ \"(ssr)/./node_modules/lodash-es/get.js\");\n/* harmony import */ var lodash_es_has_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es/has.js */ \"(ssr)/./node_modules/lodash-es/has.js\");\n/* harmony import */ var react_hook_form__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-hook-form */ \"(ssr)/./node_modules/react-hook-form/dist/index.esm.mjs\");\n/* harmony import */ var _refinedev_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @refinedev/core */ \"(ssr)/./node_modules/@refinedev/core/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ useForm,useModalForm,useStepsForm auto */ var L = Object.defineProperty;\nvar F = (t, a)=>L(t, \"name\", {\n        value: a,\n        configurable: !0\n    });\n\n\n\n\n\nvar C = F(({ refineCoreProps: t, warnWhenUnsavedChanges: a, disableServerSideValidation: p = !1, ...g } = {})=>{\n    let { options: R } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useRefineContext)(), h = (R == null ? void 0 : R.disableServerSideValidation) || p, U = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useTranslate)(), { warnWhenUnsavedChanges: v, setWarnWhen: f } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useWarnAboutChange)(), V = a ?? v, o = (0,react_hook_form__WEBPACK_IMPORTED_MODULE_2__.useForm)({\n        ...g\n    }), { watch: c, setValue: y, getValues: i, handleSubmit: n, setError: E } = o, x = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useForm)({\n        ...t,\n        onMutationError: (r, s, e)=>{\n            var b, H;\n            if (h) {\n                (b = t == null ? void 0 : t.onMutationError) == null || b.call(t, r, s, e);\n                return;\n            }\n            let m = r == null ? void 0 : r.errors;\n            for(let D in m){\n                if (!Object.keys((0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.flattenObjectKeys)(s)).includes(D)) continue;\n                let u = m[D], B = \"\";\n                Array.isArray(u) && (B = u.join(\" \")), typeof u == \"string\" && (B = u), typeof u == \"boolean\" && u && (B = \"Field is not valid.\"), typeof u == \"object\" && \"key\" in u && (B = U(u.key, u.message)), E(D, {\n                    message: B\n                });\n            }\n            (H = t == null ? void 0 : t.onMutationError) == null || H.call(t, r, s, e);\n        }\n    }), { query: l, onFinish: d, formLoading: S, onFinishAutoSave: M } = x;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        var e;\n        let r = (e = l == null ? void 0 : l.data) == null ? void 0 : e.data;\n        if (!r) return;\n        Object.keys((0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.flattenObjectKeys)(i())).forEach((m)=>{\n            let b = (0,lodash_es_has_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(r, m), H = (0,lodash_es_get_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(r, m);\n            b && y(m, H);\n        });\n    }, [\n        l == null ? void 0 : l.data,\n        y,\n        i\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let r = c((s, { type: e })=>{\n            e === \"change\" && W(s);\n        });\n        return ()=>r.unsubscribe();\n    }, [\n        c\n    ]);\n    let W = F((r)=>{\n        var s, e;\n        if (V && f(!0), (s = t == null ? void 0 : t.autoSave) != null && s.enabled) {\n            f(!1);\n            let m = ((e = t.autoSave) == null ? void 0 : e.onFinish) ?? ((b)=>b);\n            return M(m(r)).catch((b)=>b);\n        }\n        return r;\n    }, \"onValuesChange\"), Q = F((r, s)=>async (e)=>(f(!1), n(r, s)(e)), \"handleSubmit\");\n    return {\n        ...o,\n        handleSubmit: Q,\n        refineCore: x,\n        saveButtonProps: {\n            disabled: S,\n            onClick: (r)=>{\n                Q((s)=>d(s).catch(()=>{}), ()=>!1)(r);\n            }\n        }\n    };\n}, \"useForm\");\n\n\nvar le = F(({ stepsProps: t, ...a } = {})=>{\n    let { defaultStep: p = 0, isBackValidate: g = !1 } = t ?? {}, [R, h] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(p), U = C({\n        ...a\n    }), { trigger: v, getValues: f, setValue: V, formState: { dirtyFields: o }, refineCore: { query: c } } = U;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        var x;\n        let n = (x = c == null ? void 0 : c.data) == null ? void 0 : x.data;\n        if (!n) return;\n        let E = Object.keys(f());\n        console.log({\n            dirtyFields: o,\n            registeredFields: E,\n            data: n\n        }), Object.entries(n).forEach(([l, d])=>{\n            let S = l;\n            E.includes(S) && ((0,lodash_es_get_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(o, S) || V(S, d));\n        });\n    }, [\n        c == null ? void 0 : c.data,\n        R,\n        V,\n        f\n    ]);\n    let y = F((n)=>{\n        let E = n;\n        n < 0 && (E = 0), h(E);\n    }, \"go\");\n    return {\n        ...U,\n        steps: {\n            currentStep: R,\n            gotoStep: F(async (n)=>{\n                if (n === R) return;\n                if (n < R && !g) {\n                    y(n);\n                    return;\n                }\n                await v() && y(n);\n            }, \"gotoStep\")\n        }\n    };\n}, \"useStepsForm\");\n\n\n\nvar xe = F(({ modalProps: t, refineCoreProps: a, syncWithLocation: p, ...g } = {})=>{\n    var A, N;\n    let R = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useInvalidate)(), [h, U] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), v = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useTranslate)(), { resource: f, action: V } = a ?? {}, { resource: o, action: c, identifier: y } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useResource)(f), i = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useParsed)(), n = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useGo)(), E = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useUserFriendlyName)(), x = V ?? c ?? \"\", l = !(typeof p == \"object\" && (p == null ? void 0 : p.syncId) === !1), d = typeof p == \"object\" && \"key\" in p ? p.key : o && x && p ? `modal-${y}-${x}` : void 0, { defaultVisible: S = !1, autoSubmitClose: M = !0, autoResetForm: W = !0 } = t ?? {}, Q = C({\n        refineCoreProps: {\n            ...a,\n            meta: {\n                ...d ? {\n                    [d]: void 0\n                } : {},\n                ...a == null ? void 0 : a.meta\n            }\n        },\n        ...g\n    }), { reset: $, refineCore: { onFinish: r, id: s, setId: e, autoSaveProps: m }, saveButtonProps: b, handleSubmit: H } = Q, { visible: D, show: k, close: u } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useModal)({\n        defaultVisible: S\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var T, j, K, I;\n        if (h === !1 && d) {\n            let w = (j = (T = i == null ? void 0 : i.params) == null ? void 0 : T[d]) == null ? void 0 : j.open;\n            if (typeof w == \"boolean\" ? w && k() : typeof w == \"string\" && w === \"true\" && k(), l) {\n                let G = (I = (K = i == null ? void 0 : i.params) == null ? void 0 : K[d]) == null ? void 0 : I.id;\n                G && (e == null || e(G));\n            }\n            U(!0);\n        }\n    }, [\n        d,\n        i,\n        l,\n        e\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var T;\n        h === !0 && (D && d ? n({\n            query: {\n                [d]: {\n                    ...(T = i == null ? void 0 : i.params) == null ? void 0 : T[d],\n                    open: !0,\n                    ...l && s && {\n                        id: s\n                    }\n                }\n            },\n            options: {\n                keepQuery: !0\n            },\n            type: \"replace\"\n        }) : d && !D && n({\n            query: {\n                [d]: void 0\n            },\n            options: {\n                keepQuery: !0\n            },\n            type: \"replace\"\n        }));\n    }, [\n        s,\n        D,\n        k,\n        d,\n        l\n    ]);\n    let B = F(async (T)=>{\n        await r(T), M && u(), W && $();\n    }, \"submit\"), { warnWhen: O, setWarnWhen: X } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_1__.useWarnAboutChange)(), Z = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        var T;\n        if (m.status === \"success\" && (T = a == null ? void 0 : a.autoSave) != null && T.invalidateOnClose && R({\n            id: s,\n            invalidates: a.invalidates || [\n                \"list\",\n                \"many\",\n                \"detail\"\n            ],\n            dataProviderName: a.dataProviderName,\n            resource: y\n        }), O) if (window.confirm(v(\"warnWhenUnsavedChanges\", \"Are you sure you want to leave? You have unsaved changes.\"))) X(!1);\n        else return;\n        e == null || e(void 0), u();\n    }, [\n        O,\n        m.status\n    ]), _ = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((T)=>{\n        typeof T < \"u\" && (e == null || e(T)), (!(x === \"edit\" || x === \"clone\") || typeof T < \"u\" || typeof s < \"u\") && k();\n    }, [\n        s\n    ]), q = v(`${y}.titles.${V}`, void 0, `${E(`${V} ${((A = o == null ? void 0 : o.meta) == null ? void 0 : A.label) ?? ((N = o == null ? void 0 : o.options) == null ? void 0 : N.label) ?? (o == null ? void 0 : o.label) ?? y}`, \"singular\")}`);\n    return {\n        modal: {\n            submit: B,\n            close: Z,\n            show: _,\n            visible: D,\n            title: q\n        },\n        ...Q,\n        saveButtonProps: {\n            ...b,\n            onClick: (T)=>H(B)(T)\n        }\n    };\n}, \"useModalForm\");\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/react-hook-form/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/supabase/dist/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@refinedev/supabase/dist/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createClient: () => (/* reexport safe */ _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__.createClient),\n/* harmony export */   dataProvider: () => (/* binding */ I),\n/* harmony export */   generateFilter: () => (/* binding */ $),\n/* harmony export */   handleError: () => (/* binding */ p),\n/* harmony export */   liveProvider: () => (/* binding */ b),\n/* harmony export */   liveTypes: () => (/* binding */ E),\n/* harmony export */   mapOperator: () => (/* binding */ y),\n/* harmony export */   supabaseTypes: () => (/* binding */ N)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @supabase/supabase-js */ \"(ssr)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(ssr)/./node_modules/@supabase/realtime-js/dist/module/index.js\");\nvar E={INSERT:\"created\",UPDATE:\"updated\",DELETE:\"deleted\",\"*\":\"*\"},N={created:_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.INSERT,updated:_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.UPDATE,deleted:_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.DELETE,\"*\":_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.ALL};var y=r=>{switch(r){case\"ne\":return\"neq\";case\"nin\":return\"not.in\";case\"contains\":return\"ilike\";case\"ncontains\":return\"not.ilike\";case\"containss\":return\"like\";case\"ncontainss\":return\"not.like\";case\"null\":return\"is\";case\"nnull\":return\"not.is\";case\"ina\":return\"cs\";case\"nina\":return\"not.cs\";case\"between\":case\"nbetween\":throw Error(`Operator ${r} is not supported`);default:return r}};var $=(r,o)=>{switch(r.operator){case\"eq\":return o.eq(r.field,r.value);case\"ne\":return o.neq(r.field,r.value);case\"in\":return o.in(r.field,r.value);case\"ina\":return o.contains(r.field,r.value);case\"nina\":return o.not(r.field,\"cs\",`{${r.value.map(t=>`\"${t}\"`).join(\",\")}}`);case\"gt\":return o.gt(r.field,r.value);case\"gte\":return o.gte(r.field,r.value);case\"lt\":return o.lt(r.field,r.value);case\"lte\":return o.lte(r.field,r.value);case\"between\":if(r.value.length!==2)throw new Error(`[@refinedev/supabase]: Unexpected length ${r.value.length}. Between operator expects a range between 2 values.`);return o.gte(r.field,r.value[0]).lte(r.field,r.value[1]);case\"contains\":return o.ilike(r.field,`%${r.value}%`);case\"containss\":return o.like(r.field,`%${r.value}%`);case\"null\":return o.is(r.field,null);case\"startswith\":return o.ilike(r.field,`${r.value}%`);case\"endswith\":return o.ilike(r.field,`%${r.value}`);case\"or\":{let t=r.value.map(e=>{if(e.operator!==\"or\"&&e.operator!==\"and\"&&\"field\"in e){let n=e.value;return(e.operator===\"ina\"||e.operator===\"nina\")&&(n=`{${e.value.map(c=>`\"${c}\"`).join(\",\")}}`),(e.operator===\"contains\"||e.operator===\"containss\")&&(n=`%${n}%`),e.operator===\"startswith\"&&(n=`${n}%`),e.operator===\"endswith\"&&(n=`%${n}`),`${e.field}.${y(e.operator)}.${n}`}}).join(\",\");return o.or(t)}case\"and\":throw Error(\"Operator 'and' is not supported\");default:return o.filter(r.field,y(r.operator),r.value)}};var p=r=>{let o={...r,message:r.message,statusCode:Number.parseInt(r.code)};return Promise.reject(o)};var I=r=>({getList:async({resource:o,pagination:t,filters:e,sorters:n,meta:c})=>{let{current:a=1,pageSize:i=10,mode:d=\"server\"}=t??{},l=(c!=null&&c.schema?r.schema(c.schema):r).from(o).select((c==null?void 0:c.select)??\"*\",{count:(c==null?void 0:c.count)??\"exact\"});d===\"server\"&&l.range((a-1)*i,a*i-1),n==null||n.map(s=>{let[u,T]=s.field.split(/\\.(?=[^.]+$)/);u&&T?l.select((c==null?void 0:c.select)??`*, ${u}(${T})`).order(T,{ascending:s.order===\"asc\",foreignTable:u}):l.order(s.field,{ascending:s.order===\"asc\"})}),e==null||e.map(s=>{$(s,l)});let{data:w,count:v,error:f}=await l;return f?p(f):{data:w||[],total:v||0}},getMany:async({resource:o,ids:t,meta:e})=>{let c=(e!=null&&e.schema?r.schema(e.schema):r).from(o).select((e==null?void 0:e.select)??\"*\");e!=null&&e.idColumnName?c.in(e.idColumnName,t):c.in(\"id\",t);let{data:a,error:i}=await c;return i?p(i):{data:a||[]}},create:async({resource:o,variables:t,meta:e})=>{let c=(e!=null&&e.schema?r.schema(e.schema):r).from(o).insert(t);c.select((e==null?void 0:e.select)??\"*\");let{data:a,error:i}=await c;return i?p(i):{data:(a||[])[0]}},createMany:async({resource:o,variables:t,meta:e})=>{let c=(e!=null&&e.schema?r.schema(e.schema):r).from(o).insert(t);c.select((e==null?void 0:e.select)??\"*\");let{data:a,error:i}=await c;return i?p(i):{data:a}},update:async({resource:o,id:t,variables:e,meta:n})=>{let a=(n!=null&&n.schema?r.schema(n.schema):r).from(o).update(e);n!=null&&n.idColumnName?a.eq(n.idColumnName,t):a.match({id:t}),a.select((n==null?void 0:n.select)??\"*\");let{data:i,error:d}=await a;return d?p(d):{data:(i||[])[0]}},updateMany:async({resource:o,ids:t,variables:e,meta:n})=>({data:await Promise.all(t.map(async a=>{let d=(n!=null&&n.schema?r.schema(n.schema):r).from(o).update(e);n!=null&&n.idColumnName?d.eq(n.idColumnName,a):d.match({id:a}),d.select((n==null?void 0:n.select)??\"*\");let{data:h,error:l}=await d;return l?p(l):(h||[])[0]}))}),getOne:async({resource:o,id:t,meta:e})=>{let c=(e!=null&&e.schema?r.schema(e.schema):r).from(o).select((e==null?void 0:e.select)??\"*\");e!=null&&e.idColumnName?c.eq(e.idColumnName,t):c.match({id:t});let{data:a,error:i}=await c;return i?p(i):{data:(a||[])[0]}},deleteOne:async({resource:o,id:t,meta:e})=>{let c=(e!=null&&e.schema?r.schema(e.schema):r).from(o).delete();e!=null&&e.idColumnName?c.eq(e.idColumnName,t):c.match({id:t});let{data:a,error:i}=await c;return i?p(i):{data:(a||[])[0]}},deleteMany:async({resource:o,ids:t,meta:e})=>({data:await Promise.all(t.map(async c=>{let i=(e!=null&&e.schema?r.schema(e.schema):r).from(o).delete();e!=null&&e.idColumnName?i.eq(e.idColumnName,c):i.match({id:c});let{data:d,error:h}=await i;return h?p(h):(d||[])[0]}))}),getApiUrl:()=>{throw Error(\"Not implemented on refine-supabase data provider.\")},custom:()=>{throw Error(\"Not implemented on refine-supabase data provider.\")}});var b=r=>({subscribe:({channel:o,types:t,params:e,callback:n,meta:c})=>{var f;let a=o.replace(\"resources/\",\"\"),i=s=>{var u;(t.includes(\"*\")||t.includes(E[s.eventType]))&&(E[s.eventType]!==\"created\"&&(e==null?void 0:e.ids)!==void 0&&((u=s.new)==null?void 0:u.id)!==void 0?e.ids.map(String).includes(s.new.id.toString())&&n({channel:o,type:E[s.eventType],date:new Date(s.commit_timestamp),payload:s.new}):n({channel:o,type:E[s.eventType],date:new Date(s.commit_timestamp),payload:s.new}))},d=s=>{if(!(!s||(s==null?void 0:s.length)===0))return s.map(u=>{if(\"field\"in u)return`${u.field}=${y(u.operator)}.${u.value}`}).filter(Boolean).join(\",\")},h=t.map(s=>N[s]).sort((s,u)=>s.localeCompare(u)),l=d(e==null?void 0:e.filters),w=`${o}:${h.join(\"|\")}${l?`:${l}`:\"\"}`,v=r.channel(w);for(let s=0;s<h.length;s++)v=v.on(\"postgres_changes\",{event:h[s],schema:(c==null?void 0:c.schema)||((f=r==null?void 0:r.rest)==null?void 0:f.schemaName)||\"public\",table:a,filter:l},i);return v.subscribe()},unsubscribe:async o=>{r.removeChannel(o)}});\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/supabase/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/ui-types/dist/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@refinedev/ui-types/dist/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RefineButtonClassNames: () => (/* binding */ n),\n/* harmony export */   RefineButtonTestIds: () => (/* binding */ e),\n/* harmony export */   RefinePageHeaderClassNames: () => (/* binding */ o)\n/* harmony export */ });\nvar e={CloneButton:\"refine-clone-button\",DeleteButton:\"refine-delete-button\",EditButton:\"refine-edit-button\",SaveButton:\"refine-save-button\",CreateButton:\"refine-create-button\",ImportButton:\"refine-import-button\",ExportButton:\"refine-export-button\",ListButton:\"refine-list-button\",RefreshButton:\"refine-refresh-button\",ShowButton:\"refine-show-button\"};var o={Title:\"refine-pageHeader-title\",SubTitle:\"refine-pageHeader-subTitle\"},n={CloneButton:\"refine-clone-button\",DeleteButton:\"refine-delete-button\",EditButton:\"refine-edit-button\",SaveButton:\"refine-save-button\",CreateButton:\"refine-create-button\",ImportButton:\"refine-import-button\",ExportButton:\"refine-export-button\",ListButton:\"refine-list-button\",RefreshButton:\"refine-refresh-button\",ShowButton:\"refine-show-button\"};\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi91aS10eXBlcy9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLHlWQUF5VixPQUFPLHNFQUFzRSxJQUFJLHlWQUFzYjtBQUN2MkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWZpbmUtcHJvamVjdC8uL25vZGVfbW9kdWxlcy9AcmVmaW5lZGV2L3VpLXR5cGVzL2Rpc3QvaW5kZXgubWpzPzZhMDQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGU9e0Nsb25lQnV0dG9uOlwicmVmaW5lLWNsb25lLWJ1dHRvblwiLERlbGV0ZUJ1dHRvbjpcInJlZmluZS1kZWxldGUtYnV0dG9uXCIsRWRpdEJ1dHRvbjpcInJlZmluZS1lZGl0LWJ1dHRvblwiLFNhdmVCdXR0b246XCJyZWZpbmUtc2F2ZS1idXR0b25cIixDcmVhdGVCdXR0b246XCJyZWZpbmUtY3JlYXRlLWJ1dHRvblwiLEltcG9ydEJ1dHRvbjpcInJlZmluZS1pbXBvcnQtYnV0dG9uXCIsRXhwb3J0QnV0dG9uOlwicmVmaW5lLWV4cG9ydC1idXR0b25cIixMaXN0QnV0dG9uOlwicmVmaW5lLWxpc3QtYnV0dG9uXCIsUmVmcmVzaEJ1dHRvbjpcInJlZmluZS1yZWZyZXNoLWJ1dHRvblwiLFNob3dCdXR0b246XCJyZWZpbmUtc2hvdy1idXR0b25cIn07dmFyIG89e1RpdGxlOlwicmVmaW5lLXBhZ2VIZWFkZXItdGl0bGVcIixTdWJUaXRsZTpcInJlZmluZS1wYWdlSGVhZGVyLXN1YlRpdGxlXCJ9LG49e0Nsb25lQnV0dG9uOlwicmVmaW5lLWNsb25lLWJ1dHRvblwiLERlbGV0ZUJ1dHRvbjpcInJlZmluZS1kZWxldGUtYnV0dG9uXCIsRWRpdEJ1dHRvbjpcInJlZmluZS1lZGl0LWJ1dHRvblwiLFNhdmVCdXR0b246XCJyZWZpbmUtc2F2ZS1idXR0b25cIixDcmVhdGVCdXR0b246XCJyZWZpbmUtY3JlYXRlLWJ1dHRvblwiLEltcG9ydEJ1dHRvbjpcInJlZmluZS1pbXBvcnQtYnV0dG9uXCIsRXhwb3J0QnV0dG9uOlwicmVmaW5lLWV4cG9ydC1idXR0b25cIixMaXN0QnV0dG9uOlwicmVmaW5lLWxpc3QtYnV0dG9uXCIsUmVmcmVzaEJ1dHRvbjpcInJlZmluZS1yZWZyZXNoLWJ1dHRvblwiLFNob3dCdXR0b246XCJyZWZpbmUtc2hvdy1idXR0b25cIn07ZXhwb3J0e24gYXMgUmVmaW5lQnV0dG9uQ2xhc3NOYW1lcyxlIGFzIFJlZmluZUJ1dHRvblRlc3RJZHMsbyBhcyBSZWZpbmVQYWdlSGVhZGVyQ2xhc3NOYW1lc307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/ui-types/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/core/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@refinedev/core/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AccessControlContext: () => (/* binding */ e0),
/* harmony export */   ActionTypes: () => (/* binding */ e1),
/* harmony export */   AuthPage: () => (/* binding */ e2),
/* harmony export */   Authenticated: () => (/* binding */ e3),
/* harmony export */   AutoSaveIndicator: () => (/* binding */ e4),
/* harmony export */   CanAccess: () => (/* binding */ e5),
/* harmony export */   ErrorComponent: () => (/* binding */ e6),
/* harmony export */   GitHubBanner: () => (/* binding */ e7),
/* harmony export */   I18nContext: () => (/* binding */ e8),
/* harmony export */   KeyBuilder: () => (/* binding */ e9),
/* harmony export */   LayoutWrapper: () => (/* binding */ e10),
/* harmony export */   Link: () => (/* binding */ e11),
/* harmony export */   LoginPage: () => (/* binding */ e12),
/* harmony export */   MetaContextProvider: () => (/* binding */ e13),
/* harmony export */   ReadyPage: () => (/* binding */ e14),
/* harmony export */   Refine: () => (/* binding */ e15),
/* harmony export */   ResourceContext: () => (/* binding */ e16),
/* harmony export */   RouteChangeHandler: () => (/* binding */ e17),
/* harmony export */   TranslationContext: () => (/* binding */ e18),
/* harmony export */   UndoableQueue: () => (/* binding */ e19),
/* harmony export */   WelcomePage: () => (/* binding */ e20),
/* harmony export */   createTreeView: () => (/* binding */ e21),
/* harmony export */   file2Base64: () => (/* binding */ e22),
/* harmony export */   flattenObjectKeys: () => (/* binding */ e23),
/* harmony export */   generateDefaultDocumentTitle: () => (/* binding */ e24),
/* harmony export */   getDefaultFilter: () => (/* binding */ e25),
/* harmony export */   getDefaultSortOrder: () => (/* binding */ e26),
/* harmony export */   getNextPageParam: () => (/* binding */ e27),
/* harmony export */   getPreviousPageParam: () => (/* binding */ e28),
/* harmony export */   handleUseParams: () => (/* binding */ e29),
/* harmony export */   importCSVMapper: () => (/* binding */ e30),
/* harmony export */   keys: () => (/* binding */ e31),
/* harmony export */   legacyResourceTransform: () => (/* binding */ e32),
/* harmony export */   matchResourceFromRoute: () => (/* binding */ e33),
/* harmony export */   parseTableParams: () => (/* binding */ e34),
/* harmony export */   parseTableParamsFromQuery: () => (/* binding */ e35),
/* harmony export */   pickDataProvider: () => (/* binding */ e36),
/* harmony export */   pickNotDeprecated: () => (/* binding */ e37),
/* harmony export */   propertyPathToArray: () => (/* binding */ e38),
/* harmony export */   queryKeys: () => (/* binding */ e39),
/* harmony export */   routeGenerator: () => (/* binding */ e40),
/* harmony export */   setInitialFilters: () => (/* binding */ e41),
/* harmony export */   setInitialSorters: () => (/* binding */ e42),
/* harmony export */   stringifyTableParams: () => (/* binding */ e43),
/* harmony export */   unionFilters: () => (/* binding */ e44),
/* harmony export */   unionSorters: () => (/* binding */ e45),
/* harmony export */   useActiveAuthProvider: () => (/* binding */ e46),
/* harmony export */   useApiUrl: () => (/* binding */ e47),
/* harmony export */   useAuthenticated: () => (/* binding */ e48),
/* harmony export */   useBack: () => (/* binding */ e49),
/* harmony export */   useBreadcrumb: () => (/* binding */ e50),
/* harmony export */   useCan: () => (/* binding */ e51),
/* harmony export */   useCanWithoutCache: () => (/* binding */ e52),
/* harmony export */   useCancelNotification: () => (/* binding */ e53),
/* harmony export */   useCheckError: () => (/* binding */ e54),
/* harmony export */   useCloneButton: () => (/* binding */ e55),
/* harmony export */   useCreate: () => (/* binding */ e56),
/* harmony export */   useCreateButton: () => (/* binding */ e57),
/* harmony export */   useCreateMany: () => (/* binding */ e58),
/* harmony export */   useCustom: () => (/* binding */ e59),
/* harmony export */   useCustomMutation: () => (/* binding */ e60),
/* harmony export */   useDataProvider: () => (/* binding */ e61),
/* harmony export */   useDelete: () => (/* binding */ e62),
/* harmony export */   useDeleteButton: () => (/* binding */ e63),
/* harmony export */   useDeleteMany: () => (/* binding */ e64),
/* harmony export */   useEditButton: () => (/* binding */ e65),
/* harmony export */   useExport: () => (/* binding */ e66),
/* harmony export */   useExportButton: () => (/* binding */ e67),
/* harmony export */   useForgotPassword: () => (/* binding */ e68),
/* harmony export */   useForm: () => (/* binding */ e69),
/* harmony export */   useGetIdentity: () => (/* binding */ e70),
/* harmony export */   useGetLocale: () => (/* binding */ e71),
/* harmony export */   useGetToPath: () => (/* binding */ e72),
/* harmony export */   useGo: () => (/* binding */ e73),
/* harmony export */   useHandleNotification: () => (/* binding */ e74),
/* harmony export */   useImport: () => (/* binding */ e75),
/* harmony export */   useImportButton: () => (/* binding */ e76),
/* harmony export */   useInfiniteList: () => (/* binding */ e77),
/* harmony export */   useInvalidate: () => (/* binding */ e78),
/* harmony export */   useInvalidateAuthStore: () => (/* binding */ e79),
/* harmony export */   useIsAuthenticated: () => (/* binding */ e80),
/* harmony export */   useIsExistAuthentication: () => (/* binding */ e81),
/* harmony export */   useKeys: () => (/* binding */ e82),
/* harmony export */   useLink: () => (/* binding */ e83),
/* harmony export */   useList: () => (/* binding */ e84),
/* harmony export */   useListButton: () => (/* binding */ e85),
/* harmony export */   useLiveMode: () => (/* binding */ e86),
/* harmony export */   useLoadingOvertime: () => (/* binding */ e87),
/* harmony export */   useLog: () => (/* binding */ e88),
/* harmony export */   useLogList: () => (/* binding */ e89),
/* harmony export */   useLogin: () => (/* binding */ e90),
/* harmony export */   useLogout: () => (/* binding */ e91),
/* harmony export */   useMany: () => (/* binding */ e92),
/* harmony export */   useMenu: () => (/* binding */ e93),
/* harmony export */   useMeta: () => (/* binding */ e94),
/* harmony export */   useMetaContext: () => (/* binding */ e95),
/* harmony export */   useModal: () => (/* binding */ e96),
/* harmony export */   useMutationMode: () => (/* binding */ e97),
/* harmony export */   useNavigation: () => (/* binding */ e98),
/* harmony export */   useNotification: () => (/* binding */ e99),
/* harmony export */   useOnError: () => (/* binding */ e100),
/* harmony export */   useOne: () => (/* binding */ e101),
/* harmony export */   useParse: () => (/* binding */ e102),
/* harmony export */   useParsed: () => (/* binding */ e103),
/* harmony export */   usePermissions: () => (/* binding */ e104),
/* harmony export */   usePublish: () => (/* binding */ e105),
/* harmony export */   useRedirectionAfterSubmission: () => (/* binding */ e106),
/* harmony export */   useRefineContext: () => (/* binding */ e107),
/* harmony export */   useRefineOptions: () => (/* binding */ e108),
/* harmony export */   useRefreshButton: () => (/* binding */ e109),
/* harmony export */   useRegister: () => (/* binding */ e110),
/* harmony export */   useResource: () => (/* binding */ e111),
/* harmony export */   useResourceParams: () => (/* binding */ e112),
/* harmony export */   useResourceSubscription: () => (/* binding */ e113),
/* harmony export */   useResourceWithRoute: () => (/* binding */ e114),
/* harmony export */   useRouterContext: () => (/* binding */ e115),
/* harmony export */   useRouterType: () => (/* binding */ e116),
/* harmony export */   useSaveButton: () => (/* binding */ e117),
/* harmony export */   useSelect: () => (/* binding */ e118),
/* harmony export */   useSetLocale: () => (/* binding */ e119),
/* harmony export */   useShow: () => (/* binding */ e120),
/* harmony export */   useShowButton: () => (/* binding */ e121),
/* harmony export */   useSubscription: () => (/* binding */ e122),
/* harmony export */   useSyncWithLocation: () => (/* binding */ e123),
/* harmony export */   useTable: () => (/* binding */ e124),
/* harmony export */   useTitle: () => (/* binding */ e125),
/* harmony export */   useToPath: () => (/* binding */ e126),
/* harmony export */   useTranslate: () => (/* binding */ e127),
/* harmony export */   useTranslation: () => (/* binding */ e128),
/* harmony export */   useUpdate: () => (/* binding */ e129),
/* harmony export */   useUpdateMany: () => (/* binding */ e130),
/* harmony export */   useUpdatePassword: () => (/* binding */ e131),
/* harmony export */   useUserFriendlyName: () => (/* binding */ e132),
/* harmony export */   useWarnAboutChange: () => (/* binding */ e133),
/* harmony export */   userFriendlyResourceName: () => (/* binding */ e134)
/* harmony export */ });
/* harmony import */ var next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/build/webpack/loaders/next-flight-loader/module-proxy */ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js");


const e0 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#AccessControlContext`);

const e1 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#ActionTypes`);

const e2 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#AuthPage`);

const e3 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#Authenticated`);

const e4 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#AutoSaveIndicator`);

const e5 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#CanAccess`);

const e6 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#ErrorComponent`);

const e7 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#GitHubBanner`);

const e8 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#I18nContext`);

const e9 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#KeyBuilder`);

const e10 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#LayoutWrapper`);

const e11 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#Link`);

const e12 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#LoginPage`);

const e13 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#MetaContextProvider`);

const e14 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#ReadyPage`);

const e15 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#Refine`);

const e16 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#ResourceContext`);

const e17 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#RouteChangeHandler`);

const e18 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#TranslationContext`);

const e19 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#UndoableQueue`);

const e20 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#WelcomePage`);

const e21 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#createTreeView`);

const e22 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#file2Base64`);

const e23 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#flattenObjectKeys`);

const e24 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#generateDefaultDocumentTitle`);

const e25 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#getDefaultFilter`);

const e26 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#getDefaultSortOrder`);

const e27 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#getNextPageParam`);

const e28 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#getPreviousPageParam`);

const e29 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#handleUseParams`);

const e30 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#importCSVMapper`);

const e31 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#keys`);

const e32 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#legacyResourceTransform`);

const e33 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#matchResourceFromRoute`);

const e34 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#parseTableParams`);

const e35 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#parseTableParamsFromQuery`);

const e36 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#pickDataProvider`);

const e37 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#pickNotDeprecated`);

const e38 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#propertyPathToArray`);

const e39 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#queryKeys`);

const e40 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#routeGenerator`);

const e41 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#setInitialFilters`);

const e42 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#setInitialSorters`);

const e43 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#stringifyTableParams`);

const e44 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#unionFilters`);

const e45 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#unionSorters`);

const e46 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useActiveAuthProvider`);

const e47 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useApiUrl`);

const e48 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useAuthenticated`);

const e49 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useBack`);

const e50 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useBreadcrumb`);

const e51 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useCan`);

const e52 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useCanWithoutCache`);

const e53 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useCancelNotification`);

const e54 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useCheckError`);

const e55 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useCloneButton`);

const e56 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useCreate`);

const e57 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useCreateButton`);

const e58 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useCreateMany`);

const e59 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useCustom`);

const e60 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useCustomMutation`);

const e61 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useDataProvider`);

const e62 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useDelete`);

const e63 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useDeleteButton`);

const e64 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useDeleteMany`);

const e65 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useEditButton`);

const e66 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useExport`);

const e67 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useExportButton`);

const e68 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useForgotPassword`);

const e69 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useForm`);

const e70 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useGetIdentity`);

const e71 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useGetLocale`);

const e72 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useGetToPath`);

const e73 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useGo`);

const e74 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useHandleNotification`);

const e75 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useImport`);

const e76 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useImportButton`);

const e77 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useInfiniteList`);

const e78 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useInvalidate`);

const e79 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useInvalidateAuthStore`);

const e80 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useIsAuthenticated`);

const e81 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useIsExistAuthentication`);

const e82 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useKeys`);

const e83 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useLink`);

const e84 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useList`);

const e85 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useListButton`);

const e86 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useLiveMode`);

const e87 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useLoadingOvertime`);

const e88 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useLog`);

const e89 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useLogList`);

const e90 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useLogin`);

const e91 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useLogout`);

const e92 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useMany`);

const e93 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useMenu`);

const e94 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useMeta`);

const e95 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useMetaContext`);

const e96 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useModal`);

const e97 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useMutationMode`);

const e98 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useNavigation`);

const e99 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useNotification`);

const e100 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useOnError`);

const e101 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useOne`);

const e102 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useParse`);

const e103 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useParsed`);

const e104 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#usePermissions`);

const e105 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#usePublish`);

const e106 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useRedirectionAfterSubmission`);

const e107 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useRefineContext`);

const e108 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useRefineOptions`);

const e109 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useRefreshButton`);

const e110 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useRegister`);

const e111 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useResource`);

const e112 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useResourceParams`);

const e113 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useResourceSubscription`);

const e114 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useResourceWithRoute`);

const e115 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useRouterContext`);

const e116 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useRouterType`);

const e117 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useSaveButton`);

const e118 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useSelect`);

const e119 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useSetLocale`);

const e120 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useShow`);

const e121 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useShowButton`);

const e122 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useSubscription`);

const e123 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useSyncWithLocation`);

const e124 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useTable`);

const e125 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useTitle`);

const e126 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useToPath`);

const e127 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useTranslate`);

const e128 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useTranslation`);

const e129 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useUpdate`);

const e130 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useUpdateMany`);

const e131 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useUpdatePassword`);

const e132 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useUserFriendlyName`);

const e133 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#useWarnAboutChange`);

const e134 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/core/dist/index.mjs#userFriendlyResourceName`);


/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/kbar/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@refinedev/kbar/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   KBAR_LISTBOX: () => (/* binding */ e0),
/* harmony export */   KBarAnimator: () => (/* binding */ e1),
/* harmony export */   KBarContext: () => (/* binding */ e2),
/* harmony export */   KBarPortal: () => (/* binding */ e3),
/* harmony export */   KBarPositioner: () => (/* binding */ e4),
/* harmony export */   KBarProvider: () => (/* binding */ e5),
/* harmony export */   KBarResults: () => (/* binding */ e6),
/* harmony export */   KBarSearch: () => (/* binding */ e7),
/* harmony export */   NO_GROUP: () => (/* binding */ e8),
/* harmony export */   Priority: () => (/* binding */ e9),
/* harmony export */   RefineKbar: () => (/* binding */ e10),
/* harmony export */   RefineKbarPropsContext: () => (/* binding */ e11),
/* harmony export */   RefineKbarProvider: () => (/* binding */ e12),
/* harmony export */   VisualState: () => (/* binding */ e13),
/* harmony export */   createAction: () => (/* binding */ e14),
/* harmony export */   getListboxItemId: () => (/* binding */ e15),
/* harmony export */   useKBar: () => (/* binding */ e16),
/* harmony export */   useMatches: () => (/* binding */ e17),
/* harmony export */   useRefineKbar: () => (/* binding */ e18),
/* harmony export */   useRegisterActions: () => (/* binding */ e19)
/* harmony export */ });
/* harmony import */ var next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/build/webpack/loaders/next-flight-loader/module-proxy */ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js");


const e0 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/kbar/dist/index.mjs#KBAR_LISTBOX`);

const e1 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/kbar/dist/index.mjs#KBarAnimator`);

const e2 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/kbar/dist/index.mjs#KBarContext`);

const e3 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/kbar/dist/index.mjs#KBarPortal`);

const e4 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/kbar/dist/index.mjs#KBarPositioner`);

const e5 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/kbar/dist/index.mjs#KBarProvider`);

const e6 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/kbar/dist/index.mjs#KBarResults`);

const e7 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/kbar/dist/index.mjs#KBarSearch`);

const e8 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/kbar/dist/index.mjs#NO_GROUP`);

const e9 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/kbar/dist/index.mjs#Priority`);

const e10 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/kbar/dist/index.mjs#RefineKbar`);

const e11 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/kbar/dist/index.mjs#RefineKbarPropsContext`);

const e12 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/kbar/dist/index.mjs#RefineKbarProvider`);

const e13 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/kbar/dist/index.mjs#VisualState`);

const e14 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/kbar/dist/index.mjs#createAction`);

const e15 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/kbar/dist/index.mjs#getListboxItemId`);

const e16 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/kbar/dist/index.mjs#useKBar`);

const e17 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/kbar/dist/index.mjs#useMatches`);

const e18 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/kbar/dist/index.mjs#useRefineKbar`);

const e19 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/kbar/dist/index.mjs#useRegisterActions`);


/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/mui/dist/index.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@refinedev/mui/dist/index.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AuthPage: () => (/* binding */ e0),
/* harmony export */   AutoSaveIndicator: () => (/* binding */ e1),
/* harmony export */   BooleanField: () => (/* binding */ e2),
/* harmony export */   Breadcrumb: () => (/* binding */ e3),
/* harmony export */   CircularDeterminate: () => (/* binding */ e4),
/* harmony export */   CloneButton: () => (/* binding */ e5),
/* harmony export */   Create: () => (/* binding */ e6),
/* harmony export */   CreateButton: () => (/* binding */ e7),
/* harmony export */   DarkTheme: () => (/* binding */ e8),
/* harmony export */   DateField: () => (/* binding */ e9),
/* harmony export */   DeleteButton: () => (/* binding */ e10),
/* harmony export */   Edit: () => (/* binding */ e11),
/* harmony export */   EditButton: () => (/* binding */ e12),
/* harmony export */   EmailField: () => (/* binding */ e13),
/* harmony export */   ErrorComponent: () => (/* binding */ e14),
/* harmony export */   ExportButton: () => (/* binding */ e15),
/* harmony export */   FileField: () => (/* binding */ e16),
/* harmony export */   HamburgerMenu: () => (/* binding */ e17),
/* harmony export */   ImportButton: () => (/* binding */ e18),
/* harmony export */   LightTheme: () => (/* binding */ e19),
/* harmony export */   List: () => (/* binding */ e20),
/* harmony export */   ListButton: () => (/* binding */ e21),
/* harmony export */   MarkdownField: () => (/* binding */ e22),
/* harmony export */   NotistackSnackbarContent: () => (/* binding */ e23),
/* harmony export */   NumberField: () => (/* binding */ e24),
/* harmony export */   RefineSnackbarProvider: () => (/* binding */ e25),
/* harmony export */   RefineThemes: () => (/* binding */ e26),
/* harmony export */   RefreshButton: () => (/* binding */ e27),
/* harmony export */   SaveButton: () => (/* binding */ e28),
/* harmony export */   Show: () => (/* binding */ e29),
/* harmony export */   ShowButton: () => (/* binding */ e30),
/* harmony export */   SnackbarProvider: () => (/* binding */ e31),
/* harmony export */   TagField: () => (/* binding */ e32),
/* harmony export */   TextFieldComponent: () => (/* binding */ e33),
/* harmony export */   ThemedHeaderV2: () => (/* binding */ e34),
/* harmony export */   ThemedLayoutContext: () => (/* binding */ e35),
/* harmony export */   ThemedLayoutContextProvider: () => (/* binding */ e36),
/* harmony export */   ThemedLayoutV2: () => (/* binding */ e37),
/* harmony export */   ThemedSiderV2: () => (/* binding */ e38),
/* harmony export */   ThemedTitleV2: () => (/* binding */ e39),
/* harmony export */   UrlField: () => (/* binding */ e40),
/* harmony export */   useAutocomplete: () => (/* binding */ e41),
/* harmony export */   useDataGrid: () => (/* binding */ e42),
/* harmony export */   useNotificationProvider: () => (/* binding */ e43),
/* harmony export */   useSnackbar: () => (/* binding */ e44),
/* harmony export */   useThemedLayoutContext: () => (/* binding */ e45),
/* harmony export */   withSnackbar: () => (/* binding */ e46)
/* harmony export */ });
/* harmony import */ var next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/build/webpack/loaders/next-flight-loader/module-proxy */ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js");


const e0 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#AuthPage`);

const e1 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#AutoSaveIndicator`);

const e2 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#BooleanField`);

const e3 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#Breadcrumb`);

const e4 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#CircularDeterminate`);

const e5 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#CloneButton`);

const e6 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#Create`);

const e7 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#CreateButton`);

const e8 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#DarkTheme`);

const e9 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#DateField`);

const e10 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#DeleteButton`);

const e11 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#Edit`);

const e12 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#EditButton`);

const e13 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#EmailField`);

const e14 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#ErrorComponent`);

const e15 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#ExportButton`);

const e16 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#FileField`);

const e17 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#HamburgerMenu`);

const e18 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#ImportButton`);

const e19 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#LightTheme`);

const e20 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#List`);

const e21 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#ListButton`);

const e22 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#MarkdownField`);

const e23 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#NotistackSnackbarContent`);

const e24 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#NumberField`);

const e25 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#RefineSnackbarProvider`);

const e26 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#RefineThemes`);

const e27 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#RefreshButton`);

const e28 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#SaveButton`);

const e29 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#Show`);

const e30 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#ShowButton`);

const e31 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#SnackbarProvider`);

const e32 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#TagField`);

const e33 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#TextFieldComponent`);

const e34 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#ThemedHeaderV2`);

const e35 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#ThemedLayoutContext`);

const e36 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#ThemedLayoutContextProvider`);

const e37 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#ThemedLayoutV2`);

const e38 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#ThemedSiderV2`);

const e39 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#ThemedTitleV2`);

const e40 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#UrlField`);

const e41 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#useAutocomplete`);

const e42 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#useDataGrid`);

const e43 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#useNotificationProvider`);

const e44 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#useSnackbar`);

const e45 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#useThemedLayoutContext`);

const e46 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/mui/dist/index.mjs#withSnackbar`);


/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/nextjs-router/dist/index.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@refinedev/nextjs-router/dist/index.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NavigateToResource: () => (/* binding */ e0),
/* harmony export */   RefineRoutes: () => (/* binding */ e1),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   paramsFromCurrentPath: () => (/* binding */ e2),
/* harmony export */   parseTableParams: () => (/* binding */ e3),
/* harmony export */   stringifyConfig: () => (/* binding */ e4)
/* harmony export */ });
/* harmony import */ var next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/build/webpack/loaders/next-flight-loader/module-proxy */ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/module-proxy.js");


const e0 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/nextjs-router/dist/index.mjs#NavigateToResource`);

const e1 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/nextjs-router/dist/index.mjs#RefineRoutes`);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/nextjs-router/dist/index.mjs#default`));

const e2 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/nextjs-router/dist/index.mjs#paramsFromCurrentPath`);

const e3 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/nextjs-router/dist/index.mjs#parseTableParams`);

const e4 = (0,next_dist_build_webpack_loaders_next_flight_loader_module_proxy__WEBPACK_IMPORTED_MODULE_0__.createProxy)(String.raw`/workspaces/Private/node_modules/@refinedev/nextjs-router/dist/index.mjs#stringifyConfig`);


/***/ })

};
;